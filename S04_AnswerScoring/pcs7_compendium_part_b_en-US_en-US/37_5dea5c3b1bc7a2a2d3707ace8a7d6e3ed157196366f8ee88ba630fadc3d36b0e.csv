,NODE_FILE_NAME,NODE_NUMBER,NODE_HASH,NODE_TEXT,Q,A_NUMBER,A,helpfulness,correctness,coherence,complexity,verbosity
0,pcs7_compendium_part_b_en-US_en-US.txt,37,5dea5c3b1bc7a2a2d3707ace8a7d6e3ed157196366f8ee88ba630fadc3d36b0e,"Changes to the input parameters of F blocks with F data types can be made as follows:

- Offline with the assistance of the CFC editor
- Online using CFC test mode with safety mode deactivated

Note

Values of PAR_ID and COMPLEM must not be changed. If errors in the safety data format are detected during the execution of the safety program, an F-STOP is triggered.

# 7.2.4 Run sequence of F-blocks

# Defining the run sequence

You define the run sequence in the CFC editor in the same way as for a standard user program. Changing the run sequence also changes the collective signature.

# Correct run sequence of F-blocks

The sequence of the F-blocks within the F-shutdown group is relevant. The number of F-runtime groups the F-shutdown group has been split into is of no relevance. Essentially, the correct run sequence of the various F-block types is as follows:

1. Placed automatically:
- F module driver for F-signal modules with inputs or with inputs and outputs
- F-communications blocks and F-system blocks for receiving
- F blocks for data conversion from standard value to F-structure
- F modules with OS connection
2. F channel drivers for inputs
3. F blocks for user logic

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

1. F channel drivers for outputs
2. Placed automatically:
- F block F_PLK
- F block F_PSG_M
- F module driver for F-signal modules with outputs or with inputs and outputs
- F-communications blocks and F-system blocks for sending
- F block F_PLK_O
- F block F_DIAG (S7 F-Systems Lib V1_3 and higher)

The run sequence of the blocks listed under items 1 and 5 is adjusted automatically when the F-program is compiled.
As if S7 F Systems Lib V1_3, separate runtime groups are created for the F blocks listed under points 1 and 5 during the first compilation.
The IPO principle (input, process, output) must always be observed when placing F-channel drivers and F-blocks for user logic.
This ensures that all inputs are read first, the relevant processing steps are performed, and all outputs are then written.
Furthermore, F-runtime groups and F-monitoring blocks that are only visible following compilation are also added automatically.

Note

No changes may be made in the automatically added runtime groups with the exception of the scan cycle monitoring on ""F_CYC_CO"" blocks and the parameter assignment of the ""F_SHUTDN"" block.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.5 F-runtime groups

During the programming of the safety program, F-blocks cannot be inserted directly into tasks (cyclic interrupt OBs). When a new CFC chart is created in PCS 7, the system will automatically generate a runtime group of the same name, into which the F-blocks placed in the corresponding CFC chart can then be inserted. An F-runtime group only becomes an F-runtime group (identified by a yellow folder and ""F"") when F-blocks are called in it.

0B37 [Cyclic interrupt7] (300 ms)
@CPU_RTI@CPU_RT
@F_ShutDn_37 (300 ms)
@F_ShutDn (300 ms)
CycCo-QB37 (300 ms)
CycCo-OB3ZIF_CYC_CO-OB37
@F_CycCo-OB3ZIF_TEST
@F_CycCo-OB37IF_TESTC
@F_TestMode (300 ms)
@F_IN_37_0 (300 ms)
SFC_109_F (300 ms)
AI_F (300 ms)
HS104_F (300 ms)
@F_OUT_37_0 (300 ms)
@F_DbIniti (300 ms)
0B38 [Cycic interrupta] (10 ms)

# Runtime groups of an F-program

The F-program is divided into several runtime groups, as shown in the table below.

Note

xx = Number of the cyclic interrupt OB

y = Consecutive numbering if several shutdown groups exist in a single cyclic interrupt OB

|Chart|F blocks|
|---|---|
|@F_ShutDn_xx|Shutdown logic of cyclic interrupt OB The shutdown logic is created with RTGLOGIC and standard logic blocks.|
|@F_ShutDn|Shutdown block Where an F-program is present in several cyclic interrupt OBs, this runtime group is integrated into the cyclic interrupt OB with the shortest call time. The shutdown logic is created with F_SHUTDN, RTGLOGIC, and standard logic blocks.|
|@F_CycCo-OBxx|F_CYC_CO, F_TEST and F_TESTC (for tests)|
|@F_TestMode|F_TESTM for managing safety mode|
|@F_IN_xx_y|F blocks which supply input values for the F-program (F_QUITES, communication receive blocks, conversion blocks from standard to F-data types, drivers for F-input modules) Runtime groups with user logic, in the sequence in which they were created by the user|

Compendium Part B - Process Safety (V9.0)
Operating Manual, 04/2018, A5E43228905-AA

# 7.2 Creating the safety program

@F_OUT_xx_y Blocks which further process output values of F-blocks (communication send blocks, conversion blocks from F-to standard data types, drivers for F-output modules, F_PLK, F_PLK_O, and F_DIAG for program sequence control)

@F_DbInitxx DB_INIT function block required for the cold restart of an F-runtime group

All required error OBs are added to the block container in the SIMATIC Manager.

There should only be one @F_IN_xx_y runtime group before the first F-user runtime group and one @F_OUT_xx_y runtime group after the last F-user runtime group. If the safety program consists of several shutdown groups (see section 6.2.6 (Page 87)), there is the @F_IN_xx_y and @F_OUT_xx_y runtime group both before and after the F-user runtime group in the shutdown groups.

# Rules for F-runtime groups in the safety program

- We recommend that you proceed as follows in order to make the lengths of the F-cycles as uniform as possible:
If you mix F-and standard runtime groups in a cyclic interrupt OB, you must execute the F-runtime groups before the standard runtime groups.
- The following defaults are set for properties of an F-runtime group:
- Reduction ratio = 1
- Phase offset = 0
- Properties Runtime Group
- Task: 0B37
- Name: HS104
- Comment:
- Reduction ratio:
- Phase offset:
- Optimize run sequence
- Active:
- You are not permitted to move automatically generated F-runtime groups (identified by @).

Note: The feature: Optimize Run Sequence in CFC can lead to a change in the collective signature and impair the response times of the safety program, and therefore should not be used in F-runtime groups.

With PCS 7 V7.0 SP1 and higher, it is no longer possible to optimize the run sequence for cyclic interrupt OBs with F-runtime groups.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.6 F-shutdown groups

An F-shutdown group is a self-contained unit in your safety program. It contains user logic which is executed or shut down simultaneously. The F-shutdown group contains one or a number of F-runtime groups which are assigned to a common cyclic interrupt OB. You can choose whether an error during execution of the safety program causes a full shutdown or a partial shutdown of the safety program. With a partial shutdown, only the F-shutdown group in which the error occurred is shut down.

# Rules for F-shutdown groups in the safety program

You are not permitted to directly interconnect F-blocks in different F-shutdown groups. Data can only be exchanged between F-shutdown groups using special communication blocks (F_S_xx, F_R_xx for F_BOOL and F_REAL data structures). Therefore, all F-channel drivers in an F-signal module must be in the same F-shutdown group, together with the module driver of the F-signal module.

# Defining F-shutdown groups

As soon as you place F-blocks in the CFC editor for the first time, all of the F-runtime groups in a single cyclic interrupt OB will form an F-shutdown group. You can configure each F-runtime group as the last F-runtime group in an F-shutdown group by placing the F_PSG_M ""selection block"". The F-system then creates a new F-shutdown group for all subsequent F-runtime groups until another F_PSG_M block is found.

# Distribution/Combination by means of manual placing of F_PSG_M

If you add or delete one or a number of F_PSG_M blocks in your project, the order of your F-shutdown groups will change. If you make a change to the layout of your F-shutdown groups, you must make sure that the F-module drivers and all assigned F-channel drivers are integrated in the same F-shutdown group. You can split one F-shutdown group into two F-shutdown groups. To do this, in the CFC editor's runtime editor, place the F_PSG_M block in the last F-runtime group which is to be assigned to the first F-shutdown group. All subsequent F-runtime groups will then be assigned to the second F-shutdown group. The number of F-shutdown groups is limited to 110 in all cyclic interrupt OBs. The system restricts the number of F-runtime groups in an F-shutdown group. You have the option of combining two F-shutdown groups. To do this, in the runtime editor of the CFC editor, delete the F_PSG_M block between the F-shutdown groups. If you combine a number of F-shutdown groups which exchange data via F-communication blocks in a single F-shutdown group, you need to remove these F-communications blocks and replace them with direct interconnections.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# Programming data exchange between F-shutdown groups

If you wish to exchange data between two F-shutdown groups, you are not permitted to interconnect the inputs and outputs directly. You need to use the following F-system blocks for data exchange between F blocks in different F-shutdown groups:

|F block|Description|
|---|---|
|F_S_R/F_R_R|Safe transfer of 5 data of the F_REAL type|
|F_S_BO/F_R_BO|Safe transfer of 5 data of the F_BOOL type|

# Procedure for data exchange

1. In the F-shutdown group from which data is to be transferred, add an F_S_R or F_S_BO type F-block.
2. In the F-shutdown group to which data is to be transferred, add an F_R_R or F_R_BO type F-block.
3. Interconnect the SD_R_xx inputs of the F_S_R or the SD_BO_xx inputs of the F_S_BO with the data to be transferred.
4. Interconnect the RD_R_xx outputs of the F_R_R or the RD_BO_xx outputs of the F_R_BO with the inputs of the F-block for further processing of the data received.
5. Interconnect the S_DB output of the send block with the S_DB input of the associated receive block.
6. Configure the TIMEOUT inputs of the F_R_R and F_R_BO receive blocks with the F-monitoring time calculated.
7. Configure the receive block substitute values for the scenario of a shutdown of the sending shutdown group.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Extract from a chart for shutdown group 1 with send block:

|42617|7ail-|7133 Cor|CHLDEA F|1e-0- Ck_INE|
|---|---|---|---|---|
|JdEO|90_8o_|J0_EO|90_BO|JD_Bo_|
|11_112|J0_EO_07|32_80_08|7193 Coz|CHLDEA|
|Q_EAII|4212 bloel|PaJJ_CX|0_Kod|ubSime|
|4nu|Lou|JG RG|P3c >| |

The connection to shutdown group 2 is established by linking output S_DB of block F_S_BO_1 in shutdown group 1 with input S_DB on block F_R_BO_1 in shutdown group 2.

Extract from a chart for shutdown group 2 with receive block:

|Xbaeha|32430|netr|
|---|---|---|
|314 = doxr|3281p|REC_E?|
|Recei|ER EL|RD_BO_|
|RD_BO_|8088Q_01|RD_EQ|
|RD_E?|302ZD|RD_Lo|

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

89

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.7 Data exchange between the F user program and standard user program

The standard program and the F-program use different data formats. Accordingly, special conversion blocks have to be used for data exchange.

F-CPU
F-program
Conversion blocks
Standard program
Converting F-data types to standard data types

If you need the standard user program to process data from the F-program further (for monitoring on the PCS 7 OS, for example), a block for F_FDatatype_Datatype data conversion will have to be interconnected in the user program so that the F-data types can be converted into standard data types. This converter blocks must be called in the standard user program (standard runtime group).

Extract from a process tag chart; converting the ""QBAD"" signal from F_BOOL to BOOL:

Note

The figure is available in its original size as appendix to the manual in the ZIP download of the checklists.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Standard and F-blocks are in different runtime groups. As shown here, some F-blocks have outputs (depicted in gray), which can be directly interconnected with standard PCS 7 blocks. PCS 7 blocks such as MonAnL, MonDiL, EventMESSAGE and their associated faceplates and process symbols are used to visualize fail-safe analog values and status messages as well as system states and operating states. If parameters cannot be directly further interconnected due to the safety data format, the conversion blocks described above can be used.

# Converting standard data types into F-data types

If data from the standard user program is to be processed further in the F-program, it will need to be converted. The blocks for data conversion from standard data types to F-data types (F_datatype_Fdatatype) can only be used in the F-program (F-runtime group).

Extract from an F-chart, conversion from REAL to F_REAL:

|7_R_FR_CONv|R -B|CE 32|CB39|:RELL|Aulci|
|---|---|---|---|---|---|
|DAII ZROC3?|VALUE DiT| | | | |

Note: The conversion blocks only perform data conversion; in other words, you will need to program additional measures in the F-program for plausibility checking purposes (with F_LIM_R, for example), in order to ensure that only non-hazardous values are possible.

# 7.2.8 How F-blocks with floating-point operations respond to number range overflows

Within the context of analog value processing, number range overflows/underflows can occur during arithmetic calculations (with division by 0, root from a negative number or number range overflow). With S7 F Systems Lib V1_3 and higher, the response is as follows in this case: The results ""Overflow (± infinite)"", ""Denormalized floating-point number"" or ""Invalid floating-point number (NaN)"" are:

- Either output at the output and can be processed further by subsequent F blocks
- Or signaled to special outputs. A substitute value is output if necessary.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

91

# Configuring the safety program

# 7.2 Creating the safety program

If the floating-point operation produces an invalid floating-point number (NaN) and no invalid floating-point number (NaN) existed as an address prior to this, the following diagnostics event will be entered in the F CPU's diagnostic buffer:

""Safety program: Invalid REAL number in DB"" (event ID 16#75D9)

You can use this entry in the diagnostic buffer to identify the F block with the invalid floating-point number (NaN).

If you are not able to prevent these events from occurring in your safety program, you will need to decide, on the basis of your application, whether you wish to respond to them in your safety program.

|AD?|nddie|101.o = 101.0_|10o.0|-10q|CUIL|5035|
|---|---|---|---|---|---|---|
|AD?|indoic|0b37 1.0e+3e|:Addle|0etz|3.0e-3e|10o.0|
| |100.0|3.0e-38| |CUIL|AD_|:itis|
|0837i|LIN_R|08371|#Addic|3402-32|c0m| |
| |ce-JE| |CUII|Sms|AD?|0BJ7i|
|Addue|J1o|~10O|02-J8|~100.0|CuTO|100.0=|
|DIV|LIK_R|:tris|100.0_| |100.-|CutQ|
|0.0|502S|SoRT|HXR|:Squo-|{AJi|hal|
|-10o.05|CVIQ|CUIL|5023_W| | | |

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.3 Configuring fail-safe AS-AS communication

You can use the F_LIM_R F block to check the result of a floating-point operation for overflow (± infinite) and invalid floating-point number (NaN).

- A limit violation is indicated by IN &gt; MAX or ""+ infinite"". ",How can data be exchanged between F-shutdown groups in the safety program according to the 'Compendium Part B - Process Safety (V9.0)'?,A1,"Data exchange requires special communication blocks (F_S_xx, F_R_xx for F_BOOL and F_REAL data structures), not direct interconnections.",1.9765625,2.078125,3.4375,1.609375,0.41015625
1,pcs7_compendium_part_b_en-US_en-US.txt,37,5dea5c3b1bc7a2a2d3707ace8a7d6e3ed157196366f8ee88ba630fadc3d36b0e,"Changes to the input parameters of F blocks with F data types can be made as follows:

- Offline with the assistance of the CFC editor
- Online using CFC test mode with safety mode deactivated

Note

Values of PAR_ID and COMPLEM must not be changed. If errors in the safety data format are detected during the execution of the safety program, an F-STOP is triggered.

# 7.2.4 Run sequence of F-blocks

# Defining the run sequence

You define the run sequence in the CFC editor in the same way as for a standard user program. Changing the run sequence also changes the collective signature.

# Correct run sequence of F-blocks

The sequence of the F-blocks within the F-shutdown group is relevant. The number of F-runtime groups the F-shutdown group has been split into is of no relevance. Essentially, the correct run sequence of the various F-block types is as follows:

1. Placed automatically:
- F module driver for F-signal modules with inputs or with inputs and outputs
- F-communications blocks and F-system blocks for receiving
- F blocks for data conversion from standard value to F-structure
- F modules with OS connection
2. F channel drivers for inputs
3. F blocks for user logic

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

1. F channel drivers for outputs
2. Placed automatically:
- F block F_PLK
- F block F_PSG_M
- F module driver for F-signal modules with outputs or with inputs and outputs
- F-communications blocks and F-system blocks for sending
- F block F_PLK_O
- F block F_DIAG (S7 F-Systems Lib V1_3 and higher)

The run sequence of the blocks listed under items 1 and 5 is adjusted automatically when the F-program is compiled.
As if S7 F Systems Lib V1_3, separate runtime groups are created for the F blocks listed under points 1 and 5 during the first compilation.
The IPO principle (input, process, output) must always be observed when placing F-channel drivers and F-blocks for user logic.
This ensures that all inputs are read first, the relevant processing steps are performed, and all outputs are then written.
Furthermore, F-runtime groups and F-monitoring blocks that are only visible following compilation are also added automatically.

Note

No changes may be made in the automatically added runtime groups with the exception of the scan cycle monitoring on ""F_CYC_CO"" blocks and the parameter assignment of the ""F_SHUTDN"" block.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.5 F-runtime groups

During the programming of the safety program, F-blocks cannot be inserted directly into tasks (cyclic interrupt OBs). When a new CFC chart is created in PCS 7, the system will automatically generate a runtime group of the same name, into which the F-blocks placed in the corresponding CFC chart can then be inserted. An F-runtime group only becomes an F-runtime group (identified by a yellow folder and ""F"") when F-blocks are called in it.

0B37 [Cyclic interrupt7] (300 ms)
@CPU_RTI@CPU_RT
@F_ShutDn_37 (300 ms)
@F_ShutDn (300 ms)
CycCo-QB37 (300 ms)
CycCo-OB3ZIF_CYC_CO-OB37
@F_CycCo-OB3ZIF_TEST
@F_CycCo-OB37IF_TESTC
@F_TestMode (300 ms)
@F_IN_37_0 (300 ms)
SFC_109_F (300 ms)
AI_F (300 ms)
HS104_F (300 ms)
@F_OUT_37_0 (300 ms)
@F_DbIniti (300 ms)
0B38 [Cycic interrupta] (10 ms)

# Runtime groups of an F-program

The F-program is divided into several runtime groups, as shown in the table below.

Note

xx = Number of the cyclic interrupt OB

y = Consecutive numbering if several shutdown groups exist in a single cyclic interrupt OB

|Chart|F blocks|
|---|---|
|@F_ShutDn_xx|Shutdown logic of cyclic interrupt OB The shutdown logic is created with RTGLOGIC and standard logic blocks.|
|@F_ShutDn|Shutdown block Where an F-program is present in several cyclic interrupt OBs, this runtime group is integrated into the cyclic interrupt OB with the shortest call time. The shutdown logic is created with F_SHUTDN, RTGLOGIC, and standard logic blocks.|
|@F_CycCo-OBxx|F_CYC_CO, F_TEST and F_TESTC (for tests)|
|@F_TestMode|F_TESTM for managing safety mode|
|@F_IN_xx_y|F blocks which supply input values for the F-program (F_QUITES, communication receive blocks, conversion blocks from standard to F-data types, drivers for F-input modules) Runtime groups with user logic, in the sequence in which they were created by the user|

Compendium Part B - Process Safety (V9.0)
Operating Manual, 04/2018, A5E43228905-AA

# 7.2 Creating the safety program

@F_OUT_xx_y Blocks which further process output values of F-blocks (communication send blocks, conversion blocks from F-to standard data types, drivers for F-output modules, F_PLK, F_PLK_O, and F_DIAG for program sequence control)

@F_DbInitxx DB_INIT function block required for the cold restart of an F-runtime group

All required error OBs are added to the block container in the SIMATIC Manager.

There should only be one @F_IN_xx_y runtime group before the first F-user runtime group and one @F_OUT_xx_y runtime group after the last F-user runtime group. If the safety program consists of several shutdown groups (see section 6.2.6 (Page 87)), there is the @F_IN_xx_y and @F_OUT_xx_y runtime group both before and after the F-user runtime group in the shutdown groups.

# Rules for F-runtime groups in the safety program

- We recommend that you proceed as follows in order to make the lengths of the F-cycles as uniform as possible:
If you mix F-and standard runtime groups in a cyclic interrupt OB, you must execute the F-runtime groups before the standard runtime groups.
- The following defaults are set for properties of an F-runtime group:
- Reduction ratio = 1
- Phase offset = 0
- Properties Runtime Group
- Task: 0B37
- Name: HS104
- Comment:
- Reduction ratio:
- Phase offset:
- Optimize run sequence
- Active:
- You are not permitted to move automatically generated F-runtime groups (identified by @).

Note: The feature: Optimize Run Sequence in CFC can lead to a change in the collective signature and impair the response times of the safety program, and therefore should not be used in F-runtime groups.

With PCS 7 V7.0 SP1 and higher, it is no longer possible to optimize the run sequence for cyclic interrupt OBs with F-runtime groups.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.6 F-shutdown groups

An F-shutdown group is a self-contained unit in your safety program. It contains user logic which is executed or shut down simultaneously. The F-shutdown group contains one or a number of F-runtime groups which are assigned to a common cyclic interrupt OB. You can choose whether an error during execution of the safety program causes a full shutdown or a partial shutdown of the safety program. With a partial shutdown, only the F-shutdown group in which the error occurred is shut down.

# Rules for F-shutdown groups in the safety program

You are not permitted to directly interconnect F-blocks in different F-shutdown groups. Data can only be exchanged between F-shutdown groups using special communication blocks (F_S_xx, F_R_xx for F_BOOL and F_REAL data structures). Therefore, all F-channel drivers in an F-signal module must be in the same F-shutdown group, together with the module driver of the F-signal module.

# Defining F-shutdown groups

As soon as you place F-blocks in the CFC editor for the first time, all of the F-runtime groups in a single cyclic interrupt OB will form an F-shutdown group. You can configure each F-runtime group as the last F-runtime group in an F-shutdown group by placing the F_PSG_M ""selection block"". The F-system then creates a new F-shutdown group for all subsequent F-runtime groups until another F_PSG_M block is found.

# Distribution/Combination by means of manual placing of F_PSG_M

If you add or delete one or a number of F_PSG_M blocks in your project, the order of your F-shutdown groups will change. If you make a change to the layout of your F-shutdown groups, you must make sure that the F-module drivers and all assigned F-channel drivers are integrated in the same F-shutdown group. You can split one F-shutdown group into two F-shutdown groups. To do this, in the CFC editor's runtime editor, place the F_PSG_M block in the last F-runtime group which is to be assigned to the first F-shutdown group. All subsequent F-runtime groups will then be assigned to the second F-shutdown group. The number of F-shutdown groups is limited to 110 in all cyclic interrupt OBs. The system restricts the number of F-runtime groups in an F-shutdown group. You have the option of combining two F-shutdown groups. To do this, in the runtime editor of the CFC editor, delete the F_PSG_M block between the F-shutdown groups. If you combine a number of F-shutdown groups which exchange data via F-communication blocks in a single F-shutdown group, you need to remove these F-communications blocks and replace them with direct interconnections.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# Programming data exchange between F-shutdown groups

If you wish to exchange data between two F-shutdown groups, you are not permitted to interconnect the inputs and outputs directly. You need to use the following F-system blocks for data exchange between F blocks in different F-shutdown groups:

|F block|Description|
|---|---|
|F_S_R/F_R_R|Safe transfer of 5 data of the F_REAL type|
|F_S_BO/F_R_BO|Safe transfer of 5 data of the F_BOOL type|

# Procedure for data exchange

1. In the F-shutdown group from which data is to be transferred, add an F_S_R or F_S_BO type F-block.
2. In the F-shutdown group to which data is to be transferred, add an F_R_R or F_R_BO type F-block.
3. Interconnect the SD_R_xx inputs of the F_S_R or the SD_BO_xx inputs of the F_S_BO with the data to be transferred.
4. Interconnect the RD_R_xx outputs of the F_R_R or the RD_BO_xx outputs of the F_R_BO with the inputs of the F-block for further processing of the data received.
5. Interconnect the S_DB output of the send block with the S_DB input of the associated receive block.
6. Configure the TIMEOUT inputs of the F_R_R and F_R_BO receive blocks with the F-monitoring time calculated.
7. Configure the receive block substitute values for the scenario of a shutdown of the sending shutdown group.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Extract from a chart for shutdown group 1 with send block:

|42617|7ail-|7133 Cor|CHLDEA F|1e-0- Ck_INE|
|---|---|---|---|---|
|JdEO|90_8o_|J0_EO|90_BO|JD_Bo_|
|11_112|J0_EO_07|32_80_08|7193 Coz|CHLDEA|
|Q_EAII|4212 bloel|PaJJ_CX|0_Kod|ubSime|
|4nu|Lou|JG RG|P3c >| |

The connection to shutdown group 2 is established by linking output S_DB of block F_S_BO_1 in shutdown group 1 with input S_DB on block F_R_BO_1 in shutdown group 2.

Extract from a chart for shutdown group 2 with receive block:

|Xbaeha|32430|netr|
|---|---|---|
|314 = doxr|3281p|REC_E?|
|Recei|ER EL|RD_BO_|
|RD_BO_|8088Q_01|RD_EQ|
|RD_E?|302ZD|RD_Lo|

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

89

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.7 Data exchange between the F user program and standard user program

The standard program and the F-program use different data formats. Accordingly, special conversion blocks have to be used for data exchange.

F-CPU
F-program
Conversion blocks
Standard program
Converting F-data types to standard data types

If you need the standard user program to process data from the F-program further (for monitoring on the PCS 7 OS, for example), a block for F_FDatatype_Datatype data conversion will have to be interconnected in the user program so that the F-data types can be converted into standard data types. This converter blocks must be called in the standard user program (standard runtime group).

Extract from a process tag chart; converting the ""QBAD"" signal from F_BOOL to BOOL:

Note

The figure is available in its original size as appendix to the manual in the ZIP download of the checklists.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Standard and F-blocks are in different runtime groups. As shown here, some F-blocks have outputs (depicted in gray), which can be directly interconnected with standard PCS 7 blocks. PCS 7 blocks such as MonAnL, MonDiL, EventMESSAGE and their associated faceplates and process symbols are used to visualize fail-safe analog values and status messages as well as system states and operating states. If parameters cannot be directly further interconnected due to the safety data format, the conversion blocks described above can be used.

# Converting standard data types into F-data types

If data from the standard user program is to be processed further in the F-program, it will need to be converted. The blocks for data conversion from standard data types to F-data types (F_datatype_Fdatatype) can only be used in the F-program (F-runtime group).

Extract from an F-chart, conversion from REAL to F_REAL:

|7_R_FR_CONv|R -B|CE 32|CB39|:RELL|Aulci|
|---|---|---|---|---|---|
|DAII ZROC3?|VALUE DiT| | | | |

Note: The conversion blocks only perform data conversion; in other words, you will need to program additional measures in the F-program for plausibility checking purposes (with F_LIM_R, for example), in order to ensure that only non-hazardous values are possible.

# 7.2.8 How F-blocks with floating-point operations respond to number range overflows

Within the context of analog value processing, number range overflows/underflows can occur during arithmetic calculations (with division by 0, root from a negative number or number range overflow). With S7 F Systems Lib V1_3 and higher, the response is as follows in this case: The results ""Overflow (± infinite)"", ""Denormalized floating-point number"" or ""Invalid floating-point number (NaN)"" are:

- Either output at the output and can be processed further by subsequent F blocks
- Or signaled to special outputs. A substitute value is output if necessary.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

91

# Configuring the safety program

# 7.2 Creating the safety program

If the floating-point operation produces an invalid floating-point number (NaN) and no invalid floating-point number (NaN) existed as an address prior to this, the following diagnostics event will be entered in the F CPU's diagnostic buffer:

""Safety program: Invalid REAL number in DB"" (event ID 16#75D9)

You can use this entry in the diagnostic buffer to identify the F block with the invalid floating-point number (NaN).

If you are not able to prevent these events from occurring in your safety program, you will need to decide, on the basis of your application, whether you wish to respond to them in your safety program.

|AD?|nddie|101.o = 101.0_|10o.0|-10q|CUIL|5035|
|---|---|---|---|---|---|---|
|AD?|indoic|0b37 1.0e+3e|:Addle|0etz|3.0e-3e|10o.0|
| |100.0|3.0e-38| |CUIL|AD_|:itis|
|0837i|LIN_R|08371|#Addic|3402-32|c0m| |
| |ce-JE| |CUII|Sms|AD?|0BJ7i|
|Addue|J1o|~10O|02-J8|~100.0|CuTO|100.0=|
|DIV|LIK_R|:tris|100.0_| |100.-|CutQ|
|0.0|502S|SoRT|HXR|:Squo-|{AJi|hal|
|-10o.05|CVIQ|CUIL|5023_W| | | |

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.3 Configuring fail-safe AS-AS communication

You can use the F_LIM_R F block to check the result of a floating-point operation for overflow (± infinite) and invalid floating-point number (NaN).

- A limit violation is indicated by IN &gt; MAX or ""+ infinite"". ",How can data be exchanged between F-shutdown groups in the safety program according to the 'Compendium Part B - Process Safety (V9.0)'?,A2,"Using specific communication blocks for F_BOOL and F_REAL data, as direct links between groups are prohibited.",2.03125,2.234375,3.484375,1.4765625,0.4453125
2,pcs7_compendium_part_b_en-US_en-US.txt,37,5dea5c3b1bc7a2a2d3707ace8a7d6e3ed157196366f8ee88ba630fadc3d36b0e,"Changes to the input parameters of F blocks with F data types can be made as follows:

- Offline with the assistance of the CFC editor
- Online using CFC test mode with safety mode deactivated

Note

Values of PAR_ID and COMPLEM must not be changed. If errors in the safety data format are detected during the execution of the safety program, an F-STOP is triggered.

# 7.2.4 Run sequence of F-blocks

# Defining the run sequence

You define the run sequence in the CFC editor in the same way as for a standard user program. Changing the run sequence also changes the collective signature.

# Correct run sequence of F-blocks

The sequence of the F-blocks within the F-shutdown group is relevant. The number of F-runtime groups the F-shutdown group has been split into is of no relevance. Essentially, the correct run sequence of the various F-block types is as follows:

1. Placed automatically:
- F module driver for F-signal modules with inputs or with inputs and outputs
- F-communications blocks and F-system blocks for receiving
- F blocks for data conversion from standard value to F-structure
- F modules with OS connection
2. F channel drivers for inputs
3. F blocks for user logic

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

1. F channel drivers for outputs
2. Placed automatically:
- F block F_PLK
- F block F_PSG_M
- F module driver for F-signal modules with outputs or with inputs and outputs
- F-communications blocks and F-system blocks for sending
- F block F_PLK_O
- F block F_DIAG (S7 F-Systems Lib V1_3 and higher)

The run sequence of the blocks listed under items 1 and 5 is adjusted automatically when the F-program is compiled.
As if S7 F Systems Lib V1_3, separate runtime groups are created for the F blocks listed under points 1 and 5 during the first compilation.
The IPO principle (input, process, output) must always be observed when placing F-channel drivers and F-blocks for user logic.
This ensures that all inputs are read first, the relevant processing steps are performed, and all outputs are then written.
Furthermore, F-runtime groups and F-monitoring blocks that are only visible following compilation are also added automatically.

Note

No changes may be made in the automatically added runtime groups with the exception of the scan cycle monitoring on ""F_CYC_CO"" blocks and the parameter assignment of the ""F_SHUTDN"" block.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.5 F-runtime groups

During the programming of the safety program, F-blocks cannot be inserted directly into tasks (cyclic interrupt OBs). When a new CFC chart is created in PCS 7, the system will automatically generate a runtime group of the same name, into which the F-blocks placed in the corresponding CFC chart can then be inserted. An F-runtime group only becomes an F-runtime group (identified by a yellow folder and ""F"") when F-blocks are called in it.

0B37 [Cyclic interrupt7] (300 ms)
@CPU_RTI@CPU_RT
@F_ShutDn_37 (300 ms)
@F_ShutDn (300 ms)
CycCo-QB37 (300 ms)
CycCo-OB3ZIF_CYC_CO-OB37
@F_CycCo-OB3ZIF_TEST
@F_CycCo-OB37IF_TESTC
@F_TestMode (300 ms)
@F_IN_37_0 (300 ms)
SFC_109_F (300 ms)
AI_F (300 ms)
HS104_F (300 ms)
@F_OUT_37_0 (300 ms)
@F_DbIniti (300 ms)
0B38 [Cycic interrupta] (10 ms)

# Runtime groups of an F-program

The F-program is divided into several runtime groups, as shown in the table below.

Note

xx = Number of the cyclic interrupt OB

y = Consecutive numbering if several shutdown groups exist in a single cyclic interrupt OB

|Chart|F blocks|
|---|---|
|@F_ShutDn_xx|Shutdown logic of cyclic interrupt OB The shutdown logic is created with RTGLOGIC and standard logic blocks.|
|@F_ShutDn|Shutdown block Where an F-program is present in several cyclic interrupt OBs, this runtime group is integrated into the cyclic interrupt OB with the shortest call time. The shutdown logic is created with F_SHUTDN, RTGLOGIC, and standard logic blocks.|
|@F_CycCo-OBxx|F_CYC_CO, F_TEST and F_TESTC (for tests)|
|@F_TestMode|F_TESTM for managing safety mode|
|@F_IN_xx_y|F blocks which supply input values for the F-program (F_QUITES, communication receive blocks, conversion blocks from standard to F-data types, drivers for F-input modules) Runtime groups with user logic, in the sequence in which they were created by the user|

Compendium Part B - Process Safety (V9.0)
Operating Manual, 04/2018, A5E43228905-AA

# 7.2 Creating the safety program

@F_OUT_xx_y Blocks which further process output values of F-blocks (communication send blocks, conversion blocks from F-to standard data types, drivers for F-output modules, F_PLK, F_PLK_O, and F_DIAG for program sequence control)

@F_DbInitxx DB_INIT function block required for the cold restart of an F-runtime group

All required error OBs are added to the block container in the SIMATIC Manager.

There should only be one @F_IN_xx_y runtime group before the first F-user runtime group and one @F_OUT_xx_y runtime group after the last F-user runtime group. If the safety program consists of several shutdown groups (see section 6.2.6 (Page 87)), there is the @F_IN_xx_y and @F_OUT_xx_y runtime group both before and after the F-user runtime group in the shutdown groups.

# Rules for F-runtime groups in the safety program

- We recommend that you proceed as follows in order to make the lengths of the F-cycles as uniform as possible:
If you mix F-and standard runtime groups in a cyclic interrupt OB, you must execute the F-runtime groups before the standard runtime groups.
- The following defaults are set for properties of an F-runtime group:
- Reduction ratio = 1
- Phase offset = 0
- Properties Runtime Group
- Task: 0B37
- Name: HS104
- Comment:
- Reduction ratio:
- Phase offset:
- Optimize run sequence
- Active:
- You are not permitted to move automatically generated F-runtime groups (identified by @).

Note: The feature: Optimize Run Sequence in CFC can lead to a change in the collective signature and impair the response times of the safety program, and therefore should not be used in F-runtime groups.

With PCS 7 V7.0 SP1 and higher, it is no longer possible to optimize the run sequence for cyclic interrupt OBs with F-runtime groups.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.6 F-shutdown groups

An F-shutdown group is a self-contained unit in your safety program. It contains user logic which is executed or shut down simultaneously. The F-shutdown group contains one or a number of F-runtime groups which are assigned to a common cyclic interrupt OB. You can choose whether an error during execution of the safety program causes a full shutdown or a partial shutdown of the safety program. With a partial shutdown, only the F-shutdown group in which the error occurred is shut down.

# Rules for F-shutdown groups in the safety program

You are not permitted to directly interconnect F-blocks in different F-shutdown groups. Data can only be exchanged between F-shutdown groups using special communication blocks (F_S_xx, F_R_xx for F_BOOL and F_REAL data structures). Therefore, all F-channel drivers in an F-signal module must be in the same F-shutdown group, together with the module driver of the F-signal module.

# Defining F-shutdown groups

As soon as you place F-blocks in the CFC editor for the first time, all of the F-runtime groups in a single cyclic interrupt OB will form an F-shutdown group. You can configure each F-runtime group as the last F-runtime group in an F-shutdown group by placing the F_PSG_M ""selection block"". The F-system then creates a new F-shutdown group for all subsequent F-runtime groups until another F_PSG_M block is found.

# Distribution/Combination by means of manual placing of F_PSG_M

If you add or delete one or a number of F_PSG_M blocks in your project, the order of your F-shutdown groups will change. If you make a change to the layout of your F-shutdown groups, you must make sure that the F-module drivers and all assigned F-channel drivers are integrated in the same F-shutdown group. You can split one F-shutdown group into two F-shutdown groups. To do this, in the CFC editor's runtime editor, place the F_PSG_M block in the last F-runtime group which is to be assigned to the first F-shutdown group. All subsequent F-runtime groups will then be assigned to the second F-shutdown group. The number of F-shutdown groups is limited to 110 in all cyclic interrupt OBs. The system restricts the number of F-runtime groups in an F-shutdown group. You have the option of combining two F-shutdown groups. To do this, in the runtime editor of the CFC editor, delete the F_PSG_M block between the F-shutdown groups. If you combine a number of F-shutdown groups which exchange data via F-communication blocks in a single F-shutdown group, you need to remove these F-communications blocks and replace them with direct interconnections.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# Programming data exchange between F-shutdown groups

If you wish to exchange data between two F-shutdown groups, you are not permitted to interconnect the inputs and outputs directly. You need to use the following F-system blocks for data exchange between F blocks in different F-shutdown groups:

|F block|Description|
|---|---|
|F_S_R/F_R_R|Safe transfer of 5 data of the F_REAL type|
|F_S_BO/F_R_BO|Safe transfer of 5 data of the F_BOOL type|

# Procedure for data exchange

1. In the F-shutdown group from which data is to be transferred, add an F_S_R or F_S_BO type F-block.
2. In the F-shutdown group to which data is to be transferred, add an F_R_R or F_R_BO type F-block.
3. Interconnect the SD_R_xx inputs of the F_S_R or the SD_BO_xx inputs of the F_S_BO with the data to be transferred.
4. Interconnect the RD_R_xx outputs of the F_R_R or the RD_BO_xx outputs of the F_R_BO with the inputs of the F-block for further processing of the data received.
5. Interconnect the S_DB output of the send block with the S_DB input of the associated receive block.
6. Configure the TIMEOUT inputs of the F_R_R and F_R_BO receive blocks with the F-monitoring time calculated.
7. Configure the receive block substitute values for the scenario of a shutdown of the sending shutdown group.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Extract from a chart for shutdown group 1 with send block:

|42617|7ail-|7133 Cor|CHLDEA F|1e-0- Ck_INE|
|---|---|---|---|---|
|JdEO|90_8o_|J0_EO|90_BO|JD_Bo_|
|11_112|J0_EO_07|32_80_08|7193 Coz|CHLDEA|
|Q_EAII|4212 bloel|PaJJ_CX|0_Kod|ubSime|
|4nu|Lou|JG RG|P3c >| |

The connection to shutdown group 2 is established by linking output S_DB of block F_S_BO_1 in shutdown group 1 with input S_DB on block F_R_BO_1 in shutdown group 2.

Extract from a chart for shutdown group 2 with receive block:

|Xbaeha|32430|netr|
|---|---|---|
|314 = doxr|3281p|REC_E?|
|Recei|ER EL|RD_BO_|
|RD_BO_|8088Q_01|RD_EQ|
|RD_E?|302ZD|RD_Lo|

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

89

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.7 Data exchange between the F user program and standard user program

The standard program and the F-program use different data formats. Accordingly, special conversion blocks have to be used for data exchange.

F-CPU
F-program
Conversion blocks
Standard program
Converting F-data types to standard data types

If you need the standard user program to process data from the F-program further (for monitoring on the PCS 7 OS, for example), a block for F_FDatatype_Datatype data conversion will have to be interconnected in the user program so that the F-data types can be converted into standard data types. This converter blocks must be called in the standard user program (standard runtime group).

Extract from a process tag chart; converting the ""QBAD"" signal from F_BOOL to BOOL:

Note

The figure is available in its original size as appendix to the manual in the ZIP download of the checklists.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Standard and F-blocks are in different runtime groups. As shown here, some F-blocks have outputs (depicted in gray), which can be directly interconnected with standard PCS 7 blocks. PCS 7 blocks such as MonAnL, MonDiL, EventMESSAGE and their associated faceplates and process symbols are used to visualize fail-safe analog values and status messages as well as system states and operating states. If parameters cannot be directly further interconnected due to the safety data format, the conversion blocks described above can be used.

# Converting standard data types into F-data types

If data from the standard user program is to be processed further in the F-program, it will need to be converted. The blocks for data conversion from standard data types to F-data types (F_datatype_Fdatatype) can only be used in the F-program (F-runtime group).

Extract from an F-chart, conversion from REAL to F_REAL:

|7_R_FR_CONv|R -B|CE 32|CB39|:RELL|Aulci|
|---|---|---|---|---|---|
|DAII ZROC3?|VALUE DiT| | | | |

Note: The conversion blocks only perform data conversion; in other words, you will need to program additional measures in the F-program for plausibility checking purposes (with F_LIM_R, for example), in order to ensure that only non-hazardous values are possible.

# 7.2.8 How F-blocks with floating-point operations respond to number range overflows

Within the context of analog value processing, number range overflows/underflows can occur during arithmetic calculations (with division by 0, root from a negative number or number range overflow). With S7 F Systems Lib V1_3 and higher, the response is as follows in this case: The results ""Overflow (± infinite)"", ""Denormalized floating-point number"" or ""Invalid floating-point number (NaN)"" are:

- Either output at the output and can be processed further by subsequent F blocks
- Or signaled to special outputs. A substitute value is output if necessary.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

91

# Configuring the safety program

# 7.2 Creating the safety program

If the floating-point operation produces an invalid floating-point number (NaN) and no invalid floating-point number (NaN) existed as an address prior to this, the following diagnostics event will be entered in the F CPU's diagnostic buffer:

""Safety program: Invalid REAL number in DB"" (event ID 16#75D9)

You can use this entry in the diagnostic buffer to identify the F block with the invalid floating-point number (NaN).

If you are not able to prevent these events from occurring in your safety program, you will need to decide, on the basis of your application, whether you wish to respond to them in your safety program.

|AD?|nddie|101.o = 101.0_|10o.0|-10q|CUIL|5035|
|---|---|---|---|---|---|---|
|AD?|indoic|0b37 1.0e+3e|:Addle|0etz|3.0e-3e|10o.0|
| |100.0|3.0e-38| |CUIL|AD_|:itis|
|0837i|LIN_R|08371|#Addic|3402-32|c0m| |
| |ce-JE| |CUII|Sms|AD?|0BJ7i|
|Addue|J1o|~10O|02-J8|~100.0|CuTO|100.0=|
|DIV|LIK_R|:tris|100.0_| |100.-|CutQ|
|0.0|502S|SoRT|HXR|:Squo-|{AJi|hal|
|-10o.05|CVIQ|CUIL|5023_W| | | |

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.3 Configuring fail-safe AS-AS communication

You can use the F_LIM_R F block to check the result of a floating-point operation for overflow (± infinite) and invalid floating-point number (NaN).

- A limit violation is indicated by IN &gt; MAX or ""+ infinite"". ",How can data be exchanged between F-shutdown groups in the safety program according to the 'Compendium Part B - Process Safety (V9.0)'?,A3,Special blocks like F_S_xx and F_R_xx must be used for F_BOOL and F_REAL data transfer between groups.,1.8046875,1.8359375,3.296875,1.5234375,0.34765625
3,pcs7_compendium_part_b_en-US_en-US.txt,37,5dea5c3b1bc7a2a2d3707ace8a7d6e3ed157196366f8ee88ba630fadc3d36b0e,"Changes to the input parameters of F blocks with F data types can be made as follows:

- Offline with the assistance of the CFC editor
- Online using CFC test mode with safety mode deactivated

Note

Values of PAR_ID and COMPLEM must not be changed. If errors in the safety data format are detected during the execution of the safety program, an F-STOP is triggered.

# 7.2.4 Run sequence of F-blocks

# Defining the run sequence

You define the run sequence in the CFC editor in the same way as for a standard user program. Changing the run sequence also changes the collective signature.

# Correct run sequence of F-blocks

The sequence of the F-blocks within the F-shutdown group is relevant. The number of F-runtime groups the F-shutdown group has been split into is of no relevance. Essentially, the correct run sequence of the various F-block types is as follows:

1. Placed automatically:
- F module driver for F-signal modules with inputs or with inputs and outputs
- F-communications blocks and F-system blocks for receiving
- F blocks for data conversion from standard value to F-structure
- F modules with OS connection
2. F channel drivers for inputs
3. F blocks for user logic

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

1. F channel drivers for outputs
2. Placed automatically:
- F block F_PLK
- F block F_PSG_M
- F module driver for F-signal modules with outputs or with inputs and outputs
- F-communications blocks and F-system blocks for sending
- F block F_PLK_O
- F block F_DIAG (S7 F-Systems Lib V1_3 and higher)

The run sequence of the blocks listed under items 1 and 5 is adjusted automatically when the F-program is compiled.
As if S7 F Systems Lib V1_3, separate runtime groups are created for the F blocks listed under points 1 and 5 during the first compilation.
The IPO principle (input, process, output) must always be observed when placing F-channel drivers and F-blocks for user logic.
This ensures that all inputs are read first, the relevant processing steps are performed, and all outputs are then written.
Furthermore, F-runtime groups and F-monitoring blocks that are only visible following compilation are also added automatically.

Note

No changes may be made in the automatically added runtime groups with the exception of the scan cycle monitoring on ""F_CYC_CO"" blocks and the parameter assignment of the ""F_SHUTDN"" block.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.5 F-runtime groups

During the programming of the safety program, F-blocks cannot be inserted directly into tasks (cyclic interrupt OBs). When a new CFC chart is created in PCS 7, the system will automatically generate a runtime group of the same name, into which the F-blocks placed in the corresponding CFC chart can then be inserted. An F-runtime group only becomes an F-runtime group (identified by a yellow folder and ""F"") when F-blocks are called in it.

0B37 [Cyclic interrupt7] (300 ms)
@CPU_RTI@CPU_RT
@F_ShutDn_37 (300 ms)
@F_ShutDn (300 ms)
CycCo-QB37 (300 ms)
CycCo-OB3ZIF_CYC_CO-OB37
@F_CycCo-OB3ZIF_TEST
@F_CycCo-OB37IF_TESTC
@F_TestMode (300 ms)
@F_IN_37_0 (300 ms)
SFC_109_F (300 ms)
AI_F (300 ms)
HS104_F (300 ms)
@F_OUT_37_0 (300 ms)
@F_DbIniti (300 ms)
0B38 [Cycic interrupta] (10 ms)

# Runtime groups of an F-program

The F-program is divided into several runtime groups, as shown in the table below.

Note

xx = Number of the cyclic interrupt OB

y = Consecutive numbering if several shutdown groups exist in a single cyclic interrupt OB

|Chart|F blocks|
|---|---|
|@F_ShutDn_xx|Shutdown logic of cyclic interrupt OB The shutdown logic is created with RTGLOGIC and standard logic blocks.|
|@F_ShutDn|Shutdown block Where an F-program is present in several cyclic interrupt OBs, this runtime group is integrated into the cyclic interrupt OB with the shortest call time. The shutdown logic is created with F_SHUTDN, RTGLOGIC, and standard logic blocks.|
|@F_CycCo-OBxx|F_CYC_CO, F_TEST and F_TESTC (for tests)|
|@F_TestMode|F_TESTM for managing safety mode|
|@F_IN_xx_y|F blocks which supply input values for the F-program (F_QUITES, communication receive blocks, conversion blocks from standard to F-data types, drivers for F-input modules) Runtime groups with user logic, in the sequence in which they were created by the user|

Compendium Part B - Process Safety (V9.0)
Operating Manual, 04/2018, A5E43228905-AA

# 7.2 Creating the safety program

@F_OUT_xx_y Blocks which further process output values of F-blocks (communication send blocks, conversion blocks from F-to standard data types, drivers for F-output modules, F_PLK, F_PLK_O, and F_DIAG for program sequence control)

@F_DbInitxx DB_INIT function block required for the cold restart of an F-runtime group

All required error OBs are added to the block container in the SIMATIC Manager.

There should only be one @F_IN_xx_y runtime group before the first F-user runtime group and one @F_OUT_xx_y runtime group after the last F-user runtime group. If the safety program consists of several shutdown groups (see section 6.2.6 (Page 87)), there is the @F_IN_xx_y and @F_OUT_xx_y runtime group both before and after the F-user runtime group in the shutdown groups.

# Rules for F-runtime groups in the safety program

- We recommend that you proceed as follows in order to make the lengths of the F-cycles as uniform as possible:
If you mix F-and standard runtime groups in a cyclic interrupt OB, you must execute the F-runtime groups before the standard runtime groups.
- The following defaults are set for properties of an F-runtime group:
- Reduction ratio = 1
- Phase offset = 0
- Properties Runtime Group
- Task: 0B37
- Name: HS104
- Comment:
- Reduction ratio:
- Phase offset:
- Optimize run sequence
- Active:
- You are not permitted to move automatically generated F-runtime groups (identified by @).

Note: The feature: Optimize Run Sequence in CFC can lead to a change in the collective signature and impair the response times of the safety program, and therefore should not be used in F-runtime groups.

With PCS 7 V7.0 SP1 and higher, it is no longer possible to optimize the run sequence for cyclic interrupt OBs with F-runtime groups.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.6 F-shutdown groups

An F-shutdown group is a self-contained unit in your safety program. It contains user logic which is executed or shut down simultaneously. The F-shutdown group contains one or a number of F-runtime groups which are assigned to a common cyclic interrupt OB. You can choose whether an error during execution of the safety program causes a full shutdown or a partial shutdown of the safety program. With a partial shutdown, only the F-shutdown group in which the error occurred is shut down.

# Rules for F-shutdown groups in the safety program

You are not permitted to directly interconnect F-blocks in different F-shutdown groups. Data can only be exchanged between F-shutdown groups using special communication blocks (F_S_xx, F_R_xx for F_BOOL and F_REAL data structures). Therefore, all F-channel drivers in an F-signal module must be in the same F-shutdown group, together with the module driver of the F-signal module.

# Defining F-shutdown groups

As soon as you place F-blocks in the CFC editor for the first time, all of the F-runtime groups in a single cyclic interrupt OB will form an F-shutdown group. You can configure each F-runtime group as the last F-runtime group in an F-shutdown group by placing the F_PSG_M ""selection block"". The F-system then creates a new F-shutdown group for all subsequent F-runtime groups until another F_PSG_M block is found.

# Distribution/Combination by means of manual placing of F_PSG_M

If you add or delete one or a number of F_PSG_M blocks in your project, the order of your F-shutdown groups will change. If you make a change to the layout of your F-shutdown groups, you must make sure that the F-module drivers and all assigned F-channel drivers are integrated in the same F-shutdown group. You can split one F-shutdown group into two F-shutdown groups. To do this, in the CFC editor's runtime editor, place the F_PSG_M block in the last F-runtime group which is to be assigned to the first F-shutdown group. All subsequent F-runtime groups will then be assigned to the second F-shutdown group. The number of F-shutdown groups is limited to 110 in all cyclic interrupt OBs. The system restricts the number of F-runtime groups in an F-shutdown group. You have the option of combining two F-shutdown groups. To do this, in the runtime editor of the CFC editor, delete the F_PSG_M block between the F-shutdown groups. If you combine a number of F-shutdown groups which exchange data via F-communication blocks in a single F-shutdown group, you need to remove these F-communications blocks and replace them with direct interconnections.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# Programming data exchange between F-shutdown groups

If you wish to exchange data between two F-shutdown groups, you are not permitted to interconnect the inputs and outputs directly. You need to use the following F-system blocks for data exchange between F blocks in different F-shutdown groups:

|F block|Description|
|---|---|
|F_S_R/F_R_R|Safe transfer of 5 data of the F_REAL type|
|F_S_BO/F_R_BO|Safe transfer of 5 data of the F_BOOL type|

# Procedure for data exchange

1. In the F-shutdown group from which data is to be transferred, add an F_S_R or F_S_BO type F-block.
2. In the F-shutdown group to which data is to be transferred, add an F_R_R or F_R_BO type F-block.
3. Interconnect the SD_R_xx inputs of the F_S_R or the SD_BO_xx inputs of the F_S_BO with the data to be transferred.
4. Interconnect the RD_R_xx outputs of the F_R_R or the RD_BO_xx outputs of the F_R_BO with the inputs of the F-block for further processing of the data received.
5. Interconnect the S_DB output of the send block with the S_DB input of the associated receive block.
6. Configure the TIMEOUT inputs of the F_R_R and F_R_BO receive blocks with the F-monitoring time calculated.
7. Configure the receive block substitute values for the scenario of a shutdown of the sending shutdown group.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Extract from a chart for shutdown group 1 with send block:

|42617|7ail-|7133 Cor|CHLDEA F|1e-0- Ck_INE|
|---|---|---|---|---|
|JdEO|90_8o_|J0_EO|90_BO|JD_Bo_|
|11_112|J0_EO_07|32_80_08|7193 Coz|CHLDEA|
|Q_EAII|4212 bloel|PaJJ_CX|0_Kod|ubSime|
|4nu|Lou|JG RG|P3c >| |

The connection to shutdown group 2 is established by linking output S_DB of block F_S_BO_1 in shutdown group 1 with input S_DB on block F_R_BO_1 in shutdown group 2.

Extract from a chart for shutdown group 2 with receive block:

|Xbaeha|32430|netr|
|---|---|---|
|314 = doxr|3281p|REC_E?|
|Recei|ER EL|RD_BO_|
|RD_BO_|8088Q_01|RD_EQ|
|RD_E?|302ZD|RD_Lo|

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

89

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.7 Data exchange between the F user program and standard user program

The standard program and the F-program use different data formats. Accordingly, special conversion blocks have to be used for data exchange.

F-CPU
F-program
Conversion blocks
Standard program
Converting F-data types to standard data types

If you need the standard user program to process data from the F-program further (for monitoring on the PCS 7 OS, for example), a block for F_FDatatype_Datatype data conversion will have to be interconnected in the user program so that the F-data types can be converted into standard data types. This converter blocks must be called in the standard user program (standard runtime group).

Extract from a process tag chart; converting the ""QBAD"" signal from F_BOOL to BOOL:

Note

The figure is available in its original size as appendix to the manual in the ZIP download of the checklists.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Standard and F-blocks are in different runtime groups. As shown here, some F-blocks have outputs (depicted in gray), which can be directly interconnected with standard PCS 7 blocks. PCS 7 blocks such as MonAnL, MonDiL, EventMESSAGE and their associated faceplates and process symbols are used to visualize fail-safe analog values and status messages as well as system states and operating states. If parameters cannot be directly further interconnected due to the safety data format, the conversion blocks described above can be used.

# Converting standard data types into F-data types

If data from the standard user program is to be processed further in the F-program, it will need to be converted. The blocks for data conversion from standard data types to F-data types (F_datatype_Fdatatype) can only be used in the F-program (F-runtime group).

Extract from an F-chart, conversion from REAL to F_REAL:

|7_R_FR_CONv|R -B|CE 32|CB39|:RELL|Aulci|
|---|---|---|---|---|---|
|DAII ZROC3?|VALUE DiT| | | | |

Note: The conversion blocks only perform data conversion; in other words, you will need to program additional measures in the F-program for plausibility checking purposes (with F_LIM_R, for example), in order to ensure that only non-hazardous values are possible.

# 7.2.8 How F-blocks with floating-point operations respond to number range overflows

Within the context of analog value processing, number range overflows/underflows can occur during arithmetic calculations (with division by 0, root from a negative number or number range overflow). With S7 F Systems Lib V1_3 and higher, the response is as follows in this case: The results ""Overflow (± infinite)"", ""Denormalized floating-point number"" or ""Invalid floating-point number (NaN)"" are:

- Either output at the output and can be processed further by subsequent F blocks
- Or signaled to special outputs. A substitute value is output if necessary.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

91

# Configuring the safety program

# 7.2 Creating the safety program

If the floating-point operation produces an invalid floating-point number (NaN) and no invalid floating-point number (NaN) existed as an address prior to this, the following diagnostics event will be entered in the F CPU's diagnostic buffer:

""Safety program: Invalid REAL number in DB"" (event ID 16#75D9)

You can use this entry in the diagnostic buffer to identify the F block with the invalid floating-point number (NaN).

If you are not able to prevent these events from occurring in your safety program, you will need to decide, on the basis of your application, whether you wish to respond to them in your safety program.

|AD?|nddie|101.o = 101.0_|10o.0|-10q|CUIL|5035|
|---|---|---|---|---|---|---|
|AD?|indoic|0b37 1.0e+3e|:Addle|0etz|3.0e-3e|10o.0|
| |100.0|3.0e-38| |CUIL|AD_|:itis|
|0837i|LIN_R|08371|#Addic|3402-32|c0m| |
| |ce-JE| |CUII|Sms|AD?|0BJ7i|
|Addue|J1o|~10O|02-J8|~100.0|CuTO|100.0=|
|DIV|LIK_R|:tris|100.0_| |100.-|CutQ|
|0.0|502S|SoRT|HXR|:Squo-|{AJi|hal|
|-10o.05|CVIQ|CUIL|5023_W| | | |

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.3 Configuring fail-safe AS-AS communication

You can use the F_LIM_R F block to check the result of a floating-point operation for overflow (± infinite) and invalid floating-point number (NaN).

- A limit violation is indicated by IN &gt; MAX or ""+ infinite"". ",How can data be exchanged between F-shutdown groups in the safety program according to the 'Compendium Part B - Process Safety (V9.0)'?,A4,"Exchange is facilitated by designated communication blocks for F_BOOL and F_REAL, avoiding direct connections.",1.9375,1.96875,3.515625,1.4375,0.3203125
4,pcs7_compendium_part_b_en-US_en-US.txt,37,5dea5c3b1bc7a2a2d3707ace8a7d6e3ed157196366f8ee88ba630fadc3d36b0e,"Changes to the input parameters of F blocks with F data types can be made as follows:

- Offline with the assistance of the CFC editor
- Online using CFC test mode with safety mode deactivated

Note

Values of PAR_ID and COMPLEM must not be changed. If errors in the safety data format are detected during the execution of the safety program, an F-STOP is triggered.

# 7.2.4 Run sequence of F-blocks

# Defining the run sequence

You define the run sequence in the CFC editor in the same way as for a standard user program. Changing the run sequence also changes the collective signature.

# Correct run sequence of F-blocks

The sequence of the F-blocks within the F-shutdown group is relevant. The number of F-runtime groups the F-shutdown group has been split into is of no relevance. Essentially, the correct run sequence of the various F-block types is as follows:

1. Placed automatically:
- F module driver for F-signal modules with inputs or with inputs and outputs
- F-communications blocks and F-system blocks for receiving
- F blocks for data conversion from standard value to F-structure
- F modules with OS connection
2. F channel drivers for inputs
3. F blocks for user logic

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

1. F channel drivers for outputs
2. Placed automatically:
- F block F_PLK
- F block F_PSG_M
- F module driver for F-signal modules with outputs or with inputs and outputs
- F-communications blocks and F-system blocks for sending
- F block F_PLK_O
- F block F_DIAG (S7 F-Systems Lib V1_3 and higher)

The run sequence of the blocks listed under items 1 and 5 is adjusted automatically when the F-program is compiled.
As if S7 F Systems Lib V1_3, separate runtime groups are created for the F blocks listed under points 1 and 5 during the first compilation.
The IPO principle (input, process, output) must always be observed when placing F-channel drivers and F-blocks for user logic.
This ensures that all inputs are read first, the relevant processing steps are performed, and all outputs are then written.
Furthermore, F-runtime groups and F-monitoring blocks that are only visible following compilation are also added automatically.

Note

No changes may be made in the automatically added runtime groups with the exception of the scan cycle monitoring on ""F_CYC_CO"" blocks and the parameter assignment of the ""F_SHUTDN"" block.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.5 F-runtime groups

During the programming of the safety program, F-blocks cannot be inserted directly into tasks (cyclic interrupt OBs). When a new CFC chart is created in PCS 7, the system will automatically generate a runtime group of the same name, into which the F-blocks placed in the corresponding CFC chart can then be inserted. An F-runtime group only becomes an F-runtime group (identified by a yellow folder and ""F"") when F-blocks are called in it.

0B37 [Cyclic interrupt7] (300 ms)
@CPU_RTI@CPU_RT
@F_ShutDn_37 (300 ms)
@F_ShutDn (300 ms)
CycCo-QB37 (300 ms)
CycCo-OB3ZIF_CYC_CO-OB37
@F_CycCo-OB3ZIF_TEST
@F_CycCo-OB37IF_TESTC
@F_TestMode (300 ms)
@F_IN_37_0 (300 ms)
SFC_109_F (300 ms)
AI_F (300 ms)
HS104_F (300 ms)
@F_OUT_37_0 (300 ms)
@F_DbIniti (300 ms)
0B38 [Cycic interrupta] (10 ms)

# Runtime groups of an F-program

The F-program is divided into several runtime groups, as shown in the table below.

Note

xx = Number of the cyclic interrupt OB

y = Consecutive numbering if several shutdown groups exist in a single cyclic interrupt OB

|Chart|F blocks|
|---|---|
|@F_ShutDn_xx|Shutdown logic of cyclic interrupt OB The shutdown logic is created with RTGLOGIC and standard logic blocks.|
|@F_ShutDn|Shutdown block Where an F-program is present in several cyclic interrupt OBs, this runtime group is integrated into the cyclic interrupt OB with the shortest call time. The shutdown logic is created with F_SHUTDN, RTGLOGIC, and standard logic blocks.|
|@F_CycCo-OBxx|F_CYC_CO, F_TEST and F_TESTC (for tests)|
|@F_TestMode|F_TESTM for managing safety mode|
|@F_IN_xx_y|F blocks which supply input values for the F-program (F_QUITES, communication receive blocks, conversion blocks from standard to F-data types, drivers for F-input modules) Runtime groups with user logic, in the sequence in which they were created by the user|

Compendium Part B - Process Safety (V9.0)
Operating Manual, 04/2018, A5E43228905-AA

# 7.2 Creating the safety program

@F_OUT_xx_y Blocks which further process output values of F-blocks (communication send blocks, conversion blocks from F-to standard data types, drivers for F-output modules, F_PLK, F_PLK_O, and F_DIAG for program sequence control)

@F_DbInitxx DB_INIT function block required for the cold restart of an F-runtime group

All required error OBs are added to the block container in the SIMATIC Manager.

There should only be one @F_IN_xx_y runtime group before the first F-user runtime group and one @F_OUT_xx_y runtime group after the last F-user runtime group. If the safety program consists of several shutdown groups (see section 6.2.6 (Page 87)), there is the @F_IN_xx_y and @F_OUT_xx_y runtime group both before and after the F-user runtime group in the shutdown groups.

# Rules for F-runtime groups in the safety program

- We recommend that you proceed as follows in order to make the lengths of the F-cycles as uniform as possible:
If you mix F-and standard runtime groups in a cyclic interrupt OB, you must execute the F-runtime groups before the standard runtime groups.
- The following defaults are set for properties of an F-runtime group:
- Reduction ratio = 1
- Phase offset = 0
- Properties Runtime Group
- Task: 0B37
- Name: HS104
- Comment:
- Reduction ratio:
- Phase offset:
- Optimize run sequence
- Active:
- You are not permitted to move automatically generated F-runtime groups (identified by @).

Note: The feature: Optimize Run Sequence in CFC can lead to a change in the collective signature and impair the response times of the safety program, and therefore should not be used in F-runtime groups.

With PCS 7 V7.0 SP1 and higher, it is no longer possible to optimize the run sequence for cyclic interrupt OBs with F-runtime groups.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.6 F-shutdown groups

An F-shutdown group is a self-contained unit in your safety program. It contains user logic which is executed or shut down simultaneously. The F-shutdown group contains one or a number of F-runtime groups which are assigned to a common cyclic interrupt OB. You can choose whether an error during execution of the safety program causes a full shutdown or a partial shutdown of the safety program. With a partial shutdown, only the F-shutdown group in which the error occurred is shut down.

# Rules for F-shutdown groups in the safety program

You are not permitted to directly interconnect F-blocks in different F-shutdown groups. Data can only be exchanged between F-shutdown groups using special communication blocks (F_S_xx, F_R_xx for F_BOOL and F_REAL data structures). Therefore, all F-channel drivers in an F-signal module must be in the same F-shutdown group, together with the module driver of the F-signal module.

# Defining F-shutdown groups

As soon as you place F-blocks in the CFC editor for the first time, all of the F-runtime groups in a single cyclic interrupt OB will form an F-shutdown group. You can configure each F-runtime group as the last F-runtime group in an F-shutdown group by placing the F_PSG_M ""selection block"". The F-system then creates a new F-shutdown group for all subsequent F-runtime groups until another F_PSG_M block is found.

# Distribution/Combination by means of manual placing of F_PSG_M

If you add or delete one or a number of F_PSG_M blocks in your project, the order of your F-shutdown groups will change. If you make a change to the layout of your F-shutdown groups, you must make sure that the F-module drivers and all assigned F-channel drivers are integrated in the same F-shutdown group. You can split one F-shutdown group into two F-shutdown groups. To do this, in the CFC editor's runtime editor, place the F_PSG_M block in the last F-runtime group which is to be assigned to the first F-shutdown group. All subsequent F-runtime groups will then be assigned to the second F-shutdown group. The number of F-shutdown groups is limited to 110 in all cyclic interrupt OBs. The system restricts the number of F-runtime groups in an F-shutdown group. You have the option of combining two F-shutdown groups. To do this, in the runtime editor of the CFC editor, delete the F_PSG_M block between the F-shutdown groups. If you combine a number of F-shutdown groups which exchange data via F-communication blocks in a single F-shutdown group, you need to remove these F-communications blocks and replace them with direct interconnections.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# Programming data exchange between F-shutdown groups

If you wish to exchange data between two F-shutdown groups, you are not permitted to interconnect the inputs and outputs directly. You need to use the following F-system blocks for data exchange between F blocks in different F-shutdown groups:

|F block|Description|
|---|---|
|F_S_R/F_R_R|Safe transfer of 5 data of the F_REAL type|
|F_S_BO/F_R_BO|Safe transfer of 5 data of the F_BOOL type|

# Procedure for data exchange

1. In the F-shutdown group from which data is to be transferred, add an F_S_R or F_S_BO type F-block.
2. In the F-shutdown group to which data is to be transferred, add an F_R_R or F_R_BO type F-block.
3. Interconnect the SD_R_xx inputs of the F_S_R or the SD_BO_xx inputs of the F_S_BO with the data to be transferred.
4. Interconnect the RD_R_xx outputs of the F_R_R or the RD_BO_xx outputs of the F_R_BO with the inputs of the F-block for further processing of the data received.
5. Interconnect the S_DB output of the send block with the S_DB input of the associated receive block.
6. Configure the TIMEOUT inputs of the F_R_R and F_R_BO receive blocks with the F-monitoring time calculated.
7. Configure the receive block substitute values for the scenario of a shutdown of the sending shutdown group.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Extract from a chart for shutdown group 1 with send block:

|42617|7ail-|7133 Cor|CHLDEA F|1e-0- Ck_INE|
|---|---|---|---|---|
|JdEO|90_8o_|J0_EO|90_BO|JD_Bo_|
|11_112|J0_EO_07|32_80_08|7193 Coz|CHLDEA|
|Q_EAII|4212 bloel|PaJJ_CX|0_Kod|ubSime|
|4nu|Lou|JG RG|P3c >| |

The connection to shutdown group 2 is established by linking output S_DB of block F_S_BO_1 in shutdown group 1 with input S_DB on block F_R_BO_1 in shutdown group 2.

Extract from a chart for shutdown group 2 with receive block:

|Xbaeha|32430|netr|
|---|---|---|
|314 = doxr|3281p|REC_E?|
|Recei|ER EL|RD_BO_|
|RD_BO_|8088Q_01|RD_EQ|
|RD_E?|302ZD|RD_Lo|

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

89

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.7 Data exchange between the F user program and standard user program

The standard program and the F-program use different data formats. Accordingly, special conversion blocks have to be used for data exchange.

F-CPU
F-program
Conversion blocks
Standard program
Converting F-data types to standard data types

If you need the standard user program to process data from the F-program further (for monitoring on the PCS 7 OS, for example), a block for F_FDatatype_Datatype data conversion will have to be interconnected in the user program so that the F-data types can be converted into standard data types. This converter blocks must be called in the standard user program (standard runtime group).

Extract from a process tag chart; converting the ""QBAD"" signal from F_BOOL to BOOL:

Note

The figure is available in its original size as appendix to the manual in the ZIP download of the checklists.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Standard and F-blocks are in different runtime groups. As shown here, some F-blocks have outputs (depicted in gray), which can be directly interconnected with standard PCS 7 blocks. PCS 7 blocks such as MonAnL, MonDiL, EventMESSAGE and their associated faceplates and process symbols are used to visualize fail-safe analog values and status messages as well as system states and operating states. If parameters cannot be directly further interconnected due to the safety data format, the conversion blocks described above can be used.

# Converting standard data types into F-data types

If data from the standard user program is to be processed further in the F-program, it will need to be converted. The blocks for data conversion from standard data types to F-data types (F_datatype_Fdatatype) can only be used in the F-program (F-runtime group).

Extract from an F-chart, conversion from REAL to F_REAL:

|7_R_FR_CONv|R -B|CE 32|CB39|:RELL|Aulci|
|---|---|---|---|---|---|
|DAII ZROC3?|VALUE DiT| | | | |

Note: The conversion blocks only perform data conversion; in other words, you will need to program additional measures in the F-program for plausibility checking purposes (with F_LIM_R, for example), in order to ensure that only non-hazardous values are possible.

# 7.2.8 How F-blocks with floating-point operations respond to number range overflows

Within the context of analog value processing, number range overflows/underflows can occur during arithmetic calculations (with division by 0, root from a negative number or number range overflow). With S7 F Systems Lib V1_3 and higher, the response is as follows in this case: The results ""Overflow (± infinite)"", ""Denormalized floating-point number"" or ""Invalid floating-point number (NaN)"" are:

- Either output at the output and can be processed further by subsequent F blocks
- Or signaled to special outputs. A substitute value is output if necessary.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

91

# Configuring the safety program

# 7.2 Creating the safety program

If the floating-point operation produces an invalid floating-point number (NaN) and no invalid floating-point number (NaN) existed as an address prior to this, the following diagnostics event will be entered in the F CPU's diagnostic buffer:

""Safety program: Invalid REAL number in DB"" (event ID 16#75D9)

You can use this entry in the diagnostic buffer to identify the F block with the invalid floating-point number (NaN).

If you are not able to prevent these events from occurring in your safety program, you will need to decide, on the basis of your application, whether you wish to respond to them in your safety program.

|AD?|nddie|101.o = 101.0_|10o.0|-10q|CUIL|5035|
|---|---|---|---|---|---|---|
|AD?|indoic|0b37 1.0e+3e|:Addle|0etz|3.0e-3e|10o.0|
| |100.0|3.0e-38| |CUIL|AD_|:itis|
|0837i|LIN_R|08371|#Addic|3402-32|c0m| |
| |ce-JE| |CUII|Sms|AD?|0BJ7i|
|Addue|J1o|~10O|02-J8|~100.0|CuTO|100.0=|
|DIV|LIK_R|:tris|100.0_| |100.-|CutQ|
|0.0|502S|SoRT|HXR|:Squo-|{AJi|hal|
|-10o.05|CVIQ|CUIL|5023_W| | | |

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.3 Configuring fail-safe AS-AS communication

You can use the F_LIM_R F block to check the result of a floating-point operation for overflow (± infinite) and invalid floating-point number (NaN).

- A limit violation is indicated by IN &gt; MAX or ""+ infinite"". ",How can data be exchanged between F-shutdown groups in the safety program according to the 'Compendium Part B - Process Safety (V9.0)'?,A5,The manual specifies the use of particular communication blocks for safe data transfer between F-shutdown groups.,1.1484375,1.2890625,3.21875,1.375,0.1298828125
5,pcs7_compendium_part_b_en-US_en-US.txt,37,5dea5c3b1bc7a2a2d3707ace8a7d6e3ed157196366f8ee88ba630fadc3d36b0e,"Changes to the input parameters of F blocks with F data types can be made as follows:

- Offline with the assistance of the CFC editor
- Online using CFC test mode with safety mode deactivated

Note

Values of PAR_ID and COMPLEM must not be changed. If errors in the safety data format are detected during the execution of the safety program, an F-STOP is triggered.

# 7.2.4 Run sequence of F-blocks

# Defining the run sequence

You define the run sequence in the CFC editor in the same way as for a standard user program. Changing the run sequence also changes the collective signature.

# Correct run sequence of F-blocks

The sequence of the F-blocks within the F-shutdown group is relevant. The number of F-runtime groups the F-shutdown group has been split into is of no relevance. Essentially, the correct run sequence of the various F-block types is as follows:

1. Placed automatically:
- F module driver for F-signal modules with inputs or with inputs and outputs
- F-communications blocks and F-system blocks for receiving
- F blocks for data conversion from standard value to F-structure
- F modules with OS connection
2. F channel drivers for inputs
3. F blocks for user logic

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

1. F channel drivers for outputs
2. Placed automatically:
- F block F_PLK
- F block F_PSG_M
- F module driver for F-signal modules with outputs or with inputs and outputs
- F-communications blocks and F-system blocks for sending
- F block F_PLK_O
- F block F_DIAG (S7 F-Systems Lib V1_3 and higher)

The run sequence of the blocks listed under items 1 and 5 is adjusted automatically when the F-program is compiled.
As if S7 F Systems Lib V1_3, separate runtime groups are created for the F blocks listed under points 1 and 5 during the first compilation.
The IPO principle (input, process, output) must always be observed when placing F-channel drivers and F-blocks for user logic.
This ensures that all inputs are read first, the relevant processing steps are performed, and all outputs are then written.
Furthermore, F-runtime groups and F-monitoring blocks that are only visible following compilation are also added automatically.

Note

No changes may be made in the automatically added runtime groups with the exception of the scan cycle monitoring on ""F_CYC_CO"" blocks and the parameter assignment of the ""F_SHUTDN"" block.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.5 F-runtime groups

During the programming of the safety program, F-blocks cannot be inserted directly into tasks (cyclic interrupt OBs). When a new CFC chart is created in PCS 7, the system will automatically generate a runtime group of the same name, into which the F-blocks placed in the corresponding CFC chart can then be inserted. An F-runtime group only becomes an F-runtime group (identified by a yellow folder and ""F"") when F-blocks are called in it.

0B37 [Cyclic interrupt7] (300 ms)
@CPU_RTI@CPU_RT
@F_ShutDn_37 (300 ms)
@F_ShutDn (300 ms)
CycCo-QB37 (300 ms)
CycCo-OB3ZIF_CYC_CO-OB37
@F_CycCo-OB3ZIF_TEST
@F_CycCo-OB37IF_TESTC
@F_TestMode (300 ms)
@F_IN_37_0 (300 ms)
SFC_109_F (300 ms)
AI_F (300 ms)
HS104_F (300 ms)
@F_OUT_37_0 (300 ms)
@F_DbIniti (300 ms)
0B38 [Cycic interrupta] (10 ms)

# Runtime groups of an F-program

The F-program is divided into several runtime groups, as shown in the table below.

Note

xx = Number of the cyclic interrupt OB

y = Consecutive numbering if several shutdown groups exist in a single cyclic interrupt OB

|Chart|F blocks|
|---|---|
|@F_ShutDn_xx|Shutdown logic of cyclic interrupt OB The shutdown logic is created with RTGLOGIC and standard logic blocks.|
|@F_ShutDn|Shutdown block Where an F-program is present in several cyclic interrupt OBs, this runtime group is integrated into the cyclic interrupt OB with the shortest call time. The shutdown logic is created with F_SHUTDN, RTGLOGIC, and standard logic blocks.|
|@F_CycCo-OBxx|F_CYC_CO, F_TEST and F_TESTC (for tests)|
|@F_TestMode|F_TESTM for managing safety mode|
|@F_IN_xx_y|F blocks which supply input values for the F-program (F_QUITES, communication receive blocks, conversion blocks from standard to F-data types, drivers for F-input modules) Runtime groups with user logic, in the sequence in which they were created by the user|

Compendium Part B - Process Safety (V9.0)
Operating Manual, 04/2018, A5E43228905-AA

# 7.2 Creating the safety program

@F_OUT_xx_y Blocks which further process output values of F-blocks (communication send blocks, conversion blocks from F-to standard data types, drivers for F-output modules, F_PLK, F_PLK_O, and F_DIAG for program sequence control)

@F_DbInitxx DB_INIT function block required for the cold restart of an F-runtime group

All required error OBs are added to the block container in the SIMATIC Manager.

There should only be one @F_IN_xx_y runtime group before the first F-user runtime group and one @F_OUT_xx_y runtime group after the last F-user runtime group. If the safety program consists of several shutdown groups (see section 6.2.6 (Page 87)), there is the @F_IN_xx_y and @F_OUT_xx_y runtime group both before and after the F-user runtime group in the shutdown groups.

# Rules for F-runtime groups in the safety program

- We recommend that you proceed as follows in order to make the lengths of the F-cycles as uniform as possible:
If you mix F-and standard runtime groups in a cyclic interrupt OB, you must execute the F-runtime groups before the standard runtime groups.
- The following defaults are set for properties of an F-runtime group:
- Reduction ratio = 1
- Phase offset = 0
- Properties Runtime Group
- Task: 0B37
- Name: HS104
- Comment:
- Reduction ratio:
- Phase offset:
- Optimize run sequence
- Active:
- You are not permitted to move automatically generated F-runtime groups (identified by @).

Note: The feature: Optimize Run Sequence in CFC can lead to a change in the collective signature and impair the response times of the safety program, and therefore should not be used in F-runtime groups.

With PCS 7 V7.0 SP1 and higher, it is no longer possible to optimize the run sequence for cyclic interrupt OBs with F-runtime groups.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.6 F-shutdown groups

An F-shutdown group is a self-contained unit in your safety program. It contains user logic which is executed or shut down simultaneously. The F-shutdown group contains one or a number of F-runtime groups which are assigned to a common cyclic interrupt OB. You can choose whether an error during execution of the safety program causes a full shutdown or a partial shutdown of the safety program. With a partial shutdown, only the F-shutdown group in which the error occurred is shut down.

# Rules for F-shutdown groups in the safety program

You are not permitted to directly interconnect F-blocks in different F-shutdown groups. Data can only be exchanged between F-shutdown groups using special communication blocks (F_S_xx, F_R_xx for F_BOOL and F_REAL data structures). Therefore, all F-channel drivers in an F-signal module must be in the same F-shutdown group, together with the module driver of the F-signal module.

# Defining F-shutdown groups

As soon as you place F-blocks in the CFC editor for the first time, all of the F-runtime groups in a single cyclic interrupt OB will form an F-shutdown group. You can configure each F-runtime group as the last F-runtime group in an F-shutdown group by placing the F_PSG_M ""selection block"". The F-system then creates a new F-shutdown group for all subsequent F-runtime groups until another F_PSG_M block is found.

# Distribution/Combination by means of manual placing of F_PSG_M

If you add or delete one or a number of F_PSG_M blocks in your project, the order of your F-shutdown groups will change. If you make a change to the layout of your F-shutdown groups, you must make sure that the F-module drivers and all assigned F-channel drivers are integrated in the same F-shutdown group. You can split one F-shutdown group into two F-shutdown groups. To do this, in the CFC editor's runtime editor, place the F_PSG_M block in the last F-runtime group which is to be assigned to the first F-shutdown group. All subsequent F-runtime groups will then be assigned to the second F-shutdown group. The number of F-shutdown groups is limited to 110 in all cyclic interrupt OBs. The system restricts the number of F-runtime groups in an F-shutdown group. You have the option of combining two F-shutdown groups. To do this, in the runtime editor of the CFC editor, delete the F_PSG_M block between the F-shutdown groups. If you combine a number of F-shutdown groups which exchange data via F-communication blocks in a single F-shutdown group, you need to remove these F-communications blocks and replace them with direct interconnections.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# Programming data exchange between F-shutdown groups

If you wish to exchange data between two F-shutdown groups, you are not permitted to interconnect the inputs and outputs directly. You need to use the following F-system blocks for data exchange between F blocks in different F-shutdown groups:

|F block|Description|
|---|---|
|F_S_R/F_R_R|Safe transfer of 5 data of the F_REAL type|
|F_S_BO/F_R_BO|Safe transfer of 5 data of the F_BOOL type|

# Procedure for data exchange

1. In the F-shutdown group from which data is to be transferred, add an F_S_R or F_S_BO type F-block.
2. In the F-shutdown group to which data is to be transferred, add an F_R_R or F_R_BO type F-block.
3. Interconnect the SD_R_xx inputs of the F_S_R or the SD_BO_xx inputs of the F_S_BO with the data to be transferred.
4. Interconnect the RD_R_xx outputs of the F_R_R or the RD_BO_xx outputs of the F_R_BO with the inputs of the F-block for further processing of the data received.
5. Interconnect the S_DB output of the send block with the S_DB input of the associated receive block.
6. Configure the TIMEOUT inputs of the F_R_R and F_R_BO receive blocks with the F-monitoring time calculated.
7. Configure the receive block substitute values for the scenario of a shutdown of the sending shutdown group.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Extract from a chart for shutdown group 1 with send block:

|42617|7ail-|7133 Cor|CHLDEA F|1e-0- Ck_INE|
|---|---|---|---|---|
|JdEO|90_8o_|J0_EO|90_BO|JD_Bo_|
|11_112|J0_EO_07|32_80_08|7193 Coz|CHLDEA|
|Q_EAII|4212 bloel|PaJJ_CX|0_Kod|ubSime|
|4nu|Lou|JG RG|P3c >| |

The connection to shutdown group 2 is established by linking output S_DB of block F_S_BO_1 in shutdown group 1 with input S_DB on block F_R_BO_1 in shutdown group 2.

Extract from a chart for shutdown group 2 with receive block:

|Xbaeha|32430|netr|
|---|---|---|
|314 = doxr|3281p|REC_E?|
|Recei|ER EL|RD_BO_|
|RD_BO_|8088Q_01|RD_EQ|
|RD_E?|302ZD|RD_Lo|

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

89

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.7 Data exchange between the F user program and standard user program

The standard program and the F-program use different data formats. Accordingly, special conversion blocks have to be used for data exchange.

F-CPU
F-program
Conversion blocks
Standard program
Converting F-data types to standard data types

If you need the standard user program to process data from the F-program further (for monitoring on the PCS 7 OS, for example), a block for F_FDatatype_Datatype data conversion will have to be interconnected in the user program so that the F-data types can be converted into standard data types. This converter blocks must be called in the standard user program (standard runtime group).

Extract from a process tag chart; converting the ""QBAD"" signal from F_BOOL to BOOL:

Note

The figure is available in its original size as appendix to the manual in the ZIP download of the checklists.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Standard and F-blocks are in different runtime groups. As shown here, some F-blocks have outputs (depicted in gray), which can be directly interconnected with standard PCS 7 blocks. PCS 7 blocks such as MonAnL, MonDiL, EventMESSAGE and their associated faceplates and process symbols are used to visualize fail-safe analog values and status messages as well as system states and operating states. If parameters cannot be directly further interconnected due to the safety data format, the conversion blocks described above can be used.

# Converting standard data types into F-data types

If data from the standard user program is to be processed further in the F-program, it will need to be converted. The blocks for data conversion from standard data types to F-data types (F_datatype_Fdatatype) can only be used in the F-program (F-runtime group).

Extract from an F-chart, conversion from REAL to F_REAL:

|7_R_FR_CONv|R -B|CE 32|CB39|:RELL|Aulci|
|---|---|---|---|---|---|
|DAII ZROC3?|VALUE DiT| | | | |

Note: The conversion blocks only perform data conversion; in other words, you will need to program additional measures in the F-program for plausibility checking purposes (with F_LIM_R, for example), in order to ensure that only non-hazardous values are possible.

# 7.2.8 How F-blocks with floating-point operations respond to number range overflows

Within the context of analog value processing, number range overflows/underflows can occur during arithmetic calculations (with division by 0, root from a negative number or number range overflow). With S7 F Systems Lib V1_3 and higher, the response is as follows in this case: The results ""Overflow (± infinite)"", ""Denormalized floating-point number"" or ""Invalid floating-point number (NaN)"" are:

- Either output at the output and can be processed further by subsequent F blocks
- Or signaled to special outputs. A substitute value is output if necessary.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

91

# Configuring the safety program

# 7.2 Creating the safety program

If the floating-point operation produces an invalid floating-point number (NaN) and no invalid floating-point number (NaN) existed as an address prior to this, the following diagnostics event will be entered in the F CPU's diagnostic buffer:

""Safety program: Invalid REAL number in DB"" (event ID 16#75D9)

You can use this entry in the diagnostic buffer to identify the F block with the invalid floating-point number (NaN).

If you are not able to prevent these events from occurring in your safety program, you will need to decide, on the basis of your application, whether you wish to respond to them in your safety program.

|AD?|nddie|101.o = 101.0_|10o.0|-10q|CUIL|5035|
|---|---|---|---|---|---|---|
|AD?|indoic|0b37 1.0e+3e|:Addle|0etz|3.0e-3e|10o.0|
| |100.0|3.0e-38| |CUIL|AD_|:itis|
|0837i|LIN_R|08371|#Addic|3402-32|c0m| |
| |ce-JE| |CUII|Sms|AD?|0BJ7i|
|Addue|J1o|~10O|02-J8|~100.0|CuTO|100.0=|
|DIV|LIK_R|:tris|100.0_| |100.-|CutQ|
|0.0|502S|SoRT|HXR|:Squo-|{AJi|hal|
|-10o.05|CVIQ|CUIL|5023_W| | | |

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.3 Configuring fail-safe AS-AS communication

You can use the F_LIM_R F block to check the result of a floating-point operation for overflow (± infinite) and invalid floating-point number (NaN).

- A limit violation is indicated by IN &gt; MAX or ""+ infinite"". ",How is the run sequence of F-blocks defined in the 'Compendium Part B - Process Safety (V9.0)'?,A1,"The run sequence is defined in the CFC editor similarly to a standard user program, and changing it alters the collective signature.",1.4140625,1.5,3.328125,1.5234375,0.44140625
6,pcs7_compendium_part_b_en-US_en-US.txt,37,5dea5c3b1bc7a2a2d3707ace8a7d6e3ed157196366f8ee88ba630fadc3d36b0e,"Changes to the input parameters of F blocks with F data types can be made as follows:

- Offline with the assistance of the CFC editor
- Online using CFC test mode with safety mode deactivated

Note

Values of PAR_ID and COMPLEM must not be changed. If errors in the safety data format are detected during the execution of the safety program, an F-STOP is triggered.

# 7.2.4 Run sequence of F-blocks

# Defining the run sequence

You define the run sequence in the CFC editor in the same way as for a standard user program. Changing the run sequence also changes the collective signature.

# Correct run sequence of F-blocks

The sequence of the F-blocks within the F-shutdown group is relevant. The number of F-runtime groups the F-shutdown group has been split into is of no relevance. Essentially, the correct run sequence of the various F-block types is as follows:

1. Placed automatically:
- F module driver for F-signal modules with inputs or with inputs and outputs
- F-communications blocks and F-system blocks for receiving
- F blocks for data conversion from standard value to F-structure
- F modules with OS connection
2. F channel drivers for inputs
3. F blocks for user logic

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

1. F channel drivers for outputs
2. Placed automatically:
- F block F_PLK
- F block F_PSG_M
- F module driver for F-signal modules with outputs or with inputs and outputs
- F-communications blocks and F-system blocks for sending
- F block F_PLK_O
- F block F_DIAG (S7 F-Systems Lib V1_3 and higher)

The run sequence of the blocks listed under items 1 and 5 is adjusted automatically when the F-program is compiled.
As if S7 F Systems Lib V1_3, separate runtime groups are created for the F blocks listed under points 1 and 5 during the first compilation.
The IPO principle (input, process, output) must always be observed when placing F-channel drivers and F-blocks for user logic.
This ensures that all inputs are read first, the relevant processing steps are performed, and all outputs are then written.
Furthermore, F-runtime groups and F-monitoring blocks that are only visible following compilation are also added automatically.

Note

No changes may be made in the automatically added runtime groups with the exception of the scan cycle monitoring on ""F_CYC_CO"" blocks and the parameter assignment of the ""F_SHUTDN"" block.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.5 F-runtime groups

During the programming of the safety program, F-blocks cannot be inserted directly into tasks (cyclic interrupt OBs). When a new CFC chart is created in PCS 7, the system will automatically generate a runtime group of the same name, into which the F-blocks placed in the corresponding CFC chart can then be inserted. An F-runtime group only becomes an F-runtime group (identified by a yellow folder and ""F"") when F-blocks are called in it.

0B37 [Cyclic interrupt7] (300 ms)
@CPU_RTI@CPU_RT
@F_ShutDn_37 (300 ms)
@F_ShutDn (300 ms)
CycCo-QB37 (300 ms)
CycCo-OB3ZIF_CYC_CO-OB37
@F_CycCo-OB3ZIF_TEST
@F_CycCo-OB37IF_TESTC
@F_TestMode (300 ms)
@F_IN_37_0 (300 ms)
SFC_109_F (300 ms)
AI_F (300 ms)
HS104_F (300 ms)
@F_OUT_37_0 (300 ms)
@F_DbIniti (300 ms)
0B38 [Cycic interrupta] (10 ms)

# Runtime groups of an F-program

The F-program is divided into several runtime groups, as shown in the table below.

Note

xx = Number of the cyclic interrupt OB

y = Consecutive numbering if several shutdown groups exist in a single cyclic interrupt OB

|Chart|F blocks|
|---|---|
|@F_ShutDn_xx|Shutdown logic of cyclic interrupt OB The shutdown logic is created with RTGLOGIC and standard logic blocks.|
|@F_ShutDn|Shutdown block Where an F-program is present in several cyclic interrupt OBs, this runtime group is integrated into the cyclic interrupt OB with the shortest call time. The shutdown logic is created with F_SHUTDN, RTGLOGIC, and standard logic blocks.|
|@F_CycCo-OBxx|F_CYC_CO, F_TEST and F_TESTC (for tests)|
|@F_TestMode|F_TESTM for managing safety mode|
|@F_IN_xx_y|F blocks which supply input values for the F-program (F_QUITES, communication receive blocks, conversion blocks from standard to F-data types, drivers for F-input modules) Runtime groups with user logic, in the sequence in which they were created by the user|

Compendium Part B - Process Safety (V9.0)
Operating Manual, 04/2018, A5E43228905-AA

# 7.2 Creating the safety program

@F_OUT_xx_y Blocks which further process output values of F-blocks (communication send blocks, conversion blocks from F-to standard data types, drivers for F-output modules, F_PLK, F_PLK_O, and F_DIAG for program sequence control)

@F_DbInitxx DB_INIT function block required for the cold restart of an F-runtime group

All required error OBs are added to the block container in the SIMATIC Manager.

There should only be one @F_IN_xx_y runtime group before the first F-user runtime group and one @F_OUT_xx_y runtime group after the last F-user runtime group. If the safety program consists of several shutdown groups (see section 6.2.6 (Page 87)), there is the @F_IN_xx_y and @F_OUT_xx_y runtime group both before and after the F-user runtime group in the shutdown groups.

# Rules for F-runtime groups in the safety program

- We recommend that you proceed as follows in order to make the lengths of the F-cycles as uniform as possible:
If you mix F-and standard runtime groups in a cyclic interrupt OB, you must execute the F-runtime groups before the standard runtime groups.
- The following defaults are set for properties of an F-runtime group:
- Reduction ratio = 1
- Phase offset = 0
- Properties Runtime Group
- Task: 0B37
- Name: HS104
- Comment:
- Reduction ratio:
- Phase offset:
- Optimize run sequence
- Active:
- You are not permitted to move automatically generated F-runtime groups (identified by @).

Note: The feature: Optimize Run Sequence in CFC can lead to a change in the collective signature and impair the response times of the safety program, and therefore should not be used in F-runtime groups.

With PCS 7 V7.0 SP1 and higher, it is no longer possible to optimize the run sequence for cyclic interrupt OBs with F-runtime groups.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.6 F-shutdown groups

An F-shutdown group is a self-contained unit in your safety program. It contains user logic which is executed or shut down simultaneously. The F-shutdown group contains one or a number of F-runtime groups which are assigned to a common cyclic interrupt OB. You can choose whether an error during execution of the safety program causes a full shutdown or a partial shutdown of the safety program. With a partial shutdown, only the F-shutdown group in which the error occurred is shut down.

# Rules for F-shutdown groups in the safety program

You are not permitted to directly interconnect F-blocks in different F-shutdown groups. Data can only be exchanged between F-shutdown groups using special communication blocks (F_S_xx, F_R_xx for F_BOOL and F_REAL data structures). Therefore, all F-channel drivers in an F-signal module must be in the same F-shutdown group, together with the module driver of the F-signal module.

# Defining F-shutdown groups

As soon as you place F-blocks in the CFC editor for the first time, all of the F-runtime groups in a single cyclic interrupt OB will form an F-shutdown group. You can configure each F-runtime group as the last F-runtime group in an F-shutdown group by placing the F_PSG_M ""selection block"". The F-system then creates a new F-shutdown group for all subsequent F-runtime groups until another F_PSG_M block is found.

# Distribution/Combination by means of manual placing of F_PSG_M

If you add or delete one or a number of F_PSG_M blocks in your project, the order of your F-shutdown groups will change. If you make a change to the layout of your F-shutdown groups, you must make sure that the F-module drivers and all assigned F-channel drivers are integrated in the same F-shutdown group. You can split one F-shutdown group into two F-shutdown groups. To do this, in the CFC editor's runtime editor, place the F_PSG_M block in the last F-runtime group which is to be assigned to the first F-shutdown group. All subsequent F-runtime groups will then be assigned to the second F-shutdown group. The number of F-shutdown groups is limited to 110 in all cyclic interrupt OBs. The system restricts the number of F-runtime groups in an F-shutdown group. You have the option of combining two F-shutdown groups. To do this, in the runtime editor of the CFC editor, delete the F_PSG_M block between the F-shutdown groups. If you combine a number of F-shutdown groups which exchange data via F-communication blocks in a single F-shutdown group, you need to remove these F-communications blocks and replace them with direct interconnections.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# Programming data exchange between F-shutdown groups

If you wish to exchange data between two F-shutdown groups, you are not permitted to interconnect the inputs and outputs directly. You need to use the following F-system blocks for data exchange between F blocks in different F-shutdown groups:

|F block|Description|
|---|---|
|F_S_R/F_R_R|Safe transfer of 5 data of the F_REAL type|
|F_S_BO/F_R_BO|Safe transfer of 5 data of the F_BOOL type|

# Procedure for data exchange

1. In the F-shutdown group from which data is to be transferred, add an F_S_R or F_S_BO type F-block.
2. In the F-shutdown group to which data is to be transferred, add an F_R_R or F_R_BO type F-block.
3. Interconnect the SD_R_xx inputs of the F_S_R or the SD_BO_xx inputs of the F_S_BO with the data to be transferred.
4. Interconnect the RD_R_xx outputs of the F_R_R or the RD_BO_xx outputs of the F_R_BO with the inputs of the F-block for further processing of the data received.
5. Interconnect the S_DB output of the send block with the S_DB input of the associated receive block.
6. Configure the TIMEOUT inputs of the F_R_R and F_R_BO receive blocks with the F-monitoring time calculated.
7. Configure the receive block substitute values for the scenario of a shutdown of the sending shutdown group.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Extract from a chart for shutdown group 1 with send block:

|42617|7ail-|7133 Cor|CHLDEA F|1e-0- Ck_INE|
|---|---|---|---|---|
|JdEO|90_8o_|J0_EO|90_BO|JD_Bo_|
|11_112|J0_EO_07|32_80_08|7193 Coz|CHLDEA|
|Q_EAII|4212 bloel|PaJJ_CX|0_Kod|ubSime|
|4nu|Lou|JG RG|P3c >| |

The connection to shutdown group 2 is established by linking output S_DB of block F_S_BO_1 in shutdown group 1 with input S_DB on block F_R_BO_1 in shutdown group 2.

Extract from a chart for shutdown group 2 with receive block:

|Xbaeha|32430|netr|
|---|---|---|
|314 = doxr|3281p|REC_E?|
|Recei|ER EL|RD_BO_|
|RD_BO_|8088Q_01|RD_EQ|
|RD_E?|302ZD|RD_Lo|

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

89

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.7 Data exchange between the F user program and standard user program

The standard program and the F-program use different data formats. Accordingly, special conversion blocks have to be used for data exchange.

F-CPU
F-program
Conversion blocks
Standard program
Converting F-data types to standard data types

If you need the standard user program to process data from the F-program further (for monitoring on the PCS 7 OS, for example), a block for F_FDatatype_Datatype data conversion will have to be interconnected in the user program so that the F-data types can be converted into standard data types. This converter blocks must be called in the standard user program (standard runtime group).

Extract from a process tag chart; converting the ""QBAD"" signal from F_BOOL to BOOL:

Note

The figure is available in its original size as appendix to the manual in the ZIP download of the checklists.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Standard and F-blocks are in different runtime groups. As shown here, some F-blocks have outputs (depicted in gray), which can be directly interconnected with standard PCS 7 blocks. PCS 7 blocks such as MonAnL, MonDiL, EventMESSAGE and their associated faceplates and process symbols are used to visualize fail-safe analog values and status messages as well as system states and operating states. If parameters cannot be directly further interconnected due to the safety data format, the conversion blocks described above can be used.

# Converting standard data types into F-data types

If data from the standard user program is to be processed further in the F-program, it will need to be converted. The blocks for data conversion from standard data types to F-data types (F_datatype_Fdatatype) can only be used in the F-program (F-runtime group).

Extract from an F-chart, conversion from REAL to F_REAL:

|7_R_FR_CONv|R -B|CE 32|CB39|:RELL|Aulci|
|---|---|---|---|---|---|
|DAII ZROC3?|VALUE DiT| | | | |

Note: The conversion blocks only perform data conversion; in other words, you will need to program additional measures in the F-program for plausibility checking purposes (with F_LIM_R, for example), in order to ensure that only non-hazardous values are possible.

# 7.2.8 How F-blocks with floating-point operations respond to number range overflows

Within the context of analog value processing, number range overflows/underflows can occur during arithmetic calculations (with division by 0, root from a negative number or number range overflow). With S7 F Systems Lib V1_3 and higher, the response is as follows in this case: The results ""Overflow (± infinite)"", ""Denormalized floating-point number"" or ""Invalid floating-point number (NaN)"" are:

- Either output at the output and can be processed further by subsequent F blocks
- Or signaled to special outputs. A substitute value is output if necessary.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

91

# Configuring the safety program

# 7.2 Creating the safety program

If the floating-point operation produces an invalid floating-point number (NaN) and no invalid floating-point number (NaN) existed as an address prior to this, the following diagnostics event will be entered in the F CPU's diagnostic buffer:

""Safety program: Invalid REAL number in DB"" (event ID 16#75D9)

You can use this entry in the diagnostic buffer to identify the F block with the invalid floating-point number (NaN).

If you are not able to prevent these events from occurring in your safety program, you will need to decide, on the basis of your application, whether you wish to respond to them in your safety program.

|AD?|nddie|101.o = 101.0_|10o.0|-10q|CUIL|5035|
|---|---|---|---|---|---|---|
|AD?|indoic|0b37 1.0e+3e|:Addle|0etz|3.0e-3e|10o.0|
| |100.0|3.0e-38| |CUIL|AD_|:itis|
|0837i|LIN_R|08371|#Addic|3402-32|c0m| |
| |ce-JE| |CUII|Sms|AD?|0BJ7i|
|Addue|J1o|~10O|02-J8|~100.0|CuTO|100.0=|
|DIV|LIK_R|:tris|100.0_| |100.-|CutQ|
|0.0|502S|SoRT|HXR|:Squo-|{AJi|hal|
|-10o.05|CVIQ|CUIL|5023_W| | | |

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.3 Configuring fail-safe AS-AS communication

You can use the F_LIM_R F block to check the result of a floating-point operation for overflow (± infinite) and invalid floating-point number (NaN).

- A limit violation is indicated by IN &gt; MAX or ""+ infinite"". ",How is the run sequence of F-blocks defined in the 'Compendium Part B - Process Safety (V9.0)'?,A2,"Defined within the CFC editor like standard programs, altering the sequence impacts the collective signature.",0.69140625,0.63671875,2.890625,1.3828125,0.34375
7,pcs7_compendium_part_b_en-US_en-US.txt,37,5dea5c3b1bc7a2a2d3707ace8a7d6e3ed157196366f8ee88ba630fadc3d36b0e,"Changes to the input parameters of F blocks with F data types can be made as follows:

- Offline with the assistance of the CFC editor
- Online using CFC test mode with safety mode deactivated

Note

Values of PAR_ID and COMPLEM must not be changed. If errors in the safety data format are detected during the execution of the safety program, an F-STOP is triggered.

# 7.2.4 Run sequence of F-blocks

# Defining the run sequence

You define the run sequence in the CFC editor in the same way as for a standard user program. Changing the run sequence also changes the collective signature.

# Correct run sequence of F-blocks

The sequence of the F-blocks within the F-shutdown group is relevant. The number of F-runtime groups the F-shutdown group has been split into is of no relevance. Essentially, the correct run sequence of the various F-block types is as follows:

1. Placed automatically:
- F module driver for F-signal modules with inputs or with inputs and outputs
- F-communications blocks and F-system blocks for receiving
- F blocks for data conversion from standard value to F-structure
- F modules with OS connection
2. F channel drivers for inputs
3. F blocks for user logic

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

1. F channel drivers for outputs
2. Placed automatically:
- F block F_PLK
- F block F_PSG_M
- F module driver for F-signal modules with outputs or with inputs and outputs
- F-communications blocks and F-system blocks for sending
- F block F_PLK_O
- F block F_DIAG (S7 F-Systems Lib V1_3 and higher)

The run sequence of the blocks listed under items 1 and 5 is adjusted automatically when the F-program is compiled.
As if S7 F Systems Lib V1_3, separate runtime groups are created for the F blocks listed under points 1 and 5 during the first compilation.
The IPO principle (input, process, output) must always be observed when placing F-channel drivers and F-blocks for user logic.
This ensures that all inputs are read first, the relevant processing steps are performed, and all outputs are then written.
Furthermore, F-runtime groups and F-monitoring blocks that are only visible following compilation are also added automatically.

Note

No changes may be made in the automatically added runtime groups with the exception of the scan cycle monitoring on ""F_CYC_CO"" blocks and the parameter assignment of the ""F_SHUTDN"" block.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.5 F-runtime groups

During the programming of the safety program, F-blocks cannot be inserted directly into tasks (cyclic interrupt OBs). When a new CFC chart is created in PCS 7, the system will automatically generate a runtime group of the same name, into which the F-blocks placed in the corresponding CFC chart can then be inserted. An F-runtime group only becomes an F-runtime group (identified by a yellow folder and ""F"") when F-blocks are called in it.

0B37 [Cyclic interrupt7] (300 ms)
@CPU_RTI@CPU_RT
@F_ShutDn_37 (300 ms)
@F_ShutDn (300 ms)
CycCo-QB37 (300 ms)
CycCo-OB3ZIF_CYC_CO-OB37
@F_CycCo-OB3ZIF_TEST
@F_CycCo-OB37IF_TESTC
@F_TestMode (300 ms)
@F_IN_37_0 (300 ms)
SFC_109_F (300 ms)
AI_F (300 ms)
HS104_F (300 ms)
@F_OUT_37_0 (300 ms)
@F_DbIniti (300 ms)
0B38 [Cycic interrupta] (10 ms)

# Runtime groups of an F-program

The F-program is divided into several runtime groups, as shown in the table below.

Note

xx = Number of the cyclic interrupt OB

y = Consecutive numbering if several shutdown groups exist in a single cyclic interrupt OB

|Chart|F blocks|
|---|---|
|@F_ShutDn_xx|Shutdown logic of cyclic interrupt OB The shutdown logic is created with RTGLOGIC and standard logic blocks.|
|@F_ShutDn|Shutdown block Where an F-program is present in several cyclic interrupt OBs, this runtime group is integrated into the cyclic interrupt OB with the shortest call time. The shutdown logic is created with F_SHUTDN, RTGLOGIC, and standard logic blocks.|
|@F_CycCo-OBxx|F_CYC_CO, F_TEST and F_TESTC (for tests)|
|@F_TestMode|F_TESTM for managing safety mode|
|@F_IN_xx_y|F blocks which supply input values for the F-program (F_QUITES, communication receive blocks, conversion blocks from standard to F-data types, drivers for F-input modules) Runtime groups with user logic, in the sequence in which they were created by the user|

Compendium Part B - Process Safety (V9.0)
Operating Manual, 04/2018, A5E43228905-AA

# 7.2 Creating the safety program

@F_OUT_xx_y Blocks which further process output values of F-blocks (communication send blocks, conversion blocks from F-to standard data types, drivers for F-output modules, F_PLK, F_PLK_O, and F_DIAG for program sequence control)

@F_DbInitxx DB_INIT function block required for the cold restart of an F-runtime group

All required error OBs are added to the block container in the SIMATIC Manager.

There should only be one @F_IN_xx_y runtime group before the first F-user runtime group and one @F_OUT_xx_y runtime group after the last F-user runtime group. If the safety program consists of several shutdown groups (see section 6.2.6 (Page 87)), there is the @F_IN_xx_y and @F_OUT_xx_y runtime group both before and after the F-user runtime group in the shutdown groups.

# Rules for F-runtime groups in the safety program

- We recommend that you proceed as follows in order to make the lengths of the F-cycles as uniform as possible:
If you mix F-and standard runtime groups in a cyclic interrupt OB, you must execute the F-runtime groups before the standard runtime groups.
- The following defaults are set for properties of an F-runtime group:
- Reduction ratio = 1
- Phase offset = 0
- Properties Runtime Group
- Task: 0B37
- Name: HS104
- Comment:
- Reduction ratio:
- Phase offset:
- Optimize run sequence
- Active:
- You are not permitted to move automatically generated F-runtime groups (identified by @).

Note: The feature: Optimize Run Sequence in CFC can lead to a change in the collective signature and impair the response times of the safety program, and therefore should not be used in F-runtime groups.

With PCS 7 V7.0 SP1 and higher, it is no longer possible to optimize the run sequence for cyclic interrupt OBs with F-runtime groups.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.6 F-shutdown groups

An F-shutdown group is a self-contained unit in your safety program. It contains user logic which is executed or shut down simultaneously. The F-shutdown group contains one or a number of F-runtime groups which are assigned to a common cyclic interrupt OB. You can choose whether an error during execution of the safety program causes a full shutdown or a partial shutdown of the safety program. With a partial shutdown, only the F-shutdown group in which the error occurred is shut down.

# Rules for F-shutdown groups in the safety program

You are not permitted to directly interconnect F-blocks in different F-shutdown groups. Data can only be exchanged between F-shutdown groups using special communication blocks (F_S_xx, F_R_xx for F_BOOL and F_REAL data structures). Therefore, all F-channel drivers in an F-signal module must be in the same F-shutdown group, together with the module driver of the F-signal module.

# Defining F-shutdown groups

As soon as you place F-blocks in the CFC editor for the first time, all of the F-runtime groups in a single cyclic interrupt OB will form an F-shutdown group. You can configure each F-runtime group as the last F-runtime group in an F-shutdown group by placing the F_PSG_M ""selection block"". The F-system then creates a new F-shutdown group for all subsequent F-runtime groups until another F_PSG_M block is found.

# Distribution/Combination by means of manual placing of F_PSG_M

If you add or delete one or a number of F_PSG_M blocks in your project, the order of your F-shutdown groups will change. If you make a change to the layout of your F-shutdown groups, you must make sure that the F-module drivers and all assigned F-channel drivers are integrated in the same F-shutdown group. You can split one F-shutdown group into two F-shutdown groups. To do this, in the CFC editor's runtime editor, place the F_PSG_M block in the last F-runtime group which is to be assigned to the first F-shutdown group. All subsequent F-runtime groups will then be assigned to the second F-shutdown group. The number of F-shutdown groups is limited to 110 in all cyclic interrupt OBs. The system restricts the number of F-runtime groups in an F-shutdown group. You have the option of combining two F-shutdown groups. To do this, in the runtime editor of the CFC editor, delete the F_PSG_M block between the F-shutdown groups. If you combine a number of F-shutdown groups which exchange data via F-communication blocks in a single F-shutdown group, you need to remove these F-communications blocks and replace them with direct interconnections.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# Programming data exchange between F-shutdown groups

If you wish to exchange data between two F-shutdown groups, you are not permitted to interconnect the inputs and outputs directly. You need to use the following F-system blocks for data exchange between F blocks in different F-shutdown groups:

|F block|Description|
|---|---|
|F_S_R/F_R_R|Safe transfer of 5 data of the F_REAL type|
|F_S_BO/F_R_BO|Safe transfer of 5 data of the F_BOOL type|

# Procedure for data exchange

1. In the F-shutdown group from which data is to be transferred, add an F_S_R or F_S_BO type F-block.
2. In the F-shutdown group to which data is to be transferred, add an F_R_R or F_R_BO type F-block.
3. Interconnect the SD_R_xx inputs of the F_S_R or the SD_BO_xx inputs of the F_S_BO with the data to be transferred.
4. Interconnect the RD_R_xx outputs of the F_R_R or the RD_BO_xx outputs of the F_R_BO with the inputs of the F-block for further processing of the data received.
5. Interconnect the S_DB output of the send block with the S_DB input of the associated receive block.
6. Configure the TIMEOUT inputs of the F_R_R and F_R_BO receive blocks with the F-monitoring time calculated.
7. Configure the receive block substitute values for the scenario of a shutdown of the sending shutdown group.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Extract from a chart for shutdown group 1 with send block:

|42617|7ail-|7133 Cor|CHLDEA F|1e-0- Ck_INE|
|---|---|---|---|---|
|JdEO|90_8o_|J0_EO|90_BO|JD_Bo_|
|11_112|J0_EO_07|32_80_08|7193 Coz|CHLDEA|
|Q_EAII|4212 bloel|PaJJ_CX|0_Kod|ubSime|
|4nu|Lou|JG RG|P3c >| |

The connection to shutdown group 2 is established by linking output S_DB of block F_S_BO_1 in shutdown group 1 with input S_DB on block F_R_BO_1 in shutdown group 2.

Extract from a chart for shutdown group 2 with receive block:

|Xbaeha|32430|netr|
|---|---|---|
|314 = doxr|3281p|REC_E?|
|Recei|ER EL|RD_BO_|
|RD_BO_|8088Q_01|RD_EQ|
|RD_E?|302ZD|RD_Lo|

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

89

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.7 Data exchange between the F user program and standard user program

The standard program and the F-program use different data formats. Accordingly, special conversion blocks have to be used for data exchange.

F-CPU
F-program
Conversion blocks
Standard program
Converting F-data types to standard data types

If you need the standard user program to process data from the F-program further (for monitoring on the PCS 7 OS, for example), a block for F_FDatatype_Datatype data conversion will have to be interconnected in the user program so that the F-data types can be converted into standard data types. This converter blocks must be called in the standard user program (standard runtime group).

Extract from a process tag chart; converting the ""QBAD"" signal from F_BOOL to BOOL:

Note

The figure is available in its original size as appendix to the manual in the ZIP download of the checklists.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Standard and F-blocks are in different runtime groups. As shown here, some F-blocks have outputs (depicted in gray), which can be directly interconnected with standard PCS 7 blocks. PCS 7 blocks such as MonAnL, MonDiL, EventMESSAGE and their associated faceplates and process symbols are used to visualize fail-safe analog values and status messages as well as system states and operating states. If parameters cannot be directly further interconnected due to the safety data format, the conversion blocks described above can be used.

# Converting standard data types into F-data types

If data from the standard user program is to be processed further in the F-program, it will need to be converted. The blocks for data conversion from standard data types to F-data types (F_datatype_Fdatatype) can only be used in the F-program (F-runtime group).

Extract from an F-chart, conversion from REAL to F_REAL:

|7_R_FR_CONv|R -B|CE 32|CB39|:RELL|Aulci|
|---|---|---|---|---|---|
|DAII ZROC3?|VALUE DiT| | | | |

Note: The conversion blocks only perform data conversion; in other words, you will need to program additional measures in the F-program for plausibility checking purposes (with F_LIM_R, for example), in order to ensure that only non-hazardous values are possible.

# 7.2.8 How F-blocks with floating-point operations respond to number range overflows

Within the context of analog value processing, number range overflows/underflows can occur during arithmetic calculations (with division by 0, root from a negative number or number range overflow). With S7 F Systems Lib V1_3 and higher, the response is as follows in this case: The results ""Overflow (± infinite)"", ""Denormalized floating-point number"" or ""Invalid floating-point number (NaN)"" are:

- Either output at the output and can be processed further by subsequent F blocks
- Or signaled to special outputs. A substitute value is output if necessary.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

91

# Configuring the safety program

# 7.2 Creating the safety program

If the floating-point operation produces an invalid floating-point number (NaN) and no invalid floating-point number (NaN) existed as an address prior to this, the following diagnostics event will be entered in the F CPU's diagnostic buffer:

""Safety program: Invalid REAL number in DB"" (event ID 16#75D9)

You can use this entry in the diagnostic buffer to identify the F block with the invalid floating-point number (NaN).

If you are not able to prevent these events from occurring in your safety program, you will need to decide, on the basis of your application, whether you wish to respond to them in your safety program.

|AD?|nddie|101.o = 101.0_|10o.0|-10q|CUIL|5035|
|---|---|---|---|---|---|---|
|AD?|indoic|0b37 1.0e+3e|:Addle|0etz|3.0e-3e|10o.0|
| |100.0|3.0e-38| |CUIL|AD_|:itis|
|0837i|LIN_R|08371|#Addic|3402-32|c0m| |
| |ce-JE| |CUII|Sms|AD?|0BJ7i|
|Addue|J1o|~10O|02-J8|~100.0|CuTO|100.0=|
|DIV|LIK_R|:tris|100.0_| |100.-|CutQ|
|0.0|502S|SoRT|HXR|:Squo-|{AJi|hal|
|-10o.05|CVIQ|CUIL|5023_W| | | |

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.3 Configuring fail-safe AS-AS communication

You can use the F_LIM_R F block to check the result of a floating-point operation for overflow (± infinite) and invalid floating-point number (NaN).

- A limit violation is indicated by IN &gt; MAX or ""+ infinite"". ",How is the run sequence of F-blocks defined in the 'Compendium Part B - Process Safety (V9.0)'?,A3,"In the CFC editor, akin to standard user programs, with sequence changes affecting the collective signature.",0.6796875,0.578125,2.984375,1.2421875,0.26953125
8,pcs7_compendium_part_b_en-US_en-US.txt,37,5dea5c3b1bc7a2a2d3707ace8a7d6e3ed157196366f8ee88ba630fadc3d36b0e,"Changes to the input parameters of F blocks with F data types can be made as follows:

- Offline with the assistance of the CFC editor
- Online using CFC test mode with safety mode deactivated

Note

Values of PAR_ID and COMPLEM must not be changed. If errors in the safety data format are detected during the execution of the safety program, an F-STOP is triggered.

# 7.2.4 Run sequence of F-blocks

# Defining the run sequence

You define the run sequence in the CFC editor in the same way as for a standard user program. Changing the run sequence also changes the collective signature.

# Correct run sequence of F-blocks

The sequence of the F-blocks within the F-shutdown group is relevant. The number of F-runtime groups the F-shutdown group has been split into is of no relevance. Essentially, the correct run sequence of the various F-block types is as follows:

1. Placed automatically:
- F module driver for F-signal modules with inputs or with inputs and outputs
- F-communications blocks and F-system blocks for receiving
- F blocks for data conversion from standard value to F-structure
- F modules with OS connection
2. F channel drivers for inputs
3. F blocks for user logic

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

1. F channel drivers for outputs
2. Placed automatically:
- F block F_PLK
- F block F_PSG_M
- F module driver for F-signal modules with outputs or with inputs and outputs
- F-communications blocks and F-system blocks for sending
- F block F_PLK_O
- F block F_DIAG (S7 F-Systems Lib V1_3 and higher)

The run sequence of the blocks listed under items 1 and 5 is adjusted automatically when the F-program is compiled.
As if S7 F Systems Lib V1_3, separate runtime groups are created for the F blocks listed under points 1 and 5 during the first compilation.
The IPO principle (input, process, output) must always be observed when placing F-channel drivers and F-blocks for user logic.
This ensures that all inputs are read first, the relevant processing steps are performed, and all outputs are then written.
Furthermore, F-runtime groups and F-monitoring blocks that are only visible following compilation are also added automatically.

Note

No changes may be made in the automatically added runtime groups with the exception of the scan cycle monitoring on ""F_CYC_CO"" blocks and the parameter assignment of the ""F_SHUTDN"" block.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.5 F-runtime groups

During the programming of the safety program, F-blocks cannot be inserted directly into tasks (cyclic interrupt OBs). When a new CFC chart is created in PCS 7, the system will automatically generate a runtime group of the same name, into which the F-blocks placed in the corresponding CFC chart can then be inserted. An F-runtime group only becomes an F-runtime group (identified by a yellow folder and ""F"") when F-blocks are called in it.

0B37 [Cyclic interrupt7] (300 ms)
@CPU_RTI@CPU_RT
@F_ShutDn_37 (300 ms)
@F_ShutDn (300 ms)
CycCo-QB37 (300 ms)
CycCo-OB3ZIF_CYC_CO-OB37
@F_CycCo-OB3ZIF_TEST
@F_CycCo-OB37IF_TESTC
@F_TestMode (300 ms)
@F_IN_37_0 (300 ms)
SFC_109_F (300 ms)
AI_F (300 ms)
HS104_F (300 ms)
@F_OUT_37_0 (300 ms)
@F_DbIniti (300 ms)
0B38 [Cycic interrupta] (10 ms)

# Runtime groups of an F-program

The F-program is divided into several runtime groups, as shown in the table below.

Note

xx = Number of the cyclic interrupt OB

y = Consecutive numbering if several shutdown groups exist in a single cyclic interrupt OB

|Chart|F blocks|
|---|---|
|@F_ShutDn_xx|Shutdown logic of cyclic interrupt OB The shutdown logic is created with RTGLOGIC and standard logic blocks.|
|@F_ShutDn|Shutdown block Where an F-program is present in several cyclic interrupt OBs, this runtime group is integrated into the cyclic interrupt OB with the shortest call time. The shutdown logic is created with F_SHUTDN, RTGLOGIC, and standard logic blocks.|
|@F_CycCo-OBxx|F_CYC_CO, F_TEST and F_TESTC (for tests)|
|@F_TestMode|F_TESTM for managing safety mode|
|@F_IN_xx_y|F blocks which supply input values for the F-program (F_QUITES, communication receive blocks, conversion blocks from standard to F-data types, drivers for F-input modules) Runtime groups with user logic, in the sequence in which they were created by the user|

Compendium Part B - Process Safety (V9.0)
Operating Manual, 04/2018, A5E43228905-AA

# 7.2 Creating the safety program

@F_OUT_xx_y Blocks which further process output values of F-blocks (communication send blocks, conversion blocks from F-to standard data types, drivers for F-output modules, F_PLK, F_PLK_O, and F_DIAG for program sequence control)

@F_DbInitxx DB_INIT function block required for the cold restart of an F-runtime group

All required error OBs are added to the block container in the SIMATIC Manager.

There should only be one @F_IN_xx_y runtime group before the first F-user runtime group and one @F_OUT_xx_y runtime group after the last F-user runtime group. If the safety program consists of several shutdown groups (see section 6.2.6 (Page 87)), there is the @F_IN_xx_y and @F_OUT_xx_y runtime group both before and after the F-user runtime group in the shutdown groups.

# Rules for F-runtime groups in the safety program

- We recommend that you proceed as follows in order to make the lengths of the F-cycles as uniform as possible:
If you mix F-and standard runtime groups in a cyclic interrupt OB, you must execute the F-runtime groups before the standard runtime groups.
- The following defaults are set for properties of an F-runtime group:
- Reduction ratio = 1
- Phase offset = 0
- Properties Runtime Group
- Task: 0B37
- Name: HS104
- Comment:
- Reduction ratio:
- Phase offset:
- Optimize run sequence
- Active:
- You are not permitted to move automatically generated F-runtime groups (identified by @).

Note: The feature: Optimize Run Sequence in CFC can lead to a change in the collective signature and impair the response times of the safety program, and therefore should not be used in F-runtime groups.

With PCS 7 V7.0 SP1 and higher, it is no longer possible to optimize the run sequence for cyclic interrupt OBs with F-runtime groups.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.6 F-shutdown groups

An F-shutdown group is a self-contained unit in your safety program. It contains user logic which is executed or shut down simultaneously. The F-shutdown group contains one or a number of F-runtime groups which are assigned to a common cyclic interrupt OB. You can choose whether an error during execution of the safety program causes a full shutdown or a partial shutdown of the safety program. With a partial shutdown, only the F-shutdown group in which the error occurred is shut down.

# Rules for F-shutdown groups in the safety program

You are not permitted to directly interconnect F-blocks in different F-shutdown groups. Data can only be exchanged between F-shutdown groups using special communication blocks (F_S_xx, F_R_xx for F_BOOL and F_REAL data structures). Therefore, all F-channel drivers in an F-signal module must be in the same F-shutdown group, together with the module driver of the F-signal module.

# Defining F-shutdown groups

As soon as you place F-blocks in the CFC editor for the first time, all of the F-runtime groups in a single cyclic interrupt OB will form an F-shutdown group. You can configure each F-runtime group as the last F-runtime group in an F-shutdown group by placing the F_PSG_M ""selection block"". The F-system then creates a new F-shutdown group for all subsequent F-runtime groups until another F_PSG_M block is found.

# Distribution/Combination by means of manual placing of F_PSG_M

If you add or delete one or a number of F_PSG_M blocks in your project, the order of your F-shutdown groups will change. If you make a change to the layout of your F-shutdown groups, you must make sure that the F-module drivers and all assigned F-channel drivers are integrated in the same F-shutdown group. You can split one F-shutdown group into two F-shutdown groups. To do this, in the CFC editor's runtime editor, place the F_PSG_M block in the last F-runtime group which is to be assigned to the first F-shutdown group. All subsequent F-runtime groups will then be assigned to the second F-shutdown group. The number of F-shutdown groups is limited to 110 in all cyclic interrupt OBs. The system restricts the number of F-runtime groups in an F-shutdown group. You have the option of combining two F-shutdown groups. To do this, in the runtime editor of the CFC editor, delete the F_PSG_M block between the F-shutdown groups. If you combine a number of F-shutdown groups which exchange data via F-communication blocks in a single F-shutdown group, you need to remove these F-communications blocks and replace them with direct interconnections.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# Programming data exchange between F-shutdown groups

If you wish to exchange data between two F-shutdown groups, you are not permitted to interconnect the inputs and outputs directly. You need to use the following F-system blocks for data exchange between F blocks in different F-shutdown groups:

|F block|Description|
|---|---|
|F_S_R/F_R_R|Safe transfer of 5 data of the F_REAL type|
|F_S_BO/F_R_BO|Safe transfer of 5 data of the F_BOOL type|

# Procedure for data exchange

1. In the F-shutdown group from which data is to be transferred, add an F_S_R or F_S_BO type F-block.
2. In the F-shutdown group to which data is to be transferred, add an F_R_R or F_R_BO type F-block.
3. Interconnect the SD_R_xx inputs of the F_S_R or the SD_BO_xx inputs of the F_S_BO with the data to be transferred.
4. Interconnect the RD_R_xx outputs of the F_R_R or the RD_BO_xx outputs of the F_R_BO with the inputs of the F-block for further processing of the data received.
5. Interconnect the S_DB output of the send block with the S_DB input of the associated receive block.
6. Configure the TIMEOUT inputs of the F_R_R and F_R_BO receive blocks with the F-monitoring time calculated.
7. Configure the receive block substitute values for the scenario of a shutdown of the sending shutdown group.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Extract from a chart for shutdown group 1 with send block:

|42617|7ail-|7133 Cor|CHLDEA F|1e-0- Ck_INE|
|---|---|---|---|---|
|JdEO|90_8o_|J0_EO|90_BO|JD_Bo_|
|11_112|J0_EO_07|32_80_08|7193 Coz|CHLDEA|
|Q_EAII|4212 bloel|PaJJ_CX|0_Kod|ubSime|
|4nu|Lou|JG RG|P3c >| |

The connection to shutdown group 2 is established by linking output S_DB of block F_S_BO_1 in shutdown group 1 with input S_DB on block F_R_BO_1 in shutdown group 2.

Extract from a chart for shutdown group 2 with receive block:

|Xbaeha|32430|netr|
|---|---|---|
|314 = doxr|3281p|REC_E?|
|Recei|ER EL|RD_BO_|
|RD_BO_|8088Q_01|RD_EQ|
|RD_E?|302ZD|RD_Lo|

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

89

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.7 Data exchange between the F user program and standard user program

The standard program and the F-program use different data formats. Accordingly, special conversion blocks have to be used for data exchange.

F-CPU
F-program
Conversion blocks
Standard program
Converting F-data types to standard data types

If you need the standard user program to process data from the F-program further (for monitoring on the PCS 7 OS, for example), a block for F_FDatatype_Datatype data conversion will have to be interconnected in the user program so that the F-data types can be converted into standard data types. This converter blocks must be called in the standard user program (standard runtime group).

Extract from a process tag chart; converting the ""QBAD"" signal from F_BOOL to BOOL:

Note

The figure is available in its original size as appendix to the manual in the ZIP download of the checklists.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Standard and F-blocks are in different runtime groups. As shown here, some F-blocks have outputs (depicted in gray), which can be directly interconnected with standard PCS 7 blocks. PCS 7 blocks such as MonAnL, MonDiL, EventMESSAGE and their associated faceplates and process symbols are used to visualize fail-safe analog values and status messages as well as system states and operating states. If parameters cannot be directly further interconnected due to the safety data format, the conversion blocks described above can be used.

# Converting standard data types into F-data types

If data from the standard user program is to be processed further in the F-program, it will need to be converted. The blocks for data conversion from standard data types to F-data types (F_datatype_Fdatatype) can only be used in the F-program (F-runtime group).

Extract from an F-chart, conversion from REAL to F_REAL:

|7_R_FR_CONv|R -B|CE 32|CB39|:RELL|Aulci|
|---|---|---|---|---|---|
|DAII ZROC3?|VALUE DiT| | | | |

Note: The conversion blocks only perform data conversion; in other words, you will need to program additional measures in the F-program for plausibility checking purposes (with F_LIM_R, for example), in order to ensure that only non-hazardous values are possible.

# 7.2.8 How F-blocks with floating-point operations respond to number range overflows

Within the context of analog value processing, number range overflows/underflows can occur during arithmetic calculations (with division by 0, root from a negative number or number range overflow). With S7 F Systems Lib V1_3 and higher, the response is as follows in this case: The results ""Overflow (± infinite)"", ""Denormalized floating-point number"" or ""Invalid floating-point number (NaN)"" are:

- Either output at the output and can be processed further by subsequent F blocks
- Or signaled to special outputs. A substitute value is output if necessary.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

91

# Configuring the safety program

# 7.2 Creating the safety program

If the floating-point operation produces an invalid floating-point number (NaN) and no invalid floating-point number (NaN) existed as an address prior to this, the following diagnostics event will be entered in the F CPU's diagnostic buffer:

""Safety program: Invalid REAL number in DB"" (event ID 16#75D9)

You can use this entry in the diagnostic buffer to identify the F block with the invalid floating-point number (NaN).

If you are not able to prevent these events from occurring in your safety program, you will need to decide, on the basis of your application, whether you wish to respond to them in your safety program.

|AD?|nddie|101.o = 101.0_|10o.0|-10q|CUIL|5035|
|---|---|---|---|---|---|---|
|AD?|indoic|0b37 1.0e+3e|:Addle|0etz|3.0e-3e|10o.0|
| |100.0|3.0e-38| |CUIL|AD_|:itis|
|0837i|LIN_R|08371|#Addic|3402-32|c0m| |
| |ce-JE| |CUII|Sms|AD?|0BJ7i|
|Addue|J1o|~10O|02-J8|~100.0|CuTO|100.0=|
|DIV|LIK_R|:tris|100.0_| |100.-|CutQ|
|0.0|502S|SoRT|HXR|:Squo-|{AJi|hal|
|-10o.05|CVIQ|CUIL|5023_W| | | |

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.3 Configuring fail-safe AS-AS communication

You can use the F_LIM_R F block to check the result of a floating-point operation for overflow (± infinite) and invalid floating-point number (NaN).

- A limit violation is indicated by IN &gt; MAX or ""+ infinite"". ",How is the run sequence of F-blocks defined in the 'Compendium Part B - Process Safety (V9.0)'?,A4,"The sequence is set in the CFC editor, mirroring standard program practices, and modifications change the collective signature.",1.0234375,1.078125,3.171875,1.3359375,0.294921875
9,pcs7_compendium_part_b_en-US_en-US.txt,37,5dea5c3b1bc7a2a2d3707ace8a7d6e3ed157196366f8ee88ba630fadc3d36b0e,"Changes to the input parameters of F blocks with F data types can be made as follows:

- Offline with the assistance of the CFC editor
- Online using CFC test mode with safety mode deactivated

Note

Values of PAR_ID and COMPLEM must not be changed. If errors in the safety data format are detected during the execution of the safety program, an F-STOP is triggered.

# 7.2.4 Run sequence of F-blocks

# Defining the run sequence

You define the run sequence in the CFC editor in the same way as for a standard user program. Changing the run sequence also changes the collective signature.

# Correct run sequence of F-blocks

The sequence of the F-blocks within the F-shutdown group is relevant. The number of F-runtime groups the F-shutdown group has been split into is of no relevance. Essentially, the correct run sequence of the various F-block types is as follows:

1. Placed automatically:
- F module driver for F-signal modules with inputs or with inputs and outputs
- F-communications blocks and F-system blocks for receiving
- F blocks for data conversion from standard value to F-structure
- F modules with OS connection
2. F channel drivers for inputs
3. F blocks for user logic

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

1. F channel drivers for outputs
2. Placed automatically:
- F block F_PLK
- F block F_PSG_M
- F module driver for F-signal modules with outputs or with inputs and outputs
- F-communications blocks and F-system blocks for sending
- F block F_PLK_O
- F block F_DIAG (S7 F-Systems Lib V1_3 and higher)

The run sequence of the blocks listed under items 1 and 5 is adjusted automatically when the F-program is compiled.
As if S7 F Systems Lib V1_3, separate runtime groups are created for the F blocks listed under points 1 and 5 during the first compilation.
The IPO principle (input, process, output) must always be observed when placing F-channel drivers and F-blocks for user logic.
This ensures that all inputs are read first, the relevant processing steps are performed, and all outputs are then written.
Furthermore, F-runtime groups and F-monitoring blocks that are only visible following compilation are also added automatically.

Note

No changes may be made in the automatically added runtime groups with the exception of the scan cycle monitoring on ""F_CYC_CO"" blocks and the parameter assignment of the ""F_SHUTDN"" block.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.5 F-runtime groups

During the programming of the safety program, F-blocks cannot be inserted directly into tasks (cyclic interrupt OBs). When a new CFC chart is created in PCS 7, the system will automatically generate a runtime group of the same name, into which the F-blocks placed in the corresponding CFC chart can then be inserted. An F-runtime group only becomes an F-runtime group (identified by a yellow folder and ""F"") when F-blocks are called in it.

0B37 [Cyclic interrupt7] (300 ms)
@CPU_RTI@CPU_RT
@F_ShutDn_37 (300 ms)
@F_ShutDn (300 ms)
CycCo-QB37 (300 ms)
CycCo-OB3ZIF_CYC_CO-OB37
@F_CycCo-OB3ZIF_TEST
@F_CycCo-OB37IF_TESTC
@F_TestMode (300 ms)
@F_IN_37_0 (300 ms)
SFC_109_F (300 ms)
AI_F (300 ms)
HS104_F (300 ms)
@F_OUT_37_0 (300 ms)
@F_DbIniti (300 ms)
0B38 [Cycic interrupta] (10 ms)

# Runtime groups of an F-program

The F-program is divided into several runtime groups, as shown in the table below.

Note

xx = Number of the cyclic interrupt OB

y = Consecutive numbering if several shutdown groups exist in a single cyclic interrupt OB

|Chart|F blocks|
|---|---|
|@F_ShutDn_xx|Shutdown logic of cyclic interrupt OB The shutdown logic is created with RTGLOGIC and standard logic blocks.|
|@F_ShutDn|Shutdown block Where an F-program is present in several cyclic interrupt OBs, this runtime group is integrated into the cyclic interrupt OB with the shortest call time. The shutdown logic is created with F_SHUTDN, RTGLOGIC, and standard logic blocks.|
|@F_CycCo-OBxx|F_CYC_CO, F_TEST and F_TESTC (for tests)|
|@F_TestMode|F_TESTM for managing safety mode|
|@F_IN_xx_y|F blocks which supply input values for the F-program (F_QUITES, communication receive blocks, conversion blocks from standard to F-data types, drivers for F-input modules) Runtime groups with user logic, in the sequence in which they were created by the user|

Compendium Part B - Process Safety (V9.0)
Operating Manual, 04/2018, A5E43228905-AA

# 7.2 Creating the safety program

@F_OUT_xx_y Blocks which further process output values of F-blocks (communication send blocks, conversion blocks from F-to standard data types, drivers for F-output modules, F_PLK, F_PLK_O, and F_DIAG for program sequence control)

@F_DbInitxx DB_INIT function block required for the cold restart of an F-runtime group

All required error OBs are added to the block container in the SIMATIC Manager.

There should only be one @F_IN_xx_y runtime group before the first F-user runtime group and one @F_OUT_xx_y runtime group after the last F-user runtime group. If the safety program consists of several shutdown groups (see section 6.2.6 (Page 87)), there is the @F_IN_xx_y and @F_OUT_xx_y runtime group both before and after the F-user runtime group in the shutdown groups.

# Rules for F-runtime groups in the safety program

- We recommend that you proceed as follows in order to make the lengths of the F-cycles as uniform as possible:
If you mix F-and standard runtime groups in a cyclic interrupt OB, you must execute the F-runtime groups before the standard runtime groups.
- The following defaults are set for properties of an F-runtime group:
- Reduction ratio = 1
- Phase offset = 0
- Properties Runtime Group
- Task: 0B37
- Name: HS104
- Comment:
- Reduction ratio:
- Phase offset:
- Optimize run sequence
- Active:
- You are not permitted to move automatically generated F-runtime groups (identified by @).

Note: The feature: Optimize Run Sequence in CFC can lead to a change in the collective signature and impair the response times of the safety program, and therefore should not be used in F-runtime groups.

With PCS 7 V7.0 SP1 and higher, it is no longer possible to optimize the run sequence for cyclic interrupt OBs with F-runtime groups.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.6 F-shutdown groups

An F-shutdown group is a self-contained unit in your safety program. It contains user logic which is executed or shut down simultaneously. The F-shutdown group contains one or a number of F-runtime groups which are assigned to a common cyclic interrupt OB. You can choose whether an error during execution of the safety program causes a full shutdown or a partial shutdown of the safety program. With a partial shutdown, only the F-shutdown group in which the error occurred is shut down.

# Rules for F-shutdown groups in the safety program

You are not permitted to directly interconnect F-blocks in different F-shutdown groups. Data can only be exchanged between F-shutdown groups using special communication blocks (F_S_xx, F_R_xx for F_BOOL and F_REAL data structures). Therefore, all F-channel drivers in an F-signal module must be in the same F-shutdown group, together with the module driver of the F-signal module.

# Defining F-shutdown groups

As soon as you place F-blocks in the CFC editor for the first time, all of the F-runtime groups in a single cyclic interrupt OB will form an F-shutdown group. You can configure each F-runtime group as the last F-runtime group in an F-shutdown group by placing the F_PSG_M ""selection block"". The F-system then creates a new F-shutdown group for all subsequent F-runtime groups until another F_PSG_M block is found.

# Distribution/Combination by means of manual placing of F_PSG_M

If you add or delete one or a number of F_PSG_M blocks in your project, the order of your F-shutdown groups will change. If you make a change to the layout of your F-shutdown groups, you must make sure that the F-module drivers and all assigned F-channel drivers are integrated in the same F-shutdown group. You can split one F-shutdown group into two F-shutdown groups. To do this, in the CFC editor's runtime editor, place the F_PSG_M block in the last F-runtime group which is to be assigned to the first F-shutdown group. All subsequent F-runtime groups will then be assigned to the second F-shutdown group. The number of F-shutdown groups is limited to 110 in all cyclic interrupt OBs. The system restricts the number of F-runtime groups in an F-shutdown group. You have the option of combining two F-shutdown groups. To do this, in the runtime editor of the CFC editor, delete the F_PSG_M block between the F-shutdown groups. If you combine a number of F-shutdown groups which exchange data via F-communication blocks in a single F-shutdown group, you need to remove these F-communications blocks and replace them with direct interconnections.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# Programming data exchange between F-shutdown groups

If you wish to exchange data between two F-shutdown groups, you are not permitted to interconnect the inputs and outputs directly. You need to use the following F-system blocks for data exchange between F blocks in different F-shutdown groups:

|F block|Description|
|---|---|
|F_S_R/F_R_R|Safe transfer of 5 data of the F_REAL type|
|F_S_BO/F_R_BO|Safe transfer of 5 data of the F_BOOL type|

# Procedure for data exchange

1. In the F-shutdown group from which data is to be transferred, add an F_S_R or F_S_BO type F-block.
2. In the F-shutdown group to which data is to be transferred, add an F_R_R or F_R_BO type F-block.
3. Interconnect the SD_R_xx inputs of the F_S_R or the SD_BO_xx inputs of the F_S_BO with the data to be transferred.
4. Interconnect the RD_R_xx outputs of the F_R_R or the RD_BO_xx outputs of the F_R_BO with the inputs of the F-block for further processing of the data received.
5. Interconnect the S_DB output of the send block with the S_DB input of the associated receive block.
6. Configure the TIMEOUT inputs of the F_R_R and F_R_BO receive blocks with the F-monitoring time calculated.
7. Configure the receive block substitute values for the scenario of a shutdown of the sending shutdown group.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Extract from a chart for shutdown group 1 with send block:

|42617|7ail-|7133 Cor|CHLDEA F|1e-0- Ck_INE|
|---|---|---|---|---|
|JdEO|90_8o_|J0_EO|90_BO|JD_Bo_|
|11_112|J0_EO_07|32_80_08|7193 Coz|CHLDEA|
|Q_EAII|4212 bloel|PaJJ_CX|0_Kod|ubSime|
|4nu|Lou|JG RG|P3c >| |

The connection to shutdown group 2 is established by linking output S_DB of block F_S_BO_1 in shutdown group 1 with input S_DB on block F_R_BO_1 in shutdown group 2.

Extract from a chart for shutdown group 2 with receive block:

|Xbaeha|32430|netr|
|---|---|---|
|314 = doxr|3281p|REC_E?|
|Recei|ER EL|RD_BO_|
|RD_BO_|8088Q_01|RD_EQ|
|RD_E?|302ZD|RD_Lo|

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

89

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.7 Data exchange between the F user program and standard user program

The standard program and the F-program use different data formats. Accordingly, special conversion blocks have to be used for data exchange.

F-CPU
F-program
Conversion blocks
Standard program
Converting F-data types to standard data types

If you need the standard user program to process data from the F-program further (for monitoring on the PCS 7 OS, for example), a block for F_FDatatype_Datatype data conversion will have to be interconnected in the user program so that the F-data types can be converted into standard data types. This converter blocks must be called in the standard user program (standard runtime group).

Extract from a process tag chart; converting the ""QBAD"" signal from F_BOOL to BOOL:

Note

The figure is available in its original size as appendix to the manual in the ZIP download of the checklists.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Standard and F-blocks are in different runtime groups. As shown here, some F-blocks have outputs (depicted in gray), which can be directly interconnected with standard PCS 7 blocks. PCS 7 blocks such as MonAnL, MonDiL, EventMESSAGE and their associated faceplates and process symbols are used to visualize fail-safe analog values and status messages as well as system states and operating states. If parameters cannot be directly further interconnected due to the safety data format, the conversion blocks described above can be used.

# Converting standard data types into F-data types

If data from the standard user program is to be processed further in the F-program, it will need to be converted. The blocks for data conversion from standard data types to F-data types (F_datatype_Fdatatype) can only be used in the F-program (F-runtime group).

Extract from an F-chart, conversion from REAL to F_REAL:

|7_R_FR_CONv|R -B|CE 32|CB39|:RELL|Aulci|
|---|---|---|---|---|---|
|DAII ZROC3?|VALUE DiT| | | | |

Note: The conversion blocks only perform data conversion; in other words, you will need to program additional measures in the F-program for plausibility checking purposes (with F_LIM_R, for example), in order to ensure that only non-hazardous values are possible.

# 7.2.8 How F-blocks with floating-point operations respond to number range overflows

Within the context of analog value processing, number range overflows/underflows can occur during arithmetic calculations (with division by 0, root from a negative number or number range overflow). With S7 F Systems Lib V1_3 and higher, the response is as follows in this case: The results ""Overflow (± infinite)"", ""Denormalized floating-point number"" or ""Invalid floating-point number (NaN)"" are:

- Either output at the output and can be processed further by subsequent F blocks
- Or signaled to special outputs. A substitute value is output if necessary.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

91

# Configuring the safety program

# 7.2 Creating the safety program

If the floating-point operation produces an invalid floating-point number (NaN) and no invalid floating-point number (NaN) existed as an address prior to this, the following diagnostics event will be entered in the F CPU's diagnostic buffer:

""Safety program: Invalid REAL number in DB"" (event ID 16#75D9)

You can use this entry in the diagnostic buffer to identify the F block with the invalid floating-point number (NaN).

If you are not able to prevent these events from occurring in your safety program, you will need to decide, on the basis of your application, whether you wish to respond to them in your safety program.

|AD?|nddie|101.o = 101.0_|10o.0|-10q|CUIL|5035|
|---|---|---|---|---|---|---|
|AD?|indoic|0b37 1.0e+3e|:Addle|0etz|3.0e-3e|10o.0|
| |100.0|3.0e-38| |CUIL|AD_|:itis|
|0837i|LIN_R|08371|#Addic|3402-32|c0m| |
| |ce-JE| |CUII|Sms|AD?|0BJ7i|
|Addue|J1o|~10O|02-J8|~100.0|CuTO|100.0=|
|DIV|LIK_R|:tris|100.0_| |100.-|CutQ|
|0.0|502S|SoRT|HXR|:Squo-|{AJi|hal|
|-10o.05|CVIQ|CUIL|5023_W| | | |

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.3 Configuring fail-safe AS-AS communication

You can use the F_LIM_R F block to check the result of a floating-point operation for overflow (± infinite) and invalid floating-point number (NaN).

- A limit violation is indicated by IN &gt; MAX or ""+ infinite"". ",How is the run sequence of F-blocks defined in the 'Compendium Part B - Process Safety (V9.0)'?,A5,"According to the manual, the CFC editor is used to define the run sequence, which influences the collective signature when adjusted.",1.296875,1.328125,3.203125,1.40625,0.5
10,pcs7_compendium_part_b_en-US_en-US.txt,37,5dea5c3b1bc7a2a2d3707ace8a7d6e3ed157196366f8ee88ba630fadc3d36b0e,"Changes to the input parameters of F blocks with F data types can be made as follows:

- Offline with the assistance of the CFC editor
- Online using CFC test mode with safety mode deactivated

Note

Values of PAR_ID and COMPLEM must not be changed. If errors in the safety data format are detected during the execution of the safety program, an F-STOP is triggered.

# 7.2.4 Run sequence of F-blocks

# Defining the run sequence

You define the run sequence in the CFC editor in the same way as for a standard user program. Changing the run sequence also changes the collective signature.

# Correct run sequence of F-blocks

The sequence of the F-blocks within the F-shutdown group is relevant. The number of F-runtime groups the F-shutdown group has been split into is of no relevance. Essentially, the correct run sequence of the various F-block types is as follows:

1. Placed automatically:
- F module driver for F-signal modules with inputs or with inputs and outputs
- F-communications blocks and F-system blocks for receiving
- F blocks for data conversion from standard value to F-structure
- F modules with OS connection
2. F channel drivers for inputs
3. F blocks for user logic

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

1. F channel drivers for outputs
2. Placed automatically:
- F block F_PLK
- F block F_PSG_M
- F module driver for F-signal modules with outputs or with inputs and outputs
- F-communications blocks and F-system blocks for sending
- F block F_PLK_O
- F block F_DIAG (S7 F-Systems Lib V1_3 and higher)

The run sequence of the blocks listed under items 1 and 5 is adjusted automatically when the F-program is compiled.
As if S7 F Systems Lib V1_3, separate runtime groups are created for the F blocks listed under points 1 and 5 during the first compilation.
The IPO principle (input, process, output) must always be observed when placing F-channel drivers and F-blocks for user logic.
This ensures that all inputs are read first, the relevant processing steps are performed, and all outputs are then written.
Furthermore, F-runtime groups and F-monitoring blocks that are only visible following compilation are also added automatically.

Note

No changes may be made in the automatically added runtime groups with the exception of the scan cycle monitoring on ""F_CYC_CO"" blocks and the parameter assignment of the ""F_SHUTDN"" block.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.5 F-runtime groups

During the programming of the safety program, F-blocks cannot be inserted directly into tasks (cyclic interrupt OBs). When a new CFC chart is created in PCS 7, the system will automatically generate a runtime group of the same name, into which the F-blocks placed in the corresponding CFC chart can then be inserted. An F-runtime group only becomes an F-runtime group (identified by a yellow folder and ""F"") when F-blocks are called in it.

0B37 [Cyclic interrupt7] (300 ms)
@CPU_RTI@CPU_RT
@F_ShutDn_37 (300 ms)
@F_ShutDn (300 ms)
CycCo-QB37 (300 ms)
CycCo-OB3ZIF_CYC_CO-OB37
@F_CycCo-OB3ZIF_TEST
@F_CycCo-OB37IF_TESTC
@F_TestMode (300 ms)
@F_IN_37_0 (300 ms)
SFC_109_F (300 ms)
AI_F (300 ms)
HS104_F (300 ms)
@F_OUT_37_0 (300 ms)
@F_DbIniti (300 ms)
0B38 [Cycic interrupta] (10 ms)

# Runtime groups of an F-program

The F-program is divided into several runtime groups, as shown in the table below.

Note

xx = Number of the cyclic interrupt OB

y = Consecutive numbering if several shutdown groups exist in a single cyclic interrupt OB

|Chart|F blocks|
|---|---|
|@F_ShutDn_xx|Shutdown logic of cyclic interrupt OB The shutdown logic is created with RTGLOGIC and standard logic blocks.|
|@F_ShutDn|Shutdown block Where an F-program is present in several cyclic interrupt OBs, this runtime group is integrated into the cyclic interrupt OB with the shortest call time. The shutdown logic is created with F_SHUTDN, RTGLOGIC, and standard logic blocks.|
|@F_CycCo-OBxx|F_CYC_CO, F_TEST and F_TESTC (for tests)|
|@F_TestMode|F_TESTM for managing safety mode|
|@F_IN_xx_y|F blocks which supply input values for the F-program (F_QUITES, communication receive blocks, conversion blocks from standard to F-data types, drivers for F-input modules) Runtime groups with user logic, in the sequence in which they were created by the user|

Compendium Part B - Process Safety (V9.0)
Operating Manual, 04/2018, A5E43228905-AA

# 7.2 Creating the safety program

@F_OUT_xx_y Blocks which further process output values of F-blocks (communication send blocks, conversion blocks from F-to standard data types, drivers for F-output modules, F_PLK, F_PLK_O, and F_DIAG for program sequence control)

@F_DbInitxx DB_INIT function block required for the cold restart of an F-runtime group

All required error OBs are added to the block container in the SIMATIC Manager.

There should only be one @F_IN_xx_y runtime group before the first F-user runtime group and one @F_OUT_xx_y runtime group after the last F-user runtime group. If the safety program consists of several shutdown groups (see section 6.2.6 (Page 87)), there is the @F_IN_xx_y and @F_OUT_xx_y runtime group both before and after the F-user runtime group in the shutdown groups.

# Rules for F-runtime groups in the safety program

- We recommend that you proceed as follows in order to make the lengths of the F-cycles as uniform as possible:
If you mix F-and standard runtime groups in a cyclic interrupt OB, you must execute the F-runtime groups before the standard runtime groups.
- The following defaults are set for properties of an F-runtime group:
- Reduction ratio = 1
- Phase offset = 0
- Properties Runtime Group
- Task: 0B37
- Name: HS104
- Comment:
- Reduction ratio:
- Phase offset:
- Optimize run sequence
- Active:
- You are not permitted to move automatically generated F-runtime groups (identified by @).

Note: The feature: Optimize Run Sequence in CFC can lead to a change in the collective signature and impair the response times of the safety program, and therefore should not be used in F-runtime groups.

With PCS 7 V7.0 SP1 and higher, it is no longer possible to optimize the run sequence for cyclic interrupt OBs with F-runtime groups.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.6 F-shutdown groups

An F-shutdown group is a self-contained unit in your safety program. It contains user logic which is executed or shut down simultaneously. The F-shutdown group contains one or a number of F-runtime groups which are assigned to a common cyclic interrupt OB. You can choose whether an error during execution of the safety program causes a full shutdown or a partial shutdown of the safety program. With a partial shutdown, only the F-shutdown group in which the error occurred is shut down.

# Rules for F-shutdown groups in the safety program

You are not permitted to directly interconnect F-blocks in different F-shutdown groups. Data can only be exchanged between F-shutdown groups using special communication blocks (F_S_xx, F_R_xx for F_BOOL and F_REAL data structures). Therefore, all F-channel drivers in an F-signal module must be in the same F-shutdown group, together with the module driver of the F-signal module.

# Defining F-shutdown groups

As soon as you place F-blocks in the CFC editor for the first time, all of the F-runtime groups in a single cyclic interrupt OB will form an F-shutdown group. You can configure each F-runtime group as the last F-runtime group in an F-shutdown group by placing the F_PSG_M ""selection block"". The F-system then creates a new F-shutdown group for all subsequent F-runtime groups until another F_PSG_M block is found.

# Distribution/Combination by means of manual placing of F_PSG_M

If you add or delete one or a number of F_PSG_M blocks in your project, the order of your F-shutdown groups will change. If you make a change to the layout of your F-shutdown groups, you must make sure that the F-module drivers and all assigned F-channel drivers are integrated in the same F-shutdown group. You can split one F-shutdown group into two F-shutdown groups. To do this, in the CFC editor's runtime editor, place the F_PSG_M block in the last F-runtime group which is to be assigned to the first F-shutdown group. All subsequent F-runtime groups will then be assigned to the second F-shutdown group. The number of F-shutdown groups is limited to 110 in all cyclic interrupt OBs. The system restricts the number of F-runtime groups in an F-shutdown group. You have the option of combining two F-shutdown groups. To do this, in the runtime editor of the CFC editor, delete the F_PSG_M block between the F-shutdown groups. If you combine a number of F-shutdown groups which exchange data via F-communication blocks in a single F-shutdown group, you need to remove these F-communications blocks and replace them with direct interconnections.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# Programming data exchange between F-shutdown groups

If you wish to exchange data between two F-shutdown groups, you are not permitted to interconnect the inputs and outputs directly. You need to use the following F-system blocks for data exchange between F blocks in different F-shutdown groups:

|F block|Description|
|---|---|
|F_S_R/F_R_R|Safe transfer of 5 data of the F_REAL type|
|F_S_BO/F_R_BO|Safe transfer of 5 data of the F_BOOL type|

# Procedure for data exchange

1. In the F-shutdown group from which data is to be transferred, add an F_S_R or F_S_BO type F-block.
2. In the F-shutdown group to which data is to be transferred, add an F_R_R or F_R_BO type F-block.
3. Interconnect the SD_R_xx inputs of the F_S_R or the SD_BO_xx inputs of the F_S_BO with the data to be transferred.
4. Interconnect the RD_R_xx outputs of the F_R_R or the RD_BO_xx outputs of the F_R_BO with the inputs of the F-block for further processing of the data received.
5. Interconnect the S_DB output of the send block with the S_DB input of the associated receive block.
6. Configure the TIMEOUT inputs of the F_R_R and F_R_BO receive blocks with the F-monitoring time calculated.
7. Configure the receive block substitute values for the scenario of a shutdown of the sending shutdown group.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Extract from a chart for shutdown group 1 with send block:

|42617|7ail-|7133 Cor|CHLDEA F|1e-0- Ck_INE|
|---|---|---|---|---|
|JdEO|90_8o_|J0_EO|90_BO|JD_Bo_|
|11_112|J0_EO_07|32_80_08|7193 Coz|CHLDEA|
|Q_EAII|4212 bloel|PaJJ_CX|0_Kod|ubSime|
|4nu|Lou|JG RG|P3c >| |

The connection to shutdown group 2 is established by linking output S_DB of block F_S_BO_1 in shutdown group 1 with input S_DB on block F_R_BO_1 in shutdown group 2.

Extract from a chart for shutdown group 2 with receive block:

|Xbaeha|32430|netr|
|---|---|---|
|314 = doxr|3281p|REC_E?|
|Recei|ER EL|RD_BO_|
|RD_BO_|8088Q_01|RD_EQ|
|RD_E?|302ZD|RD_Lo|

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

89

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.7 Data exchange between the F user program and standard user program

The standard program and the F-program use different data formats. Accordingly, special conversion blocks have to be used for data exchange.

F-CPU
F-program
Conversion blocks
Standard program
Converting F-data types to standard data types

If you need the standard user program to process data from the F-program further (for monitoring on the PCS 7 OS, for example), a block for F_FDatatype_Datatype data conversion will have to be interconnected in the user program so that the F-data types can be converted into standard data types. This converter blocks must be called in the standard user program (standard runtime group).

Extract from a process tag chart; converting the ""QBAD"" signal from F_BOOL to BOOL:

Note

The figure is available in its original size as appendix to the manual in the ZIP download of the checklists.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Standard and F-blocks are in different runtime groups. As shown here, some F-blocks have outputs (depicted in gray), which can be directly interconnected with standard PCS 7 blocks. PCS 7 blocks such as MonAnL, MonDiL, EventMESSAGE and their associated faceplates and process symbols are used to visualize fail-safe analog values and status messages as well as system states and operating states. If parameters cannot be directly further interconnected due to the safety data format, the conversion blocks described above can be used.

# Converting standard data types into F-data types

If data from the standard user program is to be processed further in the F-program, it will need to be converted. The blocks for data conversion from standard data types to F-data types (F_datatype_Fdatatype) can only be used in the F-program (F-runtime group).

Extract from an F-chart, conversion from REAL to F_REAL:

|7_R_FR_CONv|R -B|CE 32|CB39|:RELL|Aulci|
|---|---|---|---|---|---|
|DAII ZROC3?|VALUE DiT| | | | |

Note: The conversion blocks only perform data conversion; in other words, you will need to program additional measures in the F-program for plausibility checking purposes (with F_LIM_R, for example), in order to ensure that only non-hazardous values are possible.

# 7.2.8 How F-blocks with floating-point operations respond to number range overflows

Within the context of analog value processing, number range overflows/underflows can occur during arithmetic calculations (with division by 0, root from a negative number or number range overflow). With S7 F Systems Lib V1_3 and higher, the response is as follows in this case: The results ""Overflow (± infinite)"", ""Denormalized floating-point number"" or ""Invalid floating-point number (NaN)"" are:

- Either output at the output and can be processed further by subsequent F blocks
- Or signaled to special outputs. A substitute value is output if necessary.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

91

# Configuring the safety program

# 7.2 Creating the safety program

If the floating-point operation produces an invalid floating-point number (NaN) and no invalid floating-point number (NaN) existed as an address prior to this, the following diagnostics event will be entered in the F CPU's diagnostic buffer:

""Safety program: Invalid REAL number in DB"" (event ID 16#75D9)

You can use this entry in the diagnostic buffer to identify the F block with the invalid floating-point number (NaN).

If you are not able to prevent these events from occurring in your safety program, you will need to decide, on the basis of your application, whether you wish to respond to them in your safety program.

|AD?|nddie|101.o = 101.0_|10o.0|-10q|CUIL|5035|
|---|---|---|---|---|---|---|
|AD?|indoic|0b37 1.0e+3e|:Addle|0etz|3.0e-3e|10o.0|
| |100.0|3.0e-38| |CUIL|AD_|:itis|
|0837i|LIN_R|08371|#Addic|3402-32|c0m| |
| |ce-JE| |CUII|Sms|AD?|0BJ7i|
|Addue|J1o|~10O|02-J8|~100.0|CuTO|100.0=|
|DIV|LIK_R|:tris|100.0_| |100.-|CutQ|
|0.0|502S|SoRT|HXR|:Squo-|{AJi|hal|
|-10o.05|CVIQ|CUIL|5023_W| | | |

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.3 Configuring fail-safe AS-AS communication

You can use the F_LIM_R F block to check the result of a floating-point operation for overflow (± infinite) and invalid floating-point number (NaN).

- A limit violation is indicated by IN &gt; MAX or ""+ infinite"". ",What are the rules for F-runtime groups in the safety program according to the 'Compendium Part B - Process Safety (V9.0)'?,A1,"F-runtime groups should be executed before standard runtime groups if mixed in a cyclic interrupt OB, with defaults set for properties like reduction ratio and phase offset, and automatically generated F-runtime groups cannot be moved.",1.8984375,2.078125,3.515625,1.71875,0.70703125
11,pcs7_compendium_part_b_en-US_en-US.txt,37,5dea5c3b1bc7a2a2d3707ace8a7d6e3ed157196366f8ee88ba630fadc3d36b0e,"Changes to the input parameters of F blocks with F data types can be made as follows:

- Offline with the assistance of the CFC editor
- Online using CFC test mode with safety mode deactivated

Note

Values of PAR_ID and COMPLEM must not be changed. If errors in the safety data format are detected during the execution of the safety program, an F-STOP is triggered.

# 7.2.4 Run sequence of F-blocks

# Defining the run sequence

You define the run sequence in the CFC editor in the same way as for a standard user program. Changing the run sequence also changes the collective signature.

# Correct run sequence of F-blocks

The sequence of the F-blocks within the F-shutdown group is relevant. The number of F-runtime groups the F-shutdown group has been split into is of no relevance. Essentially, the correct run sequence of the various F-block types is as follows:

1. Placed automatically:
- F module driver for F-signal modules with inputs or with inputs and outputs
- F-communications blocks and F-system blocks for receiving
- F blocks for data conversion from standard value to F-structure
- F modules with OS connection
2. F channel drivers for inputs
3. F blocks for user logic

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

1. F channel drivers for outputs
2. Placed automatically:
- F block F_PLK
- F block F_PSG_M
- F module driver for F-signal modules with outputs or with inputs and outputs
- F-communications blocks and F-system blocks for sending
- F block F_PLK_O
- F block F_DIAG (S7 F-Systems Lib V1_3 and higher)

The run sequence of the blocks listed under items 1 and 5 is adjusted automatically when the F-program is compiled.
As if S7 F Systems Lib V1_3, separate runtime groups are created for the F blocks listed under points 1 and 5 during the first compilation.
The IPO principle (input, process, output) must always be observed when placing F-channel drivers and F-blocks for user logic.
This ensures that all inputs are read first, the relevant processing steps are performed, and all outputs are then written.
Furthermore, F-runtime groups and F-monitoring blocks that are only visible following compilation are also added automatically.

Note

No changes may be made in the automatically added runtime groups with the exception of the scan cycle monitoring on ""F_CYC_CO"" blocks and the parameter assignment of the ""F_SHUTDN"" block.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.5 F-runtime groups

During the programming of the safety program, F-blocks cannot be inserted directly into tasks (cyclic interrupt OBs). When a new CFC chart is created in PCS 7, the system will automatically generate a runtime group of the same name, into which the F-blocks placed in the corresponding CFC chart can then be inserted. An F-runtime group only becomes an F-runtime group (identified by a yellow folder and ""F"") when F-blocks are called in it.

0B37 [Cyclic interrupt7] (300 ms)
@CPU_RTI@CPU_RT
@F_ShutDn_37 (300 ms)
@F_ShutDn (300 ms)
CycCo-QB37 (300 ms)
CycCo-OB3ZIF_CYC_CO-OB37
@F_CycCo-OB3ZIF_TEST
@F_CycCo-OB37IF_TESTC
@F_TestMode (300 ms)
@F_IN_37_0 (300 ms)
SFC_109_F (300 ms)
AI_F (300 ms)
HS104_F (300 ms)
@F_OUT_37_0 (300 ms)
@F_DbIniti (300 ms)
0B38 [Cycic interrupta] (10 ms)

# Runtime groups of an F-program

The F-program is divided into several runtime groups, as shown in the table below.

Note

xx = Number of the cyclic interrupt OB

y = Consecutive numbering if several shutdown groups exist in a single cyclic interrupt OB

|Chart|F blocks|
|---|---|
|@F_ShutDn_xx|Shutdown logic of cyclic interrupt OB The shutdown logic is created with RTGLOGIC and standard logic blocks.|
|@F_ShutDn|Shutdown block Where an F-program is present in several cyclic interrupt OBs, this runtime group is integrated into the cyclic interrupt OB with the shortest call time. The shutdown logic is created with F_SHUTDN, RTGLOGIC, and standard logic blocks.|
|@F_CycCo-OBxx|F_CYC_CO, F_TEST and F_TESTC (for tests)|
|@F_TestMode|F_TESTM for managing safety mode|
|@F_IN_xx_y|F blocks which supply input values for the F-program (F_QUITES, communication receive blocks, conversion blocks from standard to F-data types, drivers for F-input modules) Runtime groups with user logic, in the sequence in which they were created by the user|

Compendium Part B - Process Safety (V9.0)
Operating Manual, 04/2018, A5E43228905-AA

# 7.2 Creating the safety program

@F_OUT_xx_y Blocks which further process output values of F-blocks (communication send blocks, conversion blocks from F-to standard data types, drivers for F-output modules, F_PLK, F_PLK_O, and F_DIAG for program sequence control)

@F_DbInitxx DB_INIT function block required for the cold restart of an F-runtime group

All required error OBs are added to the block container in the SIMATIC Manager.

There should only be one @F_IN_xx_y runtime group before the first F-user runtime group and one @F_OUT_xx_y runtime group after the last F-user runtime group. If the safety program consists of several shutdown groups (see section 6.2.6 (Page 87)), there is the @F_IN_xx_y and @F_OUT_xx_y runtime group both before and after the F-user runtime group in the shutdown groups.

# Rules for F-runtime groups in the safety program

- We recommend that you proceed as follows in order to make the lengths of the F-cycles as uniform as possible:
If you mix F-and standard runtime groups in a cyclic interrupt OB, you must execute the F-runtime groups before the standard runtime groups.
- The following defaults are set for properties of an F-runtime group:
- Reduction ratio = 1
- Phase offset = 0
- Properties Runtime Group
- Task: 0B37
- Name: HS104
- Comment:
- Reduction ratio:
- Phase offset:
- Optimize run sequence
- Active:
- You are not permitted to move automatically generated F-runtime groups (identified by @).

Note: The feature: Optimize Run Sequence in CFC can lead to a change in the collective signature and impair the response times of the safety program, and therefore should not be used in F-runtime groups.

With PCS 7 V7.0 SP1 and higher, it is no longer possible to optimize the run sequence for cyclic interrupt OBs with F-runtime groups.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.6 F-shutdown groups

An F-shutdown group is a self-contained unit in your safety program. It contains user logic which is executed or shut down simultaneously. The F-shutdown group contains one or a number of F-runtime groups which are assigned to a common cyclic interrupt OB. You can choose whether an error during execution of the safety program causes a full shutdown or a partial shutdown of the safety program. With a partial shutdown, only the F-shutdown group in which the error occurred is shut down.

# Rules for F-shutdown groups in the safety program

You are not permitted to directly interconnect F-blocks in different F-shutdown groups. Data can only be exchanged between F-shutdown groups using special communication blocks (F_S_xx, F_R_xx for F_BOOL and F_REAL data structures). Therefore, all F-channel drivers in an F-signal module must be in the same F-shutdown group, together with the module driver of the F-signal module.

# Defining F-shutdown groups

As soon as you place F-blocks in the CFC editor for the first time, all of the F-runtime groups in a single cyclic interrupt OB will form an F-shutdown group. You can configure each F-runtime group as the last F-runtime group in an F-shutdown group by placing the F_PSG_M ""selection block"". The F-system then creates a new F-shutdown group for all subsequent F-runtime groups until another F_PSG_M block is found.

# Distribution/Combination by means of manual placing of F_PSG_M

If you add or delete one or a number of F_PSG_M blocks in your project, the order of your F-shutdown groups will change. If you make a change to the layout of your F-shutdown groups, you must make sure that the F-module drivers and all assigned F-channel drivers are integrated in the same F-shutdown group. You can split one F-shutdown group into two F-shutdown groups. To do this, in the CFC editor's runtime editor, place the F_PSG_M block in the last F-runtime group which is to be assigned to the first F-shutdown group. All subsequent F-runtime groups will then be assigned to the second F-shutdown group. The number of F-shutdown groups is limited to 110 in all cyclic interrupt OBs. The system restricts the number of F-runtime groups in an F-shutdown group. You have the option of combining two F-shutdown groups. To do this, in the runtime editor of the CFC editor, delete the F_PSG_M block between the F-shutdown groups. If you combine a number of F-shutdown groups which exchange data via F-communication blocks in a single F-shutdown group, you need to remove these F-communications blocks and replace them with direct interconnections.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# Programming data exchange between F-shutdown groups

If you wish to exchange data between two F-shutdown groups, you are not permitted to interconnect the inputs and outputs directly. You need to use the following F-system blocks for data exchange between F blocks in different F-shutdown groups:

|F block|Description|
|---|---|
|F_S_R/F_R_R|Safe transfer of 5 data of the F_REAL type|
|F_S_BO/F_R_BO|Safe transfer of 5 data of the F_BOOL type|

# Procedure for data exchange

1. In the F-shutdown group from which data is to be transferred, add an F_S_R or F_S_BO type F-block.
2. In the F-shutdown group to which data is to be transferred, add an F_R_R or F_R_BO type F-block.
3. Interconnect the SD_R_xx inputs of the F_S_R or the SD_BO_xx inputs of the F_S_BO with the data to be transferred.
4. Interconnect the RD_R_xx outputs of the F_R_R or the RD_BO_xx outputs of the F_R_BO with the inputs of the F-block for further processing of the data received.
5. Interconnect the S_DB output of the send block with the S_DB input of the associated receive block.
6. Configure the TIMEOUT inputs of the F_R_R and F_R_BO receive blocks with the F-monitoring time calculated.
7. Configure the receive block substitute values for the scenario of a shutdown of the sending shutdown group.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Extract from a chart for shutdown group 1 with send block:

|42617|7ail-|7133 Cor|CHLDEA F|1e-0- Ck_INE|
|---|---|---|---|---|
|JdEO|90_8o_|J0_EO|90_BO|JD_Bo_|
|11_112|J0_EO_07|32_80_08|7193 Coz|CHLDEA|
|Q_EAII|4212 bloel|PaJJ_CX|0_Kod|ubSime|
|4nu|Lou|JG RG|P3c >| |

The connection to shutdown group 2 is established by linking output S_DB of block F_S_BO_1 in shutdown group 1 with input S_DB on block F_R_BO_1 in shutdown group 2.

Extract from a chart for shutdown group 2 with receive block:

|Xbaeha|32430|netr|
|---|---|---|
|314 = doxr|3281p|REC_E?|
|Recei|ER EL|RD_BO_|
|RD_BO_|8088Q_01|RD_EQ|
|RD_E?|302ZD|RD_Lo|

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

89

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.7 Data exchange between the F user program and standard user program

The standard program and the F-program use different data formats. Accordingly, special conversion blocks have to be used for data exchange.

F-CPU
F-program
Conversion blocks
Standard program
Converting F-data types to standard data types

If you need the standard user program to process data from the F-program further (for monitoring on the PCS 7 OS, for example), a block for F_FDatatype_Datatype data conversion will have to be interconnected in the user program so that the F-data types can be converted into standard data types. This converter blocks must be called in the standard user program (standard runtime group).

Extract from a process tag chart; converting the ""QBAD"" signal from F_BOOL to BOOL:

Note

The figure is available in its original size as appendix to the manual in the ZIP download of the checklists.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Standard and F-blocks are in different runtime groups. As shown here, some F-blocks have outputs (depicted in gray), which can be directly interconnected with standard PCS 7 blocks. PCS 7 blocks such as MonAnL, MonDiL, EventMESSAGE and their associated faceplates and process symbols are used to visualize fail-safe analog values and status messages as well as system states and operating states. If parameters cannot be directly further interconnected due to the safety data format, the conversion blocks described above can be used.

# Converting standard data types into F-data types

If data from the standard user program is to be processed further in the F-program, it will need to be converted. The blocks for data conversion from standard data types to F-data types (F_datatype_Fdatatype) can only be used in the F-program (F-runtime group).

Extract from an F-chart, conversion from REAL to F_REAL:

|7_R_FR_CONv|R -B|CE 32|CB39|:RELL|Aulci|
|---|---|---|---|---|---|
|DAII ZROC3?|VALUE DiT| | | | |

Note: The conversion blocks only perform data conversion; in other words, you will need to program additional measures in the F-program for plausibility checking purposes (with F_LIM_R, for example), in order to ensure that only non-hazardous values are possible.

# 7.2.8 How F-blocks with floating-point operations respond to number range overflows

Within the context of analog value processing, number range overflows/underflows can occur during arithmetic calculations (with division by 0, root from a negative number or number range overflow). With S7 F Systems Lib V1_3 and higher, the response is as follows in this case: The results ""Overflow (± infinite)"", ""Denormalized floating-point number"" or ""Invalid floating-point number (NaN)"" are:

- Either output at the output and can be processed further by subsequent F blocks
- Or signaled to special outputs. A substitute value is output if necessary.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

91

# Configuring the safety program

# 7.2 Creating the safety program

If the floating-point operation produces an invalid floating-point number (NaN) and no invalid floating-point number (NaN) existed as an address prior to this, the following diagnostics event will be entered in the F CPU's diagnostic buffer:

""Safety program: Invalid REAL number in DB"" (event ID 16#75D9)

You can use this entry in the diagnostic buffer to identify the F block with the invalid floating-point number (NaN).

If you are not able to prevent these events from occurring in your safety program, you will need to decide, on the basis of your application, whether you wish to respond to them in your safety program.

|AD?|nddie|101.o = 101.0_|10o.0|-10q|CUIL|5035|
|---|---|---|---|---|---|---|
|AD?|indoic|0b37 1.0e+3e|:Addle|0etz|3.0e-3e|10o.0|
| |100.0|3.0e-38| |CUIL|AD_|:itis|
|0837i|LIN_R|08371|#Addic|3402-32|c0m| |
| |ce-JE| |CUII|Sms|AD?|0BJ7i|
|Addue|J1o|~10O|02-J8|~100.0|CuTO|100.0=|
|DIV|LIK_R|:tris|100.0_| |100.-|CutQ|
|0.0|502S|SoRT|HXR|:Squo-|{AJi|hal|
|-10o.05|CVIQ|CUIL|5023_W| | | |

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.3 Configuring fail-safe AS-AS communication

You can use the F_LIM_R F block to check the result of a floating-point operation for overflow (± infinite) and invalid floating-point number (NaN).

- A limit violation is indicated by IN &gt; MAX or ""+ infinite"". ",What are the rules for F-runtime groups in the safety program according to the 'Compendium Part B - Process Safety (V9.0)'?,A2,"When mixed with standard groups, F-runtime groups must precede them, have specific defaults, and cannot be relocated if automatically generated.",1.4453125,1.4921875,3.359375,1.3125,0.37109375
12,pcs7_compendium_part_b_en-US_en-US.txt,37,5dea5c3b1bc7a2a2d3707ace8a7d6e3ed157196366f8ee88ba630fadc3d36b0e,"Changes to the input parameters of F blocks with F data types can be made as follows:

- Offline with the assistance of the CFC editor
- Online using CFC test mode with safety mode deactivated

Note

Values of PAR_ID and COMPLEM must not be changed. If errors in the safety data format are detected during the execution of the safety program, an F-STOP is triggered.

# 7.2.4 Run sequence of F-blocks

# Defining the run sequence

You define the run sequence in the CFC editor in the same way as for a standard user program. Changing the run sequence also changes the collective signature.

# Correct run sequence of F-blocks

The sequence of the F-blocks within the F-shutdown group is relevant. The number of F-runtime groups the F-shutdown group has been split into is of no relevance. Essentially, the correct run sequence of the various F-block types is as follows:

1. Placed automatically:
- F module driver for F-signal modules with inputs or with inputs and outputs
- F-communications blocks and F-system blocks for receiving
- F blocks for data conversion from standard value to F-structure
- F modules with OS connection
2. F channel drivers for inputs
3. F blocks for user logic

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

1. F channel drivers for outputs
2. Placed automatically:
- F block F_PLK
- F block F_PSG_M
- F module driver for F-signal modules with outputs or with inputs and outputs
- F-communications blocks and F-system blocks for sending
- F block F_PLK_O
- F block F_DIAG (S7 F-Systems Lib V1_3 and higher)

The run sequence of the blocks listed under items 1 and 5 is adjusted automatically when the F-program is compiled.
As if S7 F Systems Lib V1_3, separate runtime groups are created for the F blocks listed under points 1 and 5 during the first compilation.
The IPO principle (input, process, output) must always be observed when placing F-channel drivers and F-blocks for user logic.
This ensures that all inputs are read first, the relevant processing steps are performed, and all outputs are then written.
Furthermore, F-runtime groups and F-monitoring blocks that are only visible following compilation are also added automatically.

Note

No changes may be made in the automatically added runtime groups with the exception of the scan cycle monitoring on ""F_CYC_CO"" blocks and the parameter assignment of the ""F_SHUTDN"" block.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.5 F-runtime groups

During the programming of the safety program, F-blocks cannot be inserted directly into tasks (cyclic interrupt OBs). When a new CFC chart is created in PCS 7, the system will automatically generate a runtime group of the same name, into which the F-blocks placed in the corresponding CFC chart can then be inserted. An F-runtime group only becomes an F-runtime group (identified by a yellow folder and ""F"") when F-blocks are called in it.

0B37 [Cyclic interrupt7] (300 ms)
@CPU_RTI@CPU_RT
@F_ShutDn_37 (300 ms)
@F_ShutDn (300 ms)
CycCo-QB37 (300 ms)
CycCo-OB3ZIF_CYC_CO-OB37
@F_CycCo-OB3ZIF_TEST
@F_CycCo-OB37IF_TESTC
@F_TestMode (300 ms)
@F_IN_37_0 (300 ms)
SFC_109_F (300 ms)
AI_F (300 ms)
HS104_F (300 ms)
@F_OUT_37_0 (300 ms)
@F_DbIniti (300 ms)
0B38 [Cycic interrupta] (10 ms)

# Runtime groups of an F-program

The F-program is divided into several runtime groups, as shown in the table below.

Note

xx = Number of the cyclic interrupt OB

y = Consecutive numbering if several shutdown groups exist in a single cyclic interrupt OB

|Chart|F blocks|
|---|---|
|@F_ShutDn_xx|Shutdown logic of cyclic interrupt OB The shutdown logic is created with RTGLOGIC and standard logic blocks.|
|@F_ShutDn|Shutdown block Where an F-program is present in several cyclic interrupt OBs, this runtime group is integrated into the cyclic interrupt OB with the shortest call time. The shutdown logic is created with F_SHUTDN, RTGLOGIC, and standard logic blocks.|
|@F_CycCo-OBxx|F_CYC_CO, F_TEST and F_TESTC (for tests)|
|@F_TestMode|F_TESTM for managing safety mode|
|@F_IN_xx_y|F blocks which supply input values for the F-program (F_QUITES, communication receive blocks, conversion blocks from standard to F-data types, drivers for F-input modules) Runtime groups with user logic, in the sequence in which they were created by the user|

Compendium Part B - Process Safety (V9.0)
Operating Manual, 04/2018, A5E43228905-AA

# 7.2 Creating the safety program

@F_OUT_xx_y Blocks which further process output values of F-blocks (communication send blocks, conversion blocks from F-to standard data types, drivers for F-output modules, F_PLK, F_PLK_O, and F_DIAG for program sequence control)

@F_DbInitxx DB_INIT function block required for the cold restart of an F-runtime group

All required error OBs are added to the block container in the SIMATIC Manager.

There should only be one @F_IN_xx_y runtime group before the first F-user runtime group and one @F_OUT_xx_y runtime group after the last F-user runtime group. If the safety program consists of several shutdown groups (see section 6.2.6 (Page 87)), there is the @F_IN_xx_y and @F_OUT_xx_y runtime group both before and after the F-user runtime group in the shutdown groups.

# Rules for F-runtime groups in the safety program

- We recommend that you proceed as follows in order to make the lengths of the F-cycles as uniform as possible:
If you mix F-and standard runtime groups in a cyclic interrupt OB, you must execute the F-runtime groups before the standard runtime groups.
- The following defaults are set for properties of an F-runtime group:
- Reduction ratio = 1
- Phase offset = 0
- Properties Runtime Group
- Task: 0B37
- Name: HS104
- Comment:
- Reduction ratio:
- Phase offset:
- Optimize run sequence
- Active:
- You are not permitted to move automatically generated F-runtime groups (identified by @).

Note: The feature: Optimize Run Sequence in CFC can lead to a change in the collective signature and impair the response times of the safety program, and therefore should not be used in F-runtime groups.

With PCS 7 V7.0 SP1 and higher, it is no longer possible to optimize the run sequence for cyclic interrupt OBs with F-runtime groups.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.6 F-shutdown groups

An F-shutdown group is a self-contained unit in your safety program. It contains user logic which is executed or shut down simultaneously. The F-shutdown group contains one or a number of F-runtime groups which are assigned to a common cyclic interrupt OB. You can choose whether an error during execution of the safety program causes a full shutdown or a partial shutdown of the safety program. With a partial shutdown, only the F-shutdown group in which the error occurred is shut down.

# Rules for F-shutdown groups in the safety program

You are not permitted to directly interconnect F-blocks in different F-shutdown groups. Data can only be exchanged between F-shutdown groups using special communication blocks (F_S_xx, F_R_xx for F_BOOL and F_REAL data structures). Therefore, all F-channel drivers in an F-signal module must be in the same F-shutdown group, together with the module driver of the F-signal module.

# Defining F-shutdown groups

As soon as you place F-blocks in the CFC editor for the first time, all of the F-runtime groups in a single cyclic interrupt OB will form an F-shutdown group. You can configure each F-runtime group as the last F-runtime group in an F-shutdown group by placing the F_PSG_M ""selection block"". The F-system then creates a new F-shutdown group for all subsequent F-runtime groups until another F_PSG_M block is found.

# Distribution/Combination by means of manual placing of F_PSG_M

If you add or delete one or a number of F_PSG_M blocks in your project, the order of your F-shutdown groups will change. If you make a change to the layout of your F-shutdown groups, you must make sure that the F-module drivers and all assigned F-channel drivers are integrated in the same F-shutdown group. You can split one F-shutdown group into two F-shutdown groups. To do this, in the CFC editor's runtime editor, place the F_PSG_M block in the last F-runtime group which is to be assigned to the first F-shutdown group. All subsequent F-runtime groups will then be assigned to the second F-shutdown group. The number of F-shutdown groups is limited to 110 in all cyclic interrupt OBs. The system restricts the number of F-runtime groups in an F-shutdown group. You have the option of combining two F-shutdown groups. To do this, in the runtime editor of the CFC editor, delete the F_PSG_M block between the F-shutdown groups. If you combine a number of F-shutdown groups which exchange data via F-communication blocks in a single F-shutdown group, you need to remove these F-communications blocks and replace them with direct interconnections.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# Programming data exchange between F-shutdown groups

If you wish to exchange data between two F-shutdown groups, you are not permitted to interconnect the inputs and outputs directly. You need to use the following F-system blocks for data exchange between F blocks in different F-shutdown groups:

|F block|Description|
|---|---|
|F_S_R/F_R_R|Safe transfer of 5 data of the F_REAL type|
|F_S_BO/F_R_BO|Safe transfer of 5 data of the F_BOOL type|

# Procedure for data exchange

1. In the F-shutdown group from which data is to be transferred, add an F_S_R or F_S_BO type F-block.
2. In the F-shutdown group to which data is to be transferred, add an F_R_R or F_R_BO type F-block.
3. Interconnect the SD_R_xx inputs of the F_S_R or the SD_BO_xx inputs of the F_S_BO with the data to be transferred.
4. Interconnect the RD_R_xx outputs of the F_R_R or the RD_BO_xx outputs of the F_R_BO with the inputs of the F-block for further processing of the data received.
5. Interconnect the S_DB output of the send block with the S_DB input of the associated receive block.
6. Configure the TIMEOUT inputs of the F_R_R and F_R_BO receive blocks with the F-monitoring time calculated.
7. Configure the receive block substitute values for the scenario of a shutdown of the sending shutdown group.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Extract from a chart for shutdown group 1 with send block:

|42617|7ail-|7133 Cor|CHLDEA F|1e-0- Ck_INE|
|---|---|---|---|---|
|JdEO|90_8o_|J0_EO|90_BO|JD_Bo_|
|11_112|J0_EO_07|32_80_08|7193 Coz|CHLDEA|
|Q_EAII|4212 bloel|PaJJ_CX|0_Kod|ubSime|
|4nu|Lou|JG RG|P3c >| |

The connection to shutdown group 2 is established by linking output S_DB of block F_S_BO_1 in shutdown group 1 with input S_DB on block F_R_BO_1 in shutdown group 2.

Extract from a chart for shutdown group 2 with receive block:

|Xbaeha|32430|netr|
|---|---|---|
|314 = doxr|3281p|REC_E?|
|Recei|ER EL|RD_BO_|
|RD_BO_|8088Q_01|RD_EQ|
|RD_E?|302ZD|RD_Lo|

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

89

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.7 Data exchange between the F user program and standard user program

The standard program and the F-program use different data formats. Accordingly, special conversion blocks have to be used for data exchange.

F-CPU
F-program
Conversion blocks
Standard program
Converting F-data types to standard data types

If you need the standard user program to process data from the F-program further (for monitoring on the PCS 7 OS, for example), a block for F_FDatatype_Datatype data conversion will have to be interconnected in the user program so that the F-data types can be converted into standard data types. This converter blocks must be called in the standard user program (standard runtime group).

Extract from a process tag chart; converting the ""QBAD"" signal from F_BOOL to BOOL:

Note

The figure is available in its original size as appendix to the manual in the ZIP download of the checklists.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Standard and F-blocks are in different runtime groups. As shown here, some F-blocks have outputs (depicted in gray), which can be directly interconnected with standard PCS 7 blocks. PCS 7 blocks such as MonAnL, MonDiL, EventMESSAGE and their associated faceplates and process symbols are used to visualize fail-safe analog values and status messages as well as system states and operating states. If parameters cannot be directly further interconnected due to the safety data format, the conversion blocks described above can be used.

# Converting standard data types into F-data types

If data from the standard user program is to be processed further in the F-program, it will need to be converted. The blocks for data conversion from standard data types to F-data types (F_datatype_Fdatatype) can only be used in the F-program (F-runtime group).

Extract from an F-chart, conversion from REAL to F_REAL:

|7_R_FR_CONv|R -B|CE 32|CB39|:RELL|Aulci|
|---|---|---|---|---|---|
|DAII ZROC3?|VALUE DiT| | | | |

Note: The conversion blocks only perform data conversion; in other words, you will need to program additional measures in the F-program for plausibility checking purposes (with F_LIM_R, for example), in order to ensure that only non-hazardous values are possible.

# 7.2.8 How F-blocks with floating-point operations respond to number range overflows

Within the context of analog value processing, number range overflows/underflows can occur during arithmetic calculations (with division by 0, root from a negative number or number range overflow). With S7 F Systems Lib V1_3 and higher, the response is as follows in this case: The results ""Overflow (± infinite)"", ""Denormalized floating-point number"" or ""Invalid floating-point number (NaN)"" are:

- Either output at the output and can be processed further by subsequent F blocks
- Or signaled to special outputs. A substitute value is output if necessary.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

91

# Configuring the safety program

# 7.2 Creating the safety program

If the floating-point operation produces an invalid floating-point number (NaN) and no invalid floating-point number (NaN) existed as an address prior to this, the following diagnostics event will be entered in the F CPU's diagnostic buffer:

""Safety program: Invalid REAL number in DB"" (event ID 16#75D9)

You can use this entry in the diagnostic buffer to identify the F block with the invalid floating-point number (NaN).

If you are not able to prevent these events from occurring in your safety program, you will need to decide, on the basis of your application, whether you wish to respond to them in your safety program.

|AD?|nddie|101.o = 101.0_|10o.0|-10q|CUIL|5035|
|---|---|---|---|---|---|---|
|AD?|indoic|0b37 1.0e+3e|:Addle|0etz|3.0e-3e|10o.0|
| |100.0|3.0e-38| |CUIL|AD_|:itis|
|0837i|LIN_R|08371|#Addic|3402-32|c0m| |
| |ce-JE| |CUII|Sms|AD?|0BJ7i|
|Addue|J1o|~10O|02-J8|~100.0|CuTO|100.0=|
|DIV|LIK_R|:tris|100.0_| |100.-|CutQ|
|0.0|502S|SoRT|HXR|:Squo-|{AJi|hal|
|-10o.05|CVIQ|CUIL|5023_W| | | |

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.3 Configuring fail-safe AS-AS communication

You can use the F_LIM_R F block to check the result of a floating-point operation for overflow (± infinite) and invalid floating-point number (NaN).

- A limit violation is indicated by IN &gt; MAX or ""+ infinite"". ",What are the rules for F-runtime groups in the safety program according to the 'Compendium Part B - Process Safety (V9.0)'?,A3,"Prioritize F-runtime groups over standard ones in mixed OBs, adhere to default settings, and do not move automatically generated groups.",1.1328125,1.25,3.359375,1.4453125,0.45703125
13,pcs7_compendium_part_b_en-US_en-US.txt,37,5dea5c3b1bc7a2a2d3707ace8a7d6e3ed157196366f8ee88ba630fadc3d36b0e,"Changes to the input parameters of F blocks with F data types can be made as follows:

- Offline with the assistance of the CFC editor
- Online using CFC test mode with safety mode deactivated

Note

Values of PAR_ID and COMPLEM must not be changed. If errors in the safety data format are detected during the execution of the safety program, an F-STOP is triggered.

# 7.2.4 Run sequence of F-blocks

# Defining the run sequence

You define the run sequence in the CFC editor in the same way as for a standard user program. Changing the run sequence also changes the collective signature.

# Correct run sequence of F-blocks

The sequence of the F-blocks within the F-shutdown group is relevant. The number of F-runtime groups the F-shutdown group has been split into is of no relevance. Essentially, the correct run sequence of the various F-block types is as follows:

1. Placed automatically:
- F module driver for F-signal modules with inputs or with inputs and outputs
- F-communications blocks and F-system blocks for receiving
- F blocks for data conversion from standard value to F-structure
- F modules with OS connection
2. F channel drivers for inputs
3. F blocks for user logic

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

1. F channel drivers for outputs
2. Placed automatically:
- F block F_PLK
- F block F_PSG_M
- F module driver for F-signal modules with outputs or with inputs and outputs
- F-communications blocks and F-system blocks for sending
- F block F_PLK_O
- F block F_DIAG (S7 F-Systems Lib V1_3 and higher)

The run sequence of the blocks listed under items 1 and 5 is adjusted automatically when the F-program is compiled.
As if S7 F Systems Lib V1_3, separate runtime groups are created for the F blocks listed under points 1 and 5 during the first compilation.
The IPO principle (input, process, output) must always be observed when placing F-channel drivers and F-blocks for user logic.
This ensures that all inputs are read first, the relevant processing steps are performed, and all outputs are then written.
Furthermore, F-runtime groups and F-monitoring blocks that are only visible following compilation are also added automatically.

Note

No changes may be made in the automatically added runtime groups with the exception of the scan cycle monitoring on ""F_CYC_CO"" blocks and the parameter assignment of the ""F_SHUTDN"" block.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.5 F-runtime groups

During the programming of the safety program, F-blocks cannot be inserted directly into tasks (cyclic interrupt OBs). When a new CFC chart is created in PCS 7, the system will automatically generate a runtime group of the same name, into which the F-blocks placed in the corresponding CFC chart can then be inserted. An F-runtime group only becomes an F-runtime group (identified by a yellow folder and ""F"") when F-blocks are called in it.

0B37 [Cyclic interrupt7] (300 ms)
@CPU_RTI@CPU_RT
@F_ShutDn_37 (300 ms)
@F_ShutDn (300 ms)
CycCo-QB37 (300 ms)
CycCo-OB3ZIF_CYC_CO-OB37
@F_CycCo-OB3ZIF_TEST
@F_CycCo-OB37IF_TESTC
@F_TestMode (300 ms)
@F_IN_37_0 (300 ms)
SFC_109_F (300 ms)
AI_F (300 ms)
HS104_F (300 ms)
@F_OUT_37_0 (300 ms)
@F_DbIniti (300 ms)
0B38 [Cycic interrupta] (10 ms)

# Runtime groups of an F-program

The F-program is divided into several runtime groups, as shown in the table below.

Note

xx = Number of the cyclic interrupt OB

y = Consecutive numbering if several shutdown groups exist in a single cyclic interrupt OB

|Chart|F blocks|
|---|---|
|@F_ShutDn_xx|Shutdown logic of cyclic interrupt OB The shutdown logic is created with RTGLOGIC and standard logic blocks.|
|@F_ShutDn|Shutdown block Where an F-program is present in several cyclic interrupt OBs, this runtime group is integrated into the cyclic interrupt OB with the shortest call time. The shutdown logic is created with F_SHUTDN, RTGLOGIC, and standard logic blocks.|
|@F_CycCo-OBxx|F_CYC_CO, F_TEST and F_TESTC (for tests)|
|@F_TestMode|F_TESTM for managing safety mode|
|@F_IN_xx_y|F blocks which supply input values for the F-program (F_QUITES, communication receive blocks, conversion blocks from standard to F-data types, drivers for F-input modules) Runtime groups with user logic, in the sequence in which they were created by the user|

Compendium Part B - Process Safety (V9.0)
Operating Manual, 04/2018, A5E43228905-AA

# 7.2 Creating the safety program

@F_OUT_xx_y Blocks which further process output values of F-blocks (communication send blocks, conversion blocks from F-to standard data types, drivers for F-output modules, F_PLK, F_PLK_O, and F_DIAG for program sequence control)

@F_DbInitxx DB_INIT function block required for the cold restart of an F-runtime group

All required error OBs are added to the block container in the SIMATIC Manager.

There should only be one @F_IN_xx_y runtime group before the first F-user runtime group and one @F_OUT_xx_y runtime group after the last F-user runtime group. If the safety program consists of several shutdown groups (see section 6.2.6 (Page 87)), there is the @F_IN_xx_y and @F_OUT_xx_y runtime group both before and after the F-user runtime group in the shutdown groups.

# Rules for F-runtime groups in the safety program

- We recommend that you proceed as follows in order to make the lengths of the F-cycles as uniform as possible:
If you mix F-and standard runtime groups in a cyclic interrupt OB, you must execute the F-runtime groups before the standard runtime groups.
- The following defaults are set for properties of an F-runtime group:
- Reduction ratio = 1
- Phase offset = 0
- Properties Runtime Group
- Task: 0B37
- Name: HS104
- Comment:
- Reduction ratio:
- Phase offset:
- Optimize run sequence
- Active:
- You are not permitted to move automatically generated F-runtime groups (identified by @).

Note: The feature: Optimize Run Sequence in CFC can lead to a change in the collective signature and impair the response times of the safety program, and therefore should not be used in F-runtime groups.

With PCS 7 V7.0 SP1 and higher, it is no longer possible to optimize the run sequence for cyclic interrupt OBs with F-runtime groups.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.6 F-shutdown groups

An F-shutdown group is a self-contained unit in your safety program. It contains user logic which is executed or shut down simultaneously. The F-shutdown group contains one or a number of F-runtime groups which are assigned to a common cyclic interrupt OB. You can choose whether an error during execution of the safety program causes a full shutdown or a partial shutdown of the safety program. With a partial shutdown, only the F-shutdown group in which the error occurred is shut down.

# Rules for F-shutdown groups in the safety program

You are not permitted to directly interconnect F-blocks in different F-shutdown groups. Data can only be exchanged between F-shutdown groups using special communication blocks (F_S_xx, F_R_xx for F_BOOL and F_REAL data structures). Therefore, all F-channel drivers in an F-signal module must be in the same F-shutdown group, together with the module driver of the F-signal module.

# Defining F-shutdown groups

As soon as you place F-blocks in the CFC editor for the first time, all of the F-runtime groups in a single cyclic interrupt OB will form an F-shutdown group. You can configure each F-runtime group as the last F-runtime group in an F-shutdown group by placing the F_PSG_M ""selection block"". The F-system then creates a new F-shutdown group for all subsequent F-runtime groups until another F_PSG_M block is found.

# Distribution/Combination by means of manual placing of F_PSG_M

If you add or delete one or a number of F_PSG_M blocks in your project, the order of your F-shutdown groups will change. If you make a change to the layout of your F-shutdown groups, you must make sure that the F-module drivers and all assigned F-channel drivers are integrated in the same F-shutdown group. You can split one F-shutdown group into two F-shutdown groups. To do this, in the CFC editor's runtime editor, place the F_PSG_M block in the last F-runtime group which is to be assigned to the first F-shutdown group. All subsequent F-runtime groups will then be assigned to the second F-shutdown group. The number of F-shutdown groups is limited to 110 in all cyclic interrupt OBs. The system restricts the number of F-runtime groups in an F-shutdown group. You have the option of combining two F-shutdown groups. To do this, in the runtime editor of the CFC editor, delete the F_PSG_M block between the F-shutdown groups. If you combine a number of F-shutdown groups which exchange data via F-communication blocks in a single F-shutdown group, you need to remove these F-communications blocks and replace them with direct interconnections.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# Programming data exchange between F-shutdown groups

If you wish to exchange data between two F-shutdown groups, you are not permitted to interconnect the inputs and outputs directly. You need to use the following F-system blocks for data exchange between F blocks in different F-shutdown groups:

|F block|Description|
|---|---|
|F_S_R/F_R_R|Safe transfer of 5 data of the F_REAL type|
|F_S_BO/F_R_BO|Safe transfer of 5 data of the F_BOOL type|

# Procedure for data exchange

1. In the F-shutdown group from which data is to be transferred, add an F_S_R or F_S_BO type F-block.
2. In the F-shutdown group to which data is to be transferred, add an F_R_R or F_R_BO type F-block.
3. Interconnect the SD_R_xx inputs of the F_S_R or the SD_BO_xx inputs of the F_S_BO with the data to be transferred.
4. Interconnect the RD_R_xx outputs of the F_R_R or the RD_BO_xx outputs of the F_R_BO with the inputs of the F-block for further processing of the data received.
5. Interconnect the S_DB output of the send block with the S_DB input of the associated receive block.
6. Configure the TIMEOUT inputs of the F_R_R and F_R_BO receive blocks with the F-monitoring time calculated.
7. Configure the receive block substitute values for the scenario of a shutdown of the sending shutdown group.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Extract from a chart for shutdown group 1 with send block:

|42617|7ail-|7133 Cor|CHLDEA F|1e-0- Ck_INE|
|---|---|---|---|---|
|JdEO|90_8o_|J0_EO|90_BO|JD_Bo_|
|11_112|J0_EO_07|32_80_08|7193 Coz|CHLDEA|
|Q_EAII|4212 bloel|PaJJ_CX|0_Kod|ubSime|
|4nu|Lou|JG RG|P3c >| |

The connection to shutdown group 2 is established by linking output S_DB of block F_S_BO_1 in shutdown group 1 with input S_DB on block F_R_BO_1 in shutdown group 2.

Extract from a chart for shutdown group 2 with receive block:

|Xbaeha|32430|netr|
|---|---|---|
|314 = doxr|3281p|REC_E?|
|Recei|ER EL|RD_BO_|
|RD_BO_|8088Q_01|RD_EQ|
|RD_E?|302ZD|RD_Lo|

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

89

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.7 Data exchange between the F user program and standard user program

The standard program and the F-program use different data formats. Accordingly, special conversion blocks have to be used for data exchange.

F-CPU
F-program
Conversion blocks
Standard program
Converting F-data types to standard data types

If you need the standard user program to process data from the F-program further (for monitoring on the PCS 7 OS, for example), a block for F_FDatatype_Datatype data conversion will have to be interconnected in the user program so that the F-data types can be converted into standard data types. This converter blocks must be called in the standard user program (standard runtime group).

Extract from a process tag chart; converting the ""QBAD"" signal from F_BOOL to BOOL:

Note

The figure is available in its original size as appendix to the manual in the ZIP download of the checklists.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Standard and F-blocks are in different runtime groups. As shown here, some F-blocks have outputs (depicted in gray), which can be directly interconnected with standard PCS 7 blocks. PCS 7 blocks such as MonAnL, MonDiL, EventMESSAGE and their associated faceplates and process symbols are used to visualize fail-safe analog values and status messages as well as system states and operating states. If parameters cannot be directly further interconnected due to the safety data format, the conversion blocks described above can be used.

# Converting standard data types into F-data types

If data from the standard user program is to be processed further in the F-program, it will need to be converted. The blocks for data conversion from standard data types to F-data types (F_datatype_Fdatatype) can only be used in the F-program (F-runtime group).

Extract from an F-chart, conversion from REAL to F_REAL:

|7_R_FR_CONv|R -B|CE 32|CB39|:RELL|Aulci|
|---|---|---|---|---|---|
|DAII ZROC3?|VALUE DiT| | | | |

Note: The conversion blocks only perform data conversion; in other words, you will need to program additional measures in the F-program for plausibility checking purposes (with F_LIM_R, for example), in order to ensure that only non-hazardous values are possible.

# 7.2.8 How F-blocks with floating-point operations respond to number range overflows

Within the context of analog value processing, number range overflows/underflows can occur during arithmetic calculations (with division by 0, root from a negative number or number range overflow). With S7 F Systems Lib V1_3 and higher, the response is as follows in this case: The results ""Overflow (± infinite)"", ""Denormalized floating-point number"" or ""Invalid floating-point number (NaN)"" are:

- Either output at the output and can be processed further by subsequent F blocks
- Or signaled to special outputs. A substitute value is output if necessary.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

91

# Configuring the safety program

# 7.2 Creating the safety program

If the floating-point operation produces an invalid floating-point number (NaN) and no invalid floating-point number (NaN) existed as an address prior to this, the following diagnostics event will be entered in the F CPU's diagnostic buffer:

""Safety program: Invalid REAL number in DB"" (event ID 16#75D9)

You can use this entry in the diagnostic buffer to identify the F block with the invalid floating-point number (NaN).

If you are not able to prevent these events from occurring in your safety program, you will need to decide, on the basis of your application, whether you wish to respond to them in your safety program.

|AD?|nddie|101.o = 101.0_|10o.0|-10q|CUIL|5035|
|---|---|---|---|---|---|---|
|AD?|indoic|0b37 1.0e+3e|:Addle|0etz|3.0e-3e|10o.0|
| |100.0|3.0e-38| |CUIL|AD_|:itis|
|0837i|LIN_R|08371|#Addic|3402-32|c0m| |
| |ce-JE| |CUII|Sms|AD?|0BJ7i|
|Addue|J1o|~10O|02-J8|~100.0|CuTO|100.0=|
|DIV|LIK_R|:tris|100.0_| |100.-|CutQ|
|0.0|502S|SoRT|HXR|:Squo-|{AJi|hal|
|-10o.05|CVIQ|CUIL|5023_W| | | |

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.3 Configuring fail-safe AS-AS communication

You can use the F_LIM_R F block to check the result of a floating-point operation for overflow (± infinite) and invalid floating-point number (NaN).

- A limit violation is indicated by IN &gt; MAX or ""+ infinite"". ",What are the rules for F-runtime groups in the safety program according to the 'Compendium Part B - Process Safety (V9.0)'?,A4,"Execute F-runtime groups first in mixed OBs, maintain default properties, and avoid moving automatically generated groups.",0.94140625,0.8203125,3.1875,1.2265625,0.26171875
14,pcs7_compendium_part_b_en-US_en-US.txt,37,5dea5c3b1bc7a2a2d3707ace8a7d6e3ed157196366f8ee88ba630fadc3d36b0e,"Changes to the input parameters of F blocks with F data types can be made as follows:

- Offline with the assistance of the CFC editor
- Online using CFC test mode with safety mode deactivated

Note

Values of PAR_ID and COMPLEM must not be changed. If errors in the safety data format are detected during the execution of the safety program, an F-STOP is triggered.

# 7.2.4 Run sequence of F-blocks

# Defining the run sequence

You define the run sequence in the CFC editor in the same way as for a standard user program. Changing the run sequence also changes the collective signature.

# Correct run sequence of F-blocks

The sequence of the F-blocks within the F-shutdown group is relevant. The number of F-runtime groups the F-shutdown group has been split into is of no relevance. Essentially, the correct run sequence of the various F-block types is as follows:

1. Placed automatically:
- F module driver for F-signal modules with inputs or with inputs and outputs
- F-communications blocks and F-system blocks for receiving
- F blocks for data conversion from standard value to F-structure
- F modules with OS connection
2. F channel drivers for inputs
3. F blocks for user logic

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

1. F channel drivers for outputs
2. Placed automatically:
- F block F_PLK
- F block F_PSG_M
- F module driver for F-signal modules with outputs or with inputs and outputs
- F-communications blocks and F-system blocks for sending
- F block F_PLK_O
- F block F_DIAG (S7 F-Systems Lib V1_3 and higher)

The run sequence of the blocks listed under items 1 and 5 is adjusted automatically when the F-program is compiled.
As if S7 F Systems Lib V1_3, separate runtime groups are created for the F blocks listed under points 1 and 5 during the first compilation.
The IPO principle (input, process, output) must always be observed when placing F-channel drivers and F-blocks for user logic.
This ensures that all inputs are read first, the relevant processing steps are performed, and all outputs are then written.
Furthermore, F-runtime groups and F-monitoring blocks that are only visible following compilation are also added automatically.

Note

No changes may be made in the automatically added runtime groups with the exception of the scan cycle monitoring on ""F_CYC_CO"" blocks and the parameter assignment of the ""F_SHUTDN"" block.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.5 F-runtime groups

During the programming of the safety program, F-blocks cannot be inserted directly into tasks (cyclic interrupt OBs). When a new CFC chart is created in PCS 7, the system will automatically generate a runtime group of the same name, into which the F-blocks placed in the corresponding CFC chart can then be inserted. An F-runtime group only becomes an F-runtime group (identified by a yellow folder and ""F"") when F-blocks are called in it.

0B37 [Cyclic interrupt7] (300 ms)
@CPU_RTI@CPU_RT
@F_ShutDn_37 (300 ms)
@F_ShutDn (300 ms)
CycCo-QB37 (300 ms)
CycCo-OB3ZIF_CYC_CO-OB37
@F_CycCo-OB3ZIF_TEST
@F_CycCo-OB37IF_TESTC
@F_TestMode (300 ms)
@F_IN_37_0 (300 ms)
SFC_109_F (300 ms)
AI_F (300 ms)
HS104_F (300 ms)
@F_OUT_37_0 (300 ms)
@F_DbIniti (300 ms)
0B38 [Cycic interrupta] (10 ms)

# Runtime groups of an F-program

The F-program is divided into several runtime groups, as shown in the table below.

Note

xx = Number of the cyclic interrupt OB

y = Consecutive numbering if several shutdown groups exist in a single cyclic interrupt OB

|Chart|F blocks|
|---|---|
|@F_ShutDn_xx|Shutdown logic of cyclic interrupt OB The shutdown logic is created with RTGLOGIC and standard logic blocks.|
|@F_ShutDn|Shutdown block Where an F-program is present in several cyclic interrupt OBs, this runtime group is integrated into the cyclic interrupt OB with the shortest call time. The shutdown logic is created with F_SHUTDN, RTGLOGIC, and standard logic blocks.|
|@F_CycCo-OBxx|F_CYC_CO, F_TEST and F_TESTC (for tests)|
|@F_TestMode|F_TESTM for managing safety mode|
|@F_IN_xx_y|F blocks which supply input values for the F-program (F_QUITES, communication receive blocks, conversion blocks from standard to F-data types, drivers for F-input modules) Runtime groups with user logic, in the sequence in which they were created by the user|

Compendium Part B - Process Safety (V9.0)
Operating Manual, 04/2018, A5E43228905-AA

# 7.2 Creating the safety program

@F_OUT_xx_y Blocks which further process output values of F-blocks (communication send blocks, conversion blocks from F-to standard data types, drivers for F-output modules, F_PLK, F_PLK_O, and F_DIAG for program sequence control)

@F_DbInitxx DB_INIT function block required for the cold restart of an F-runtime group

All required error OBs are added to the block container in the SIMATIC Manager.

There should only be one @F_IN_xx_y runtime group before the first F-user runtime group and one @F_OUT_xx_y runtime group after the last F-user runtime group. If the safety program consists of several shutdown groups (see section 6.2.6 (Page 87)), there is the @F_IN_xx_y and @F_OUT_xx_y runtime group both before and after the F-user runtime group in the shutdown groups.

# Rules for F-runtime groups in the safety program

- We recommend that you proceed as follows in order to make the lengths of the F-cycles as uniform as possible:
If you mix F-and standard runtime groups in a cyclic interrupt OB, you must execute the F-runtime groups before the standard runtime groups.
- The following defaults are set for properties of an F-runtime group:
- Reduction ratio = 1
- Phase offset = 0
- Properties Runtime Group
- Task: 0B37
- Name: HS104
- Comment:
- Reduction ratio:
- Phase offset:
- Optimize run sequence
- Active:
- You are not permitted to move automatically generated F-runtime groups (identified by @).

Note: The feature: Optimize Run Sequence in CFC can lead to a change in the collective signature and impair the response times of the safety program, and therefore should not be used in F-runtime groups.

With PCS 7 V7.0 SP1 and higher, it is no longer possible to optimize the run sequence for cyclic interrupt OBs with F-runtime groups.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.6 F-shutdown groups

An F-shutdown group is a self-contained unit in your safety program. It contains user logic which is executed or shut down simultaneously. The F-shutdown group contains one or a number of F-runtime groups which are assigned to a common cyclic interrupt OB. You can choose whether an error during execution of the safety program causes a full shutdown or a partial shutdown of the safety program. With a partial shutdown, only the F-shutdown group in which the error occurred is shut down.

# Rules for F-shutdown groups in the safety program

You are not permitted to directly interconnect F-blocks in different F-shutdown groups. Data can only be exchanged between F-shutdown groups using special communication blocks (F_S_xx, F_R_xx for F_BOOL and F_REAL data structures). Therefore, all F-channel drivers in an F-signal module must be in the same F-shutdown group, together with the module driver of the F-signal module.

# Defining F-shutdown groups

As soon as you place F-blocks in the CFC editor for the first time, all of the F-runtime groups in a single cyclic interrupt OB will form an F-shutdown group. You can configure each F-runtime group as the last F-runtime group in an F-shutdown group by placing the F_PSG_M ""selection block"". The F-system then creates a new F-shutdown group for all subsequent F-runtime groups until another F_PSG_M block is found.

# Distribution/Combination by means of manual placing of F_PSG_M

If you add or delete one or a number of F_PSG_M blocks in your project, the order of your F-shutdown groups will change. If you make a change to the layout of your F-shutdown groups, you must make sure that the F-module drivers and all assigned F-channel drivers are integrated in the same F-shutdown group. You can split one F-shutdown group into two F-shutdown groups. To do this, in the CFC editor's runtime editor, place the F_PSG_M block in the last F-runtime group which is to be assigned to the first F-shutdown group. All subsequent F-runtime groups will then be assigned to the second F-shutdown group. The number of F-shutdown groups is limited to 110 in all cyclic interrupt OBs. The system restricts the number of F-runtime groups in an F-shutdown group. You have the option of combining two F-shutdown groups. To do this, in the runtime editor of the CFC editor, delete the F_PSG_M block between the F-shutdown groups. If you combine a number of F-shutdown groups which exchange data via F-communication blocks in a single F-shutdown group, you need to remove these F-communications blocks and replace them with direct interconnections.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# Programming data exchange between F-shutdown groups

If you wish to exchange data between two F-shutdown groups, you are not permitted to interconnect the inputs and outputs directly. You need to use the following F-system blocks for data exchange between F blocks in different F-shutdown groups:

|F block|Description|
|---|---|
|F_S_R/F_R_R|Safe transfer of 5 data of the F_REAL type|
|F_S_BO/F_R_BO|Safe transfer of 5 data of the F_BOOL type|

# Procedure for data exchange

1. In the F-shutdown group from which data is to be transferred, add an F_S_R or F_S_BO type F-block.
2. In the F-shutdown group to which data is to be transferred, add an F_R_R or F_R_BO type F-block.
3. Interconnect the SD_R_xx inputs of the F_S_R or the SD_BO_xx inputs of the F_S_BO with the data to be transferred.
4. Interconnect the RD_R_xx outputs of the F_R_R or the RD_BO_xx outputs of the F_R_BO with the inputs of the F-block for further processing of the data received.
5. Interconnect the S_DB output of the send block with the S_DB input of the associated receive block.
6. Configure the TIMEOUT inputs of the F_R_R and F_R_BO receive blocks with the F-monitoring time calculated.
7. Configure the receive block substitute values for the scenario of a shutdown of the sending shutdown group.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Extract from a chart for shutdown group 1 with send block:

|42617|7ail-|7133 Cor|CHLDEA F|1e-0- Ck_INE|
|---|---|---|---|---|
|JdEO|90_8o_|J0_EO|90_BO|JD_Bo_|
|11_112|J0_EO_07|32_80_08|7193 Coz|CHLDEA|
|Q_EAII|4212 bloel|PaJJ_CX|0_Kod|ubSime|
|4nu|Lou|JG RG|P3c >| |

The connection to shutdown group 2 is established by linking output S_DB of block F_S_BO_1 in shutdown group 1 with input S_DB on block F_R_BO_1 in shutdown group 2.

Extract from a chart for shutdown group 2 with receive block:

|Xbaeha|32430|netr|
|---|---|---|
|314 = doxr|3281p|REC_E?|
|Recei|ER EL|RD_BO_|
|RD_BO_|8088Q_01|RD_EQ|
|RD_E?|302ZD|RD_Lo|

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

89

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.7 Data exchange between the F user program and standard user program

The standard program and the F-program use different data formats. Accordingly, special conversion blocks have to be used for data exchange.

F-CPU
F-program
Conversion blocks
Standard program
Converting F-data types to standard data types

If you need the standard user program to process data from the F-program further (for monitoring on the PCS 7 OS, for example), a block for F_FDatatype_Datatype data conversion will have to be interconnected in the user program so that the F-data types can be converted into standard data types. This converter blocks must be called in the standard user program (standard runtime group).

Extract from a process tag chart; converting the ""QBAD"" signal from F_BOOL to BOOL:

Note

The figure is available in its original size as appendix to the manual in the ZIP download of the checklists.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Standard and F-blocks are in different runtime groups. As shown here, some F-blocks have outputs (depicted in gray), which can be directly interconnected with standard PCS 7 blocks. PCS 7 blocks such as MonAnL, MonDiL, EventMESSAGE and their associated faceplates and process symbols are used to visualize fail-safe analog values and status messages as well as system states and operating states. If parameters cannot be directly further interconnected due to the safety data format, the conversion blocks described above can be used.

# Converting standard data types into F-data types

If data from the standard user program is to be processed further in the F-program, it will need to be converted. The blocks for data conversion from standard data types to F-data types (F_datatype_Fdatatype) can only be used in the F-program (F-runtime group).

Extract from an F-chart, conversion from REAL to F_REAL:

|7_R_FR_CONv|R -B|CE 32|CB39|:RELL|Aulci|
|---|---|---|---|---|---|
|DAII ZROC3?|VALUE DiT| | | | |

Note: The conversion blocks only perform data conversion; in other words, you will need to program additional measures in the F-program for plausibility checking purposes (with F_LIM_R, for example), in order to ensure that only non-hazardous values are possible.

# 7.2.8 How F-blocks with floating-point operations respond to number range overflows

Within the context of analog value processing, number range overflows/underflows can occur during arithmetic calculations (with division by 0, root from a negative number or number range overflow). With S7 F Systems Lib V1_3 and higher, the response is as follows in this case: The results ""Overflow (± infinite)"", ""Denormalized floating-point number"" or ""Invalid floating-point number (NaN)"" are:

- Either output at the output and can be processed further by subsequent F blocks
- Or signaled to special outputs. A substitute value is output if necessary.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

91

# Configuring the safety program

# 7.2 Creating the safety program

If the floating-point operation produces an invalid floating-point number (NaN) and no invalid floating-point number (NaN) existed as an address prior to this, the following diagnostics event will be entered in the F CPU's diagnostic buffer:

""Safety program: Invalid REAL number in DB"" (event ID 16#75D9)

You can use this entry in the diagnostic buffer to identify the F block with the invalid floating-point number (NaN).

If you are not able to prevent these events from occurring in your safety program, you will need to decide, on the basis of your application, whether you wish to respond to them in your safety program.

|AD?|nddie|101.o = 101.0_|10o.0|-10q|CUIL|5035|
|---|---|---|---|---|---|---|
|AD?|indoic|0b37 1.0e+3e|:Addle|0etz|3.0e-3e|10o.0|
| |100.0|3.0e-38| |CUIL|AD_|:itis|
|0837i|LIN_R|08371|#Addic|3402-32|c0m| |
| |ce-JE| |CUII|Sms|AD?|0BJ7i|
|Addue|J1o|~10O|02-J8|~100.0|CuTO|100.0=|
|DIV|LIK_R|:tris|100.0_| |100.-|CutQ|
|0.0|502S|SoRT|HXR|:Squo-|{AJi|hal|
|-10o.05|CVIQ|CUIL|5023_W| | | |

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.3 Configuring fail-safe AS-AS communication

You can use the F_LIM_R F block to check the result of a floating-point operation for overflow (± infinite) and invalid floating-point number (NaN).

- A limit violation is indicated by IN &gt; MAX or ""+ infinite"". ",What are the rules for F-runtime groups in the safety program according to the 'Compendium Part B - Process Safety (V9.0)'?,A5,"The manual advises executing F-runtime groups first in mixed scenarios, sticking to defaults, and not moving automatically generated groups.",1.3828125,1.4453125,3.328125,1.3515625,0.423828125
15,pcs7_compendium_part_b_en-US_en-US.txt,37,5dea5c3b1bc7a2a2d3707ace8a7d6e3ed157196366f8ee88ba630fadc3d36b0e,"Changes to the input parameters of F blocks with F data types can be made as follows:

- Offline with the assistance of the CFC editor
- Online using CFC test mode with safety mode deactivated

Note

Values of PAR_ID and COMPLEM must not be changed. If errors in the safety data format are detected during the execution of the safety program, an F-STOP is triggered.

# 7.2.4 Run sequence of F-blocks

# Defining the run sequence

You define the run sequence in the CFC editor in the same way as for a standard user program. Changing the run sequence also changes the collective signature.

# Correct run sequence of F-blocks

The sequence of the F-blocks within the F-shutdown group is relevant. The number of F-runtime groups the F-shutdown group has been split into is of no relevance. Essentially, the correct run sequence of the various F-block types is as follows:

1. Placed automatically:
- F module driver for F-signal modules with inputs or with inputs and outputs
- F-communications blocks and F-system blocks for receiving
- F blocks for data conversion from standard value to F-structure
- F modules with OS connection
2. F channel drivers for inputs
3. F blocks for user logic

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

1. F channel drivers for outputs
2. Placed automatically:
- F block F_PLK
- F block F_PSG_M
- F module driver for F-signal modules with outputs or with inputs and outputs
- F-communications blocks and F-system blocks for sending
- F block F_PLK_O
- F block F_DIAG (S7 F-Systems Lib V1_3 and higher)

The run sequence of the blocks listed under items 1 and 5 is adjusted automatically when the F-program is compiled.
As if S7 F Systems Lib V1_3, separate runtime groups are created for the F blocks listed under points 1 and 5 during the first compilation.
The IPO principle (input, process, output) must always be observed when placing F-channel drivers and F-blocks for user logic.
This ensures that all inputs are read first, the relevant processing steps are performed, and all outputs are then written.
Furthermore, F-runtime groups and F-monitoring blocks that are only visible following compilation are also added automatically.

Note

No changes may be made in the automatically added runtime groups with the exception of the scan cycle monitoring on ""F_CYC_CO"" blocks and the parameter assignment of the ""F_SHUTDN"" block.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.5 F-runtime groups

During the programming of the safety program, F-blocks cannot be inserted directly into tasks (cyclic interrupt OBs). When a new CFC chart is created in PCS 7, the system will automatically generate a runtime group of the same name, into which the F-blocks placed in the corresponding CFC chart can then be inserted. An F-runtime group only becomes an F-runtime group (identified by a yellow folder and ""F"") when F-blocks are called in it.

0B37 [Cyclic interrupt7] (300 ms)
@CPU_RTI@CPU_RT
@F_ShutDn_37 (300 ms)
@F_ShutDn (300 ms)
CycCo-QB37 (300 ms)
CycCo-OB3ZIF_CYC_CO-OB37
@F_CycCo-OB3ZIF_TEST
@F_CycCo-OB37IF_TESTC
@F_TestMode (300 ms)
@F_IN_37_0 (300 ms)
SFC_109_F (300 ms)
AI_F (300 ms)
HS104_F (300 ms)
@F_OUT_37_0 (300 ms)
@F_DbIniti (300 ms)
0B38 [Cycic interrupta] (10 ms)

# Runtime groups of an F-program

The F-program is divided into several runtime groups, as shown in the table below.

Note

xx = Number of the cyclic interrupt OB

y = Consecutive numbering if several shutdown groups exist in a single cyclic interrupt OB

|Chart|F blocks|
|---|---|
|@F_ShutDn_xx|Shutdown logic of cyclic interrupt OB The shutdown logic is created with RTGLOGIC and standard logic blocks.|
|@F_ShutDn|Shutdown block Where an F-program is present in several cyclic interrupt OBs, this runtime group is integrated into the cyclic interrupt OB with the shortest call time. The shutdown logic is created with F_SHUTDN, RTGLOGIC, and standard logic blocks.|
|@F_CycCo-OBxx|F_CYC_CO, F_TEST and F_TESTC (for tests)|
|@F_TestMode|F_TESTM for managing safety mode|
|@F_IN_xx_y|F blocks which supply input values for the F-program (F_QUITES, communication receive blocks, conversion blocks from standard to F-data types, drivers for F-input modules) Runtime groups with user logic, in the sequence in which they were created by the user|

Compendium Part B - Process Safety (V9.0)
Operating Manual, 04/2018, A5E43228905-AA

# 7.2 Creating the safety program

@F_OUT_xx_y Blocks which further process output values of F-blocks (communication send blocks, conversion blocks from F-to standard data types, drivers for F-output modules, F_PLK, F_PLK_O, and F_DIAG for program sequence control)

@F_DbInitxx DB_INIT function block required for the cold restart of an F-runtime group

All required error OBs are added to the block container in the SIMATIC Manager.

There should only be one @F_IN_xx_y runtime group before the first F-user runtime group and one @F_OUT_xx_y runtime group after the last F-user runtime group. If the safety program consists of several shutdown groups (see section 6.2.6 (Page 87)), there is the @F_IN_xx_y and @F_OUT_xx_y runtime group both before and after the F-user runtime group in the shutdown groups.

# Rules for F-runtime groups in the safety program

- We recommend that you proceed as follows in order to make the lengths of the F-cycles as uniform as possible:
If you mix F-and standard runtime groups in a cyclic interrupt OB, you must execute the F-runtime groups before the standard runtime groups.
- The following defaults are set for properties of an F-runtime group:
- Reduction ratio = 1
- Phase offset = 0
- Properties Runtime Group
- Task: 0B37
- Name: HS104
- Comment:
- Reduction ratio:
- Phase offset:
- Optimize run sequence
- Active:
- You are not permitted to move automatically generated F-runtime groups (identified by @).

Note: The feature: Optimize Run Sequence in CFC can lead to a change in the collective signature and impair the response times of the safety program, and therefore should not be used in F-runtime groups.

With PCS 7 V7.0 SP1 and higher, it is no longer possible to optimize the run sequence for cyclic interrupt OBs with F-runtime groups.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.6 F-shutdown groups

An F-shutdown group is a self-contained unit in your safety program. It contains user logic which is executed or shut down simultaneously. The F-shutdown group contains one or a number of F-runtime groups which are assigned to a common cyclic interrupt OB. You can choose whether an error during execution of the safety program causes a full shutdown or a partial shutdown of the safety program. With a partial shutdown, only the F-shutdown group in which the error occurred is shut down.

# Rules for F-shutdown groups in the safety program

You are not permitted to directly interconnect F-blocks in different F-shutdown groups. Data can only be exchanged between F-shutdown groups using special communication blocks (F_S_xx, F_R_xx for F_BOOL and F_REAL data structures). Therefore, all F-channel drivers in an F-signal module must be in the same F-shutdown group, together with the module driver of the F-signal module.

# Defining F-shutdown groups

As soon as you place F-blocks in the CFC editor for the first time, all of the F-runtime groups in a single cyclic interrupt OB will form an F-shutdown group. You can configure each F-runtime group as the last F-runtime group in an F-shutdown group by placing the F_PSG_M ""selection block"". The F-system then creates a new F-shutdown group for all subsequent F-runtime groups until another F_PSG_M block is found.

# Distribution/Combination by means of manual placing of F_PSG_M

If you add or delete one or a number of F_PSG_M blocks in your project, the order of your F-shutdown groups will change. If you make a change to the layout of your F-shutdown groups, you must make sure that the F-module drivers and all assigned F-channel drivers are integrated in the same F-shutdown group. You can split one F-shutdown group into two F-shutdown groups. To do this, in the CFC editor's runtime editor, place the F_PSG_M block in the last F-runtime group which is to be assigned to the first F-shutdown group. All subsequent F-runtime groups will then be assigned to the second F-shutdown group. The number of F-shutdown groups is limited to 110 in all cyclic interrupt OBs. The system restricts the number of F-runtime groups in an F-shutdown group. You have the option of combining two F-shutdown groups. To do this, in the runtime editor of the CFC editor, delete the F_PSG_M block between the F-shutdown groups. If you combine a number of F-shutdown groups which exchange data via F-communication blocks in a single F-shutdown group, you need to remove these F-communications blocks and replace them with direct interconnections.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# Programming data exchange between F-shutdown groups

If you wish to exchange data between two F-shutdown groups, you are not permitted to interconnect the inputs and outputs directly. You need to use the following F-system blocks for data exchange between F blocks in different F-shutdown groups:

|F block|Description|
|---|---|
|F_S_R/F_R_R|Safe transfer of 5 data of the F_REAL type|
|F_S_BO/F_R_BO|Safe transfer of 5 data of the F_BOOL type|

# Procedure for data exchange

1. In the F-shutdown group from which data is to be transferred, add an F_S_R or F_S_BO type F-block.
2. In the F-shutdown group to which data is to be transferred, add an F_R_R or F_R_BO type F-block.
3. Interconnect the SD_R_xx inputs of the F_S_R or the SD_BO_xx inputs of the F_S_BO with the data to be transferred.
4. Interconnect the RD_R_xx outputs of the F_R_R or the RD_BO_xx outputs of the F_R_BO with the inputs of the F-block for further processing of the data received.
5. Interconnect the S_DB output of the send block with the S_DB input of the associated receive block.
6. Configure the TIMEOUT inputs of the F_R_R and F_R_BO receive blocks with the F-monitoring time calculated.
7. Configure the receive block substitute values for the scenario of a shutdown of the sending shutdown group.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Extract from a chart for shutdown group 1 with send block:

|42617|7ail-|7133 Cor|CHLDEA F|1e-0- Ck_INE|
|---|---|---|---|---|
|JdEO|90_8o_|J0_EO|90_BO|JD_Bo_|
|11_112|J0_EO_07|32_80_08|7193 Coz|CHLDEA|
|Q_EAII|4212 bloel|PaJJ_CX|0_Kod|ubSime|
|4nu|Lou|JG RG|P3c >| |

The connection to shutdown group 2 is established by linking output S_DB of block F_S_BO_1 in shutdown group 1 with input S_DB on block F_R_BO_1 in shutdown group 2.

Extract from a chart for shutdown group 2 with receive block:

|Xbaeha|32430|netr|
|---|---|---|
|314 = doxr|3281p|REC_E?|
|Recei|ER EL|RD_BO_|
|RD_BO_|8088Q_01|RD_EQ|
|RD_E?|302ZD|RD_Lo|

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

89

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.7 Data exchange between the F user program and standard user program

The standard program and the F-program use different data formats. Accordingly, special conversion blocks have to be used for data exchange.

F-CPU
F-program
Conversion blocks
Standard program
Converting F-data types to standard data types

If you need the standard user program to process data from the F-program further (for monitoring on the PCS 7 OS, for example), a block for F_FDatatype_Datatype data conversion will have to be interconnected in the user program so that the F-data types can be converted into standard data types. This converter blocks must be called in the standard user program (standard runtime group).

Extract from a process tag chart; converting the ""QBAD"" signal from F_BOOL to BOOL:

Note

The figure is available in its original size as appendix to the manual in the ZIP download of the checklists.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Standard and F-blocks are in different runtime groups. As shown here, some F-blocks have outputs (depicted in gray), which can be directly interconnected with standard PCS 7 blocks. PCS 7 blocks such as MonAnL, MonDiL, EventMESSAGE and their associated faceplates and process symbols are used to visualize fail-safe analog values and status messages as well as system states and operating states. If parameters cannot be directly further interconnected due to the safety data format, the conversion blocks described above can be used.

# Converting standard data types into F-data types

If data from the standard user program is to be processed further in the F-program, it will need to be converted. The blocks for data conversion from standard data types to F-data types (F_datatype_Fdatatype) can only be used in the F-program (F-runtime group).

Extract from an F-chart, conversion from REAL to F_REAL:

|7_R_FR_CONv|R -B|CE 32|CB39|:RELL|Aulci|
|---|---|---|---|---|---|
|DAII ZROC3?|VALUE DiT| | | | |

Note: The conversion blocks only perform data conversion; in other words, you will need to program additional measures in the F-program for plausibility checking purposes (with F_LIM_R, for example), in order to ensure that only non-hazardous values are possible.

# 7.2.8 How F-blocks with floating-point operations respond to number range overflows

Within the context of analog value processing, number range overflows/underflows can occur during arithmetic calculations (with division by 0, root from a negative number or number range overflow). With S7 F Systems Lib V1_3 and higher, the response is as follows in this case: The results ""Overflow (± infinite)"", ""Denormalized floating-point number"" or ""Invalid floating-point number (NaN)"" are:

- Either output at the output and can be processed further by subsequent F blocks
- Or signaled to special outputs. A substitute value is output if necessary.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

91

# Configuring the safety program

# 7.2 Creating the safety program

If the floating-point operation produces an invalid floating-point number (NaN) and no invalid floating-point number (NaN) existed as an address prior to this, the following diagnostics event will be entered in the F CPU's diagnostic buffer:

""Safety program: Invalid REAL number in DB"" (event ID 16#75D9)

You can use this entry in the diagnostic buffer to identify the F block with the invalid floating-point number (NaN).

If you are not able to prevent these events from occurring in your safety program, you will need to decide, on the basis of your application, whether you wish to respond to them in your safety program.

|AD?|nddie|101.o = 101.0_|10o.0|-10q|CUIL|5035|
|---|---|---|---|---|---|---|
|AD?|indoic|0b37 1.0e+3e|:Addle|0etz|3.0e-3e|10o.0|
| |100.0|3.0e-38| |CUIL|AD_|:itis|
|0837i|LIN_R|08371|#Addic|3402-32|c0m| |
| |ce-JE| |CUII|Sms|AD?|0BJ7i|
|Addue|J1o|~10O|02-J8|~100.0|CuTO|100.0=|
|DIV|LIK_R|:tris|100.0_| |100.-|CutQ|
|0.0|502S|SoRT|HXR|:Squo-|{AJi|hal|
|-10o.05|CVIQ|CUIL|5023_W| | | |

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.3 Configuring fail-safe AS-AS communication

You can use the F_LIM_R F block to check the result of a floating-point operation for overflow (± infinite) and invalid floating-point number (NaN).

- A limit violation is indicated by IN &gt; MAX or ""+ infinite"". ",What are the two methods for changing the input parameters of F blocks with F data types as described in the 'Compendium Part B - Process Safety (V9.0)'?,A1,The two methods are offline with the assistance of the CFC editor and online using CFC test mode with safety mode deactivated.,2.984375,3.03125,3.75,1.546875,0.64453125
16,pcs7_compendium_part_b_en-US_en-US.txt,37,5dea5c3b1bc7a2a2d3707ace8a7d6e3ed157196366f8ee88ba630fadc3d36b0e,"Changes to the input parameters of F blocks with F data types can be made as follows:

- Offline with the assistance of the CFC editor
- Online using CFC test mode with safety mode deactivated

Note

Values of PAR_ID and COMPLEM must not be changed. If errors in the safety data format are detected during the execution of the safety program, an F-STOP is triggered.

# 7.2.4 Run sequence of F-blocks

# Defining the run sequence

You define the run sequence in the CFC editor in the same way as for a standard user program. Changing the run sequence also changes the collective signature.

# Correct run sequence of F-blocks

The sequence of the F-blocks within the F-shutdown group is relevant. The number of F-runtime groups the F-shutdown group has been split into is of no relevance. Essentially, the correct run sequence of the various F-block types is as follows:

1. Placed automatically:
- F module driver for F-signal modules with inputs or with inputs and outputs
- F-communications blocks and F-system blocks for receiving
- F blocks for data conversion from standard value to F-structure
- F modules with OS connection
2. F channel drivers for inputs
3. F blocks for user logic

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

1. F channel drivers for outputs
2. Placed automatically:
- F block F_PLK
- F block F_PSG_M
- F module driver for F-signal modules with outputs or with inputs and outputs
- F-communications blocks and F-system blocks for sending
- F block F_PLK_O
- F block F_DIAG (S7 F-Systems Lib V1_3 and higher)

The run sequence of the blocks listed under items 1 and 5 is adjusted automatically when the F-program is compiled.
As if S7 F Systems Lib V1_3, separate runtime groups are created for the F blocks listed under points 1 and 5 during the first compilation.
The IPO principle (input, process, output) must always be observed when placing F-channel drivers and F-blocks for user logic.
This ensures that all inputs are read first, the relevant processing steps are performed, and all outputs are then written.
Furthermore, F-runtime groups and F-monitoring blocks that are only visible following compilation are also added automatically.

Note

No changes may be made in the automatically added runtime groups with the exception of the scan cycle monitoring on ""F_CYC_CO"" blocks and the parameter assignment of the ""F_SHUTDN"" block.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.5 F-runtime groups

During the programming of the safety program, F-blocks cannot be inserted directly into tasks (cyclic interrupt OBs). When a new CFC chart is created in PCS 7, the system will automatically generate a runtime group of the same name, into which the F-blocks placed in the corresponding CFC chart can then be inserted. An F-runtime group only becomes an F-runtime group (identified by a yellow folder and ""F"") when F-blocks are called in it.

0B37 [Cyclic interrupt7] (300 ms)
@CPU_RTI@CPU_RT
@F_ShutDn_37 (300 ms)
@F_ShutDn (300 ms)
CycCo-QB37 (300 ms)
CycCo-OB3ZIF_CYC_CO-OB37
@F_CycCo-OB3ZIF_TEST
@F_CycCo-OB37IF_TESTC
@F_TestMode (300 ms)
@F_IN_37_0 (300 ms)
SFC_109_F (300 ms)
AI_F (300 ms)
HS104_F (300 ms)
@F_OUT_37_0 (300 ms)
@F_DbIniti (300 ms)
0B38 [Cycic interrupta] (10 ms)

# Runtime groups of an F-program

The F-program is divided into several runtime groups, as shown in the table below.

Note

xx = Number of the cyclic interrupt OB

y = Consecutive numbering if several shutdown groups exist in a single cyclic interrupt OB

|Chart|F blocks|
|---|---|
|@F_ShutDn_xx|Shutdown logic of cyclic interrupt OB The shutdown logic is created with RTGLOGIC and standard logic blocks.|
|@F_ShutDn|Shutdown block Where an F-program is present in several cyclic interrupt OBs, this runtime group is integrated into the cyclic interrupt OB with the shortest call time. The shutdown logic is created with F_SHUTDN, RTGLOGIC, and standard logic blocks.|
|@F_CycCo-OBxx|F_CYC_CO, F_TEST and F_TESTC (for tests)|
|@F_TestMode|F_TESTM for managing safety mode|
|@F_IN_xx_y|F blocks which supply input values for the F-program (F_QUITES, communication receive blocks, conversion blocks from standard to F-data types, drivers for F-input modules) Runtime groups with user logic, in the sequence in which they were created by the user|

Compendium Part B - Process Safety (V9.0)
Operating Manual, 04/2018, A5E43228905-AA

# 7.2 Creating the safety program

@F_OUT_xx_y Blocks which further process output values of F-blocks (communication send blocks, conversion blocks from F-to standard data types, drivers for F-output modules, F_PLK, F_PLK_O, and F_DIAG for program sequence control)

@F_DbInitxx DB_INIT function block required for the cold restart of an F-runtime group

All required error OBs are added to the block container in the SIMATIC Manager.

There should only be one @F_IN_xx_y runtime group before the first F-user runtime group and one @F_OUT_xx_y runtime group after the last F-user runtime group. If the safety program consists of several shutdown groups (see section 6.2.6 (Page 87)), there is the @F_IN_xx_y and @F_OUT_xx_y runtime group both before and after the F-user runtime group in the shutdown groups.

# Rules for F-runtime groups in the safety program

- We recommend that you proceed as follows in order to make the lengths of the F-cycles as uniform as possible:
If you mix F-and standard runtime groups in a cyclic interrupt OB, you must execute the F-runtime groups before the standard runtime groups.
- The following defaults are set for properties of an F-runtime group:
- Reduction ratio = 1
- Phase offset = 0
- Properties Runtime Group
- Task: 0B37
- Name: HS104
- Comment:
- Reduction ratio:
- Phase offset:
- Optimize run sequence
- Active:
- You are not permitted to move automatically generated F-runtime groups (identified by @).

Note: The feature: Optimize Run Sequence in CFC can lead to a change in the collective signature and impair the response times of the safety program, and therefore should not be used in F-runtime groups.

With PCS 7 V7.0 SP1 and higher, it is no longer possible to optimize the run sequence for cyclic interrupt OBs with F-runtime groups.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.6 F-shutdown groups

An F-shutdown group is a self-contained unit in your safety program. It contains user logic which is executed or shut down simultaneously. The F-shutdown group contains one or a number of F-runtime groups which are assigned to a common cyclic interrupt OB. You can choose whether an error during execution of the safety program causes a full shutdown or a partial shutdown of the safety program. With a partial shutdown, only the F-shutdown group in which the error occurred is shut down.

# Rules for F-shutdown groups in the safety program

You are not permitted to directly interconnect F-blocks in different F-shutdown groups. Data can only be exchanged between F-shutdown groups using special communication blocks (F_S_xx, F_R_xx for F_BOOL and F_REAL data structures). Therefore, all F-channel drivers in an F-signal module must be in the same F-shutdown group, together with the module driver of the F-signal module.

# Defining F-shutdown groups

As soon as you place F-blocks in the CFC editor for the first time, all of the F-runtime groups in a single cyclic interrupt OB will form an F-shutdown group. You can configure each F-runtime group as the last F-runtime group in an F-shutdown group by placing the F_PSG_M ""selection block"". The F-system then creates a new F-shutdown group for all subsequent F-runtime groups until another F_PSG_M block is found.

# Distribution/Combination by means of manual placing of F_PSG_M

If you add or delete one or a number of F_PSG_M blocks in your project, the order of your F-shutdown groups will change. If you make a change to the layout of your F-shutdown groups, you must make sure that the F-module drivers and all assigned F-channel drivers are integrated in the same F-shutdown group. You can split one F-shutdown group into two F-shutdown groups. To do this, in the CFC editor's runtime editor, place the F_PSG_M block in the last F-runtime group which is to be assigned to the first F-shutdown group. All subsequent F-runtime groups will then be assigned to the second F-shutdown group. The number of F-shutdown groups is limited to 110 in all cyclic interrupt OBs. The system restricts the number of F-runtime groups in an F-shutdown group. You have the option of combining two F-shutdown groups. To do this, in the runtime editor of the CFC editor, delete the F_PSG_M block between the F-shutdown groups. If you combine a number of F-shutdown groups which exchange data via F-communication blocks in a single F-shutdown group, you need to remove these F-communications blocks and replace them with direct interconnections.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# Programming data exchange between F-shutdown groups

If you wish to exchange data between two F-shutdown groups, you are not permitted to interconnect the inputs and outputs directly. You need to use the following F-system blocks for data exchange between F blocks in different F-shutdown groups:

|F block|Description|
|---|---|
|F_S_R/F_R_R|Safe transfer of 5 data of the F_REAL type|
|F_S_BO/F_R_BO|Safe transfer of 5 data of the F_BOOL type|

# Procedure for data exchange

1. In the F-shutdown group from which data is to be transferred, add an F_S_R or F_S_BO type F-block.
2. In the F-shutdown group to which data is to be transferred, add an F_R_R or F_R_BO type F-block.
3. Interconnect the SD_R_xx inputs of the F_S_R or the SD_BO_xx inputs of the F_S_BO with the data to be transferred.
4. Interconnect the RD_R_xx outputs of the F_R_R or the RD_BO_xx outputs of the F_R_BO with the inputs of the F-block for further processing of the data received.
5. Interconnect the S_DB output of the send block with the S_DB input of the associated receive block.
6. Configure the TIMEOUT inputs of the F_R_R and F_R_BO receive blocks with the F-monitoring time calculated.
7. Configure the receive block substitute values for the scenario of a shutdown of the sending shutdown group.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Extract from a chart for shutdown group 1 with send block:

|42617|7ail-|7133 Cor|CHLDEA F|1e-0- Ck_INE|
|---|---|---|---|---|
|JdEO|90_8o_|J0_EO|90_BO|JD_Bo_|
|11_112|J0_EO_07|32_80_08|7193 Coz|CHLDEA|
|Q_EAII|4212 bloel|PaJJ_CX|0_Kod|ubSime|
|4nu|Lou|JG RG|P3c >| |

The connection to shutdown group 2 is established by linking output S_DB of block F_S_BO_1 in shutdown group 1 with input S_DB on block F_R_BO_1 in shutdown group 2.

Extract from a chart for shutdown group 2 with receive block:

|Xbaeha|32430|netr|
|---|---|---|
|314 = doxr|3281p|REC_E?|
|Recei|ER EL|RD_BO_|
|RD_BO_|8088Q_01|RD_EQ|
|RD_E?|302ZD|RD_Lo|

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

89

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.7 Data exchange between the F user program and standard user program

The standard program and the F-program use different data formats. Accordingly, special conversion blocks have to be used for data exchange.

F-CPU
F-program
Conversion blocks
Standard program
Converting F-data types to standard data types

If you need the standard user program to process data from the F-program further (for monitoring on the PCS 7 OS, for example), a block for F_FDatatype_Datatype data conversion will have to be interconnected in the user program so that the F-data types can be converted into standard data types. This converter blocks must be called in the standard user program (standard runtime group).

Extract from a process tag chart; converting the ""QBAD"" signal from F_BOOL to BOOL:

Note

The figure is available in its original size as appendix to the manual in the ZIP download of the checklists.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Standard and F-blocks are in different runtime groups. As shown here, some F-blocks have outputs (depicted in gray), which can be directly interconnected with standard PCS 7 blocks. PCS 7 blocks such as MonAnL, MonDiL, EventMESSAGE and their associated faceplates and process symbols are used to visualize fail-safe analog values and status messages as well as system states and operating states. If parameters cannot be directly further interconnected due to the safety data format, the conversion blocks described above can be used.

# Converting standard data types into F-data types

If data from the standard user program is to be processed further in the F-program, it will need to be converted. The blocks for data conversion from standard data types to F-data types (F_datatype_Fdatatype) can only be used in the F-program (F-runtime group).

Extract from an F-chart, conversion from REAL to F_REAL:

|7_R_FR_CONv|R -B|CE 32|CB39|:RELL|Aulci|
|---|---|---|---|---|---|
|DAII ZROC3?|VALUE DiT| | | | |

Note: The conversion blocks only perform data conversion; in other words, you will need to program additional measures in the F-program for plausibility checking purposes (with F_LIM_R, for example), in order to ensure that only non-hazardous values are possible.

# 7.2.8 How F-blocks with floating-point operations respond to number range overflows

Within the context of analog value processing, number range overflows/underflows can occur during arithmetic calculations (with division by 0, root from a negative number or number range overflow). With S7 F Systems Lib V1_3 and higher, the response is as follows in this case: The results ""Overflow (± infinite)"", ""Denormalized floating-point number"" or ""Invalid floating-point number (NaN)"" are:

- Either output at the output and can be processed further by subsequent F blocks
- Or signaled to special outputs. A substitute value is output if necessary.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

91

# Configuring the safety program

# 7.2 Creating the safety program

If the floating-point operation produces an invalid floating-point number (NaN) and no invalid floating-point number (NaN) existed as an address prior to this, the following diagnostics event will be entered in the F CPU's diagnostic buffer:

""Safety program: Invalid REAL number in DB"" (event ID 16#75D9)

You can use this entry in the diagnostic buffer to identify the F block with the invalid floating-point number (NaN).

If you are not able to prevent these events from occurring in your safety program, you will need to decide, on the basis of your application, whether you wish to respond to them in your safety program.

|AD?|nddie|101.o = 101.0_|10o.0|-10q|CUIL|5035|
|---|---|---|---|---|---|---|
|AD?|indoic|0b37 1.0e+3e|:Addle|0etz|3.0e-3e|10o.0|
| |100.0|3.0e-38| |CUIL|AD_|:itis|
|0837i|LIN_R|08371|#Addic|3402-32|c0m| |
| |ce-JE| |CUII|Sms|AD?|0BJ7i|
|Addue|J1o|~10O|02-J8|~100.0|CuTO|100.0=|
|DIV|LIK_R|:tris|100.0_| |100.-|CutQ|
|0.0|502S|SoRT|HXR|:Squo-|{AJi|hal|
|-10o.05|CVIQ|CUIL|5023_W| | | |

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.3 Configuring fail-safe AS-AS communication

You can use the F_LIM_R F block to check the result of a floating-point operation for overflow (± infinite) and invalid floating-point number (NaN).

- A limit violation is indicated by IN &gt; MAX or ""+ infinite"". ",What are the two methods for changing the input parameters of F blocks with F data types as described in the 'Compendium Part B - Process Safety (V9.0)'?,A2,"Changes can be made offline via the CFC editor or online through CFC test mode, provided safety mode is turned off.",2.3125,2.4375,3.703125,1.5625,0.57421875
17,pcs7_compendium_part_b_en-US_en-US.txt,37,5dea5c3b1bc7a2a2d3707ace8a7d6e3ed157196366f8ee88ba630fadc3d36b0e,"Changes to the input parameters of F blocks with F data types can be made as follows:

- Offline with the assistance of the CFC editor
- Online using CFC test mode with safety mode deactivated

Note

Values of PAR_ID and COMPLEM must not be changed. If errors in the safety data format are detected during the execution of the safety program, an F-STOP is triggered.

# 7.2.4 Run sequence of F-blocks

# Defining the run sequence

You define the run sequence in the CFC editor in the same way as for a standard user program. Changing the run sequence also changes the collective signature.

# Correct run sequence of F-blocks

The sequence of the F-blocks within the F-shutdown group is relevant. The number of F-runtime groups the F-shutdown group has been split into is of no relevance. Essentially, the correct run sequence of the various F-block types is as follows:

1. Placed automatically:
- F module driver for F-signal modules with inputs or with inputs and outputs
- F-communications blocks and F-system blocks for receiving
- F blocks for data conversion from standard value to F-structure
- F modules with OS connection
2. F channel drivers for inputs
3. F blocks for user logic

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

1. F channel drivers for outputs
2. Placed automatically:
- F block F_PLK
- F block F_PSG_M
- F module driver for F-signal modules with outputs or with inputs and outputs
- F-communications blocks and F-system blocks for sending
- F block F_PLK_O
- F block F_DIAG (S7 F-Systems Lib V1_3 and higher)

The run sequence of the blocks listed under items 1 and 5 is adjusted automatically when the F-program is compiled.
As if S7 F Systems Lib V1_3, separate runtime groups are created for the F blocks listed under points 1 and 5 during the first compilation.
The IPO principle (input, process, output) must always be observed when placing F-channel drivers and F-blocks for user logic.
This ensures that all inputs are read first, the relevant processing steps are performed, and all outputs are then written.
Furthermore, F-runtime groups and F-monitoring blocks that are only visible following compilation are also added automatically.

Note

No changes may be made in the automatically added runtime groups with the exception of the scan cycle monitoring on ""F_CYC_CO"" blocks and the parameter assignment of the ""F_SHUTDN"" block.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.5 F-runtime groups

During the programming of the safety program, F-blocks cannot be inserted directly into tasks (cyclic interrupt OBs). When a new CFC chart is created in PCS 7, the system will automatically generate a runtime group of the same name, into which the F-blocks placed in the corresponding CFC chart can then be inserted. An F-runtime group only becomes an F-runtime group (identified by a yellow folder and ""F"") when F-blocks are called in it.

0B37 [Cyclic interrupt7] (300 ms)
@CPU_RTI@CPU_RT
@F_ShutDn_37 (300 ms)
@F_ShutDn (300 ms)
CycCo-QB37 (300 ms)
CycCo-OB3ZIF_CYC_CO-OB37
@F_CycCo-OB3ZIF_TEST
@F_CycCo-OB37IF_TESTC
@F_TestMode (300 ms)
@F_IN_37_0 (300 ms)
SFC_109_F (300 ms)
AI_F (300 ms)
HS104_F (300 ms)
@F_OUT_37_0 (300 ms)
@F_DbIniti (300 ms)
0B38 [Cycic interrupta] (10 ms)

# Runtime groups of an F-program

The F-program is divided into several runtime groups, as shown in the table below.

Note

xx = Number of the cyclic interrupt OB

y = Consecutive numbering if several shutdown groups exist in a single cyclic interrupt OB

|Chart|F blocks|
|---|---|
|@F_ShutDn_xx|Shutdown logic of cyclic interrupt OB The shutdown logic is created with RTGLOGIC and standard logic blocks.|
|@F_ShutDn|Shutdown block Where an F-program is present in several cyclic interrupt OBs, this runtime group is integrated into the cyclic interrupt OB with the shortest call time. The shutdown logic is created with F_SHUTDN, RTGLOGIC, and standard logic blocks.|
|@F_CycCo-OBxx|F_CYC_CO, F_TEST and F_TESTC (for tests)|
|@F_TestMode|F_TESTM for managing safety mode|
|@F_IN_xx_y|F blocks which supply input values for the F-program (F_QUITES, communication receive blocks, conversion blocks from standard to F-data types, drivers for F-input modules) Runtime groups with user logic, in the sequence in which they were created by the user|

Compendium Part B - Process Safety (V9.0)
Operating Manual, 04/2018, A5E43228905-AA

# 7.2 Creating the safety program

@F_OUT_xx_y Blocks which further process output values of F-blocks (communication send blocks, conversion blocks from F-to standard data types, drivers for F-output modules, F_PLK, F_PLK_O, and F_DIAG for program sequence control)

@F_DbInitxx DB_INIT function block required for the cold restart of an F-runtime group

All required error OBs are added to the block container in the SIMATIC Manager.

There should only be one @F_IN_xx_y runtime group before the first F-user runtime group and one @F_OUT_xx_y runtime group after the last F-user runtime group. If the safety program consists of several shutdown groups (see section 6.2.6 (Page 87)), there is the @F_IN_xx_y and @F_OUT_xx_y runtime group both before and after the F-user runtime group in the shutdown groups.

# Rules for F-runtime groups in the safety program

- We recommend that you proceed as follows in order to make the lengths of the F-cycles as uniform as possible:
If you mix F-and standard runtime groups in a cyclic interrupt OB, you must execute the F-runtime groups before the standard runtime groups.
- The following defaults are set for properties of an F-runtime group:
- Reduction ratio = 1
- Phase offset = 0
- Properties Runtime Group
- Task: 0B37
- Name: HS104
- Comment:
- Reduction ratio:
- Phase offset:
- Optimize run sequence
- Active:
- You are not permitted to move automatically generated F-runtime groups (identified by @).

Note: The feature: Optimize Run Sequence in CFC can lead to a change in the collective signature and impair the response times of the safety program, and therefore should not be used in F-runtime groups.

With PCS 7 V7.0 SP1 and higher, it is no longer possible to optimize the run sequence for cyclic interrupt OBs with F-runtime groups.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.6 F-shutdown groups

An F-shutdown group is a self-contained unit in your safety program. It contains user logic which is executed or shut down simultaneously. The F-shutdown group contains one or a number of F-runtime groups which are assigned to a common cyclic interrupt OB. You can choose whether an error during execution of the safety program causes a full shutdown or a partial shutdown of the safety program. With a partial shutdown, only the F-shutdown group in which the error occurred is shut down.

# Rules for F-shutdown groups in the safety program

You are not permitted to directly interconnect F-blocks in different F-shutdown groups. Data can only be exchanged between F-shutdown groups using special communication blocks (F_S_xx, F_R_xx for F_BOOL and F_REAL data structures). Therefore, all F-channel drivers in an F-signal module must be in the same F-shutdown group, together with the module driver of the F-signal module.

# Defining F-shutdown groups

As soon as you place F-blocks in the CFC editor for the first time, all of the F-runtime groups in a single cyclic interrupt OB will form an F-shutdown group. You can configure each F-runtime group as the last F-runtime group in an F-shutdown group by placing the F_PSG_M ""selection block"". The F-system then creates a new F-shutdown group for all subsequent F-runtime groups until another F_PSG_M block is found.

# Distribution/Combination by means of manual placing of F_PSG_M

If you add or delete one or a number of F_PSG_M blocks in your project, the order of your F-shutdown groups will change. If you make a change to the layout of your F-shutdown groups, you must make sure that the F-module drivers and all assigned F-channel drivers are integrated in the same F-shutdown group. You can split one F-shutdown group into two F-shutdown groups. To do this, in the CFC editor's runtime editor, place the F_PSG_M block in the last F-runtime group which is to be assigned to the first F-shutdown group. All subsequent F-runtime groups will then be assigned to the second F-shutdown group. The number of F-shutdown groups is limited to 110 in all cyclic interrupt OBs. The system restricts the number of F-runtime groups in an F-shutdown group. You have the option of combining two F-shutdown groups. To do this, in the runtime editor of the CFC editor, delete the F_PSG_M block between the F-shutdown groups. If you combine a number of F-shutdown groups which exchange data via F-communication blocks in a single F-shutdown group, you need to remove these F-communications blocks and replace them with direct interconnections.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# Programming data exchange between F-shutdown groups

If you wish to exchange data between two F-shutdown groups, you are not permitted to interconnect the inputs and outputs directly. You need to use the following F-system blocks for data exchange between F blocks in different F-shutdown groups:

|F block|Description|
|---|---|
|F_S_R/F_R_R|Safe transfer of 5 data of the F_REAL type|
|F_S_BO/F_R_BO|Safe transfer of 5 data of the F_BOOL type|

# Procedure for data exchange

1. In the F-shutdown group from which data is to be transferred, add an F_S_R or F_S_BO type F-block.
2. In the F-shutdown group to which data is to be transferred, add an F_R_R or F_R_BO type F-block.
3. Interconnect the SD_R_xx inputs of the F_S_R or the SD_BO_xx inputs of the F_S_BO with the data to be transferred.
4. Interconnect the RD_R_xx outputs of the F_R_R or the RD_BO_xx outputs of the F_R_BO with the inputs of the F-block for further processing of the data received.
5. Interconnect the S_DB output of the send block with the S_DB input of the associated receive block.
6. Configure the TIMEOUT inputs of the F_R_R and F_R_BO receive blocks with the F-monitoring time calculated.
7. Configure the receive block substitute values for the scenario of a shutdown of the sending shutdown group.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Extract from a chart for shutdown group 1 with send block:

|42617|7ail-|7133 Cor|CHLDEA F|1e-0- Ck_INE|
|---|---|---|---|---|
|JdEO|90_8o_|J0_EO|90_BO|JD_Bo_|
|11_112|J0_EO_07|32_80_08|7193 Coz|CHLDEA|
|Q_EAII|4212 bloel|PaJJ_CX|0_Kod|ubSime|
|4nu|Lou|JG RG|P3c >| |

The connection to shutdown group 2 is established by linking output S_DB of block F_S_BO_1 in shutdown group 1 with input S_DB on block F_R_BO_1 in shutdown group 2.

Extract from a chart for shutdown group 2 with receive block:

|Xbaeha|32430|netr|
|---|---|---|
|314 = doxr|3281p|REC_E?|
|Recei|ER EL|RD_BO_|
|RD_BO_|8088Q_01|RD_EQ|
|RD_E?|302ZD|RD_Lo|

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

89

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.7 Data exchange between the F user program and standard user program

The standard program and the F-program use different data formats. Accordingly, special conversion blocks have to be used for data exchange.

F-CPU
F-program
Conversion blocks
Standard program
Converting F-data types to standard data types

If you need the standard user program to process data from the F-program further (for monitoring on the PCS 7 OS, for example), a block for F_FDatatype_Datatype data conversion will have to be interconnected in the user program so that the F-data types can be converted into standard data types. This converter blocks must be called in the standard user program (standard runtime group).

Extract from a process tag chart; converting the ""QBAD"" signal from F_BOOL to BOOL:

Note

The figure is available in its original size as appendix to the manual in the ZIP download of the checklists.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Standard and F-blocks are in different runtime groups. As shown here, some F-blocks have outputs (depicted in gray), which can be directly interconnected with standard PCS 7 blocks. PCS 7 blocks such as MonAnL, MonDiL, EventMESSAGE and their associated faceplates and process symbols are used to visualize fail-safe analog values and status messages as well as system states and operating states. If parameters cannot be directly further interconnected due to the safety data format, the conversion blocks described above can be used.

# Converting standard data types into F-data types

If data from the standard user program is to be processed further in the F-program, it will need to be converted. The blocks for data conversion from standard data types to F-data types (F_datatype_Fdatatype) can only be used in the F-program (F-runtime group).

Extract from an F-chart, conversion from REAL to F_REAL:

|7_R_FR_CONv|R -B|CE 32|CB39|:RELL|Aulci|
|---|---|---|---|---|---|
|DAII ZROC3?|VALUE DiT| | | | |

Note: The conversion blocks only perform data conversion; in other words, you will need to program additional measures in the F-program for plausibility checking purposes (with F_LIM_R, for example), in order to ensure that only non-hazardous values are possible.

# 7.2.8 How F-blocks with floating-point operations respond to number range overflows

Within the context of analog value processing, number range overflows/underflows can occur during arithmetic calculations (with division by 0, root from a negative number or number range overflow). With S7 F Systems Lib V1_3 and higher, the response is as follows in this case: The results ""Overflow (± infinite)"", ""Denormalized floating-point number"" or ""Invalid floating-point number (NaN)"" are:

- Either output at the output and can be processed further by subsequent F blocks
- Or signaled to special outputs. A substitute value is output if necessary.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

91

# Configuring the safety program

# 7.2 Creating the safety program

If the floating-point operation produces an invalid floating-point number (NaN) and no invalid floating-point number (NaN) existed as an address prior to this, the following diagnostics event will be entered in the F CPU's diagnostic buffer:

""Safety program: Invalid REAL number in DB"" (event ID 16#75D9)

You can use this entry in the diagnostic buffer to identify the F block with the invalid floating-point number (NaN).

If you are not able to prevent these events from occurring in your safety program, you will need to decide, on the basis of your application, whether you wish to respond to them in your safety program.

|AD?|nddie|101.o = 101.0_|10o.0|-10q|CUIL|5035|
|---|---|---|---|---|---|---|
|AD?|indoic|0b37 1.0e+3e|:Addle|0etz|3.0e-3e|10o.0|
| |100.0|3.0e-38| |CUIL|AD_|:itis|
|0837i|LIN_R|08371|#Addic|3402-32|c0m| |
| |ce-JE| |CUII|Sms|AD?|0BJ7i|
|Addue|J1o|~10O|02-J8|~100.0|CuTO|100.0=|
|DIV|LIK_R|:tris|100.0_| |100.-|CutQ|
|0.0|502S|SoRT|HXR|:Squo-|{AJi|hal|
|-10o.05|CVIQ|CUIL|5023_W| | | |

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.3 Configuring fail-safe AS-AS communication

You can use the F_LIM_R F block to check the result of a floating-point operation for overflow (± infinite) and invalid floating-point number (NaN).

- A limit violation is indicated by IN &gt; MAX or ""+ infinite"". ",What are the two methods for changing the input parameters of F blocks with F data types as described in the 'Compendium Part B - Process Safety (V9.0)'?,A3,"Offline modifications require the CFC editor, while online changes need CFC test mode with safety mode not active.",2.15625,2.234375,3.59375,1.484375,0.5859375
18,pcs7_compendium_part_b_en-US_en-US.txt,37,5dea5c3b1bc7a2a2d3707ace8a7d6e3ed157196366f8ee88ba630fadc3d36b0e,"Changes to the input parameters of F blocks with F data types can be made as follows:

- Offline with the assistance of the CFC editor
- Online using CFC test mode with safety mode deactivated

Note

Values of PAR_ID and COMPLEM must not be changed. If errors in the safety data format are detected during the execution of the safety program, an F-STOP is triggered.

# 7.2.4 Run sequence of F-blocks

# Defining the run sequence

You define the run sequence in the CFC editor in the same way as for a standard user program. Changing the run sequence also changes the collective signature.

# Correct run sequence of F-blocks

The sequence of the F-blocks within the F-shutdown group is relevant. The number of F-runtime groups the F-shutdown group has been split into is of no relevance. Essentially, the correct run sequence of the various F-block types is as follows:

1. Placed automatically:
- F module driver for F-signal modules with inputs or with inputs and outputs
- F-communications blocks and F-system blocks for receiving
- F blocks for data conversion from standard value to F-structure
- F modules with OS connection
2. F channel drivers for inputs
3. F blocks for user logic

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

1. F channel drivers for outputs
2. Placed automatically:
- F block F_PLK
- F block F_PSG_M
- F module driver for F-signal modules with outputs or with inputs and outputs
- F-communications blocks and F-system blocks for sending
- F block F_PLK_O
- F block F_DIAG (S7 F-Systems Lib V1_3 and higher)

The run sequence of the blocks listed under items 1 and 5 is adjusted automatically when the F-program is compiled.
As if S7 F Systems Lib V1_3, separate runtime groups are created for the F blocks listed under points 1 and 5 during the first compilation.
The IPO principle (input, process, output) must always be observed when placing F-channel drivers and F-blocks for user logic.
This ensures that all inputs are read first, the relevant processing steps are performed, and all outputs are then written.
Furthermore, F-runtime groups and F-monitoring blocks that are only visible following compilation are also added automatically.

Note

No changes may be made in the automatically added runtime groups with the exception of the scan cycle monitoring on ""F_CYC_CO"" blocks and the parameter assignment of the ""F_SHUTDN"" block.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.5 F-runtime groups

During the programming of the safety program, F-blocks cannot be inserted directly into tasks (cyclic interrupt OBs). When a new CFC chart is created in PCS 7, the system will automatically generate a runtime group of the same name, into which the F-blocks placed in the corresponding CFC chart can then be inserted. An F-runtime group only becomes an F-runtime group (identified by a yellow folder and ""F"") when F-blocks are called in it.

0B37 [Cyclic interrupt7] (300 ms)
@CPU_RTI@CPU_RT
@F_ShutDn_37 (300 ms)
@F_ShutDn (300 ms)
CycCo-QB37 (300 ms)
CycCo-OB3ZIF_CYC_CO-OB37
@F_CycCo-OB3ZIF_TEST
@F_CycCo-OB37IF_TESTC
@F_TestMode (300 ms)
@F_IN_37_0 (300 ms)
SFC_109_F (300 ms)
AI_F (300 ms)
HS104_F (300 ms)
@F_OUT_37_0 (300 ms)
@F_DbIniti (300 ms)
0B38 [Cycic interrupta] (10 ms)

# Runtime groups of an F-program

The F-program is divided into several runtime groups, as shown in the table below.

Note

xx = Number of the cyclic interrupt OB

y = Consecutive numbering if several shutdown groups exist in a single cyclic interrupt OB

|Chart|F blocks|
|---|---|
|@F_ShutDn_xx|Shutdown logic of cyclic interrupt OB The shutdown logic is created with RTGLOGIC and standard logic blocks.|
|@F_ShutDn|Shutdown block Where an F-program is present in several cyclic interrupt OBs, this runtime group is integrated into the cyclic interrupt OB with the shortest call time. The shutdown logic is created with F_SHUTDN, RTGLOGIC, and standard logic blocks.|
|@F_CycCo-OBxx|F_CYC_CO, F_TEST and F_TESTC (for tests)|
|@F_TestMode|F_TESTM for managing safety mode|
|@F_IN_xx_y|F blocks which supply input values for the F-program (F_QUITES, communication receive blocks, conversion blocks from standard to F-data types, drivers for F-input modules) Runtime groups with user logic, in the sequence in which they were created by the user|

Compendium Part B - Process Safety (V9.0)
Operating Manual, 04/2018, A5E43228905-AA

# 7.2 Creating the safety program

@F_OUT_xx_y Blocks which further process output values of F-blocks (communication send blocks, conversion blocks from F-to standard data types, drivers for F-output modules, F_PLK, F_PLK_O, and F_DIAG for program sequence control)

@F_DbInitxx DB_INIT function block required for the cold restart of an F-runtime group

All required error OBs are added to the block container in the SIMATIC Manager.

There should only be one @F_IN_xx_y runtime group before the first F-user runtime group and one @F_OUT_xx_y runtime group after the last F-user runtime group. If the safety program consists of several shutdown groups (see section 6.2.6 (Page 87)), there is the @F_IN_xx_y and @F_OUT_xx_y runtime group both before and after the F-user runtime group in the shutdown groups.

# Rules for F-runtime groups in the safety program

- We recommend that you proceed as follows in order to make the lengths of the F-cycles as uniform as possible:
If you mix F-and standard runtime groups in a cyclic interrupt OB, you must execute the F-runtime groups before the standard runtime groups.
- The following defaults are set for properties of an F-runtime group:
- Reduction ratio = 1
- Phase offset = 0
- Properties Runtime Group
- Task: 0B37
- Name: HS104
- Comment:
- Reduction ratio:
- Phase offset:
- Optimize run sequence
- Active:
- You are not permitted to move automatically generated F-runtime groups (identified by @).

Note: The feature: Optimize Run Sequence in CFC can lead to a change in the collective signature and impair the response times of the safety program, and therefore should not be used in F-runtime groups.

With PCS 7 V7.0 SP1 and higher, it is no longer possible to optimize the run sequence for cyclic interrupt OBs with F-runtime groups.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.6 F-shutdown groups

An F-shutdown group is a self-contained unit in your safety program. It contains user logic which is executed or shut down simultaneously. The F-shutdown group contains one or a number of F-runtime groups which are assigned to a common cyclic interrupt OB. You can choose whether an error during execution of the safety program causes a full shutdown or a partial shutdown of the safety program. With a partial shutdown, only the F-shutdown group in which the error occurred is shut down.

# Rules for F-shutdown groups in the safety program

You are not permitted to directly interconnect F-blocks in different F-shutdown groups. Data can only be exchanged between F-shutdown groups using special communication blocks (F_S_xx, F_R_xx for F_BOOL and F_REAL data structures). Therefore, all F-channel drivers in an F-signal module must be in the same F-shutdown group, together with the module driver of the F-signal module.

# Defining F-shutdown groups

As soon as you place F-blocks in the CFC editor for the first time, all of the F-runtime groups in a single cyclic interrupt OB will form an F-shutdown group. You can configure each F-runtime group as the last F-runtime group in an F-shutdown group by placing the F_PSG_M ""selection block"". The F-system then creates a new F-shutdown group for all subsequent F-runtime groups until another F_PSG_M block is found.

# Distribution/Combination by means of manual placing of F_PSG_M

If you add or delete one or a number of F_PSG_M blocks in your project, the order of your F-shutdown groups will change. If you make a change to the layout of your F-shutdown groups, you must make sure that the F-module drivers and all assigned F-channel drivers are integrated in the same F-shutdown group. You can split one F-shutdown group into two F-shutdown groups. To do this, in the CFC editor's runtime editor, place the F_PSG_M block in the last F-runtime group which is to be assigned to the first F-shutdown group. All subsequent F-runtime groups will then be assigned to the second F-shutdown group. The number of F-shutdown groups is limited to 110 in all cyclic interrupt OBs. The system restricts the number of F-runtime groups in an F-shutdown group. You have the option of combining two F-shutdown groups. To do this, in the runtime editor of the CFC editor, delete the F_PSG_M block between the F-shutdown groups. If you combine a number of F-shutdown groups which exchange data via F-communication blocks in a single F-shutdown group, you need to remove these F-communications blocks and replace them with direct interconnections.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# Programming data exchange between F-shutdown groups

If you wish to exchange data between two F-shutdown groups, you are not permitted to interconnect the inputs and outputs directly. You need to use the following F-system blocks for data exchange between F blocks in different F-shutdown groups:

|F block|Description|
|---|---|
|F_S_R/F_R_R|Safe transfer of 5 data of the F_REAL type|
|F_S_BO/F_R_BO|Safe transfer of 5 data of the F_BOOL type|

# Procedure for data exchange

1. In the F-shutdown group from which data is to be transferred, add an F_S_R or F_S_BO type F-block.
2. In the F-shutdown group to which data is to be transferred, add an F_R_R or F_R_BO type F-block.
3. Interconnect the SD_R_xx inputs of the F_S_R or the SD_BO_xx inputs of the F_S_BO with the data to be transferred.
4. Interconnect the RD_R_xx outputs of the F_R_R or the RD_BO_xx outputs of the F_R_BO with the inputs of the F-block for further processing of the data received.
5. Interconnect the S_DB output of the send block with the S_DB input of the associated receive block.
6. Configure the TIMEOUT inputs of the F_R_R and F_R_BO receive blocks with the F-monitoring time calculated.
7. Configure the receive block substitute values for the scenario of a shutdown of the sending shutdown group.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Extract from a chart for shutdown group 1 with send block:

|42617|7ail-|7133 Cor|CHLDEA F|1e-0- Ck_INE|
|---|---|---|---|---|
|JdEO|90_8o_|J0_EO|90_BO|JD_Bo_|
|11_112|J0_EO_07|32_80_08|7193 Coz|CHLDEA|
|Q_EAII|4212 bloel|PaJJ_CX|0_Kod|ubSime|
|4nu|Lou|JG RG|P3c >| |

The connection to shutdown group 2 is established by linking output S_DB of block F_S_BO_1 in shutdown group 1 with input S_DB on block F_R_BO_1 in shutdown group 2.

Extract from a chart for shutdown group 2 with receive block:

|Xbaeha|32430|netr|
|---|---|---|
|314 = doxr|3281p|REC_E?|
|Recei|ER EL|RD_BO_|
|RD_BO_|8088Q_01|RD_EQ|
|RD_E?|302ZD|RD_Lo|

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

89

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.7 Data exchange between the F user program and standard user program

The standard program and the F-program use different data formats. Accordingly, special conversion blocks have to be used for data exchange.

F-CPU
F-program
Conversion blocks
Standard program
Converting F-data types to standard data types

If you need the standard user program to process data from the F-program further (for monitoring on the PCS 7 OS, for example), a block for F_FDatatype_Datatype data conversion will have to be interconnected in the user program so that the F-data types can be converted into standard data types. This converter blocks must be called in the standard user program (standard runtime group).

Extract from a process tag chart; converting the ""QBAD"" signal from F_BOOL to BOOL:

Note

The figure is available in its original size as appendix to the manual in the ZIP download of the checklists.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Standard and F-blocks are in different runtime groups. As shown here, some F-blocks have outputs (depicted in gray), which can be directly interconnected with standard PCS 7 blocks. PCS 7 blocks such as MonAnL, MonDiL, EventMESSAGE and their associated faceplates and process symbols are used to visualize fail-safe analog values and status messages as well as system states and operating states. If parameters cannot be directly further interconnected due to the safety data format, the conversion blocks described above can be used.

# Converting standard data types into F-data types

If data from the standard user program is to be processed further in the F-program, it will need to be converted. The blocks for data conversion from standard data types to F-data types (F_datatype_Fdatatype) can only be used in the F-program (F-runtime group).

Extract from an F-chart, conversion from REAL to F_REAL:

|7_R_FR_CONv|R -B|CE 32|CB39|:RELL|Aulci|
|---|---|---|---|---|---|
|DAII ZROC3?|VALUE DiT| | | | |

Note: The conversion blocks only perform data conversion; in other words, you will need to program additional measures in the F-program for plausibility checking purposes (with F_LIM_R, for example), in order to ensure that only non-hazardous values are possible.

# 7.2.8 How F-blocks with floating-point operations respond to number range overflows

Within the context of analog value processing, number range overflows/underflows can occur during arithmetic calculations (with division by 0, root from a negative number or number range overflow). With S7 F Systems Lib V1_3 and higher, the response is as follows in this case: The results ""Overflow (± infinite)"", ""Denormalized floating-point number"" or ""Invalid floating-point number (NaN)"" are:

- Either output at the output and can be processed further by subsequent F blocks
- Or signaled to special outputs. A substitute value is output if necessary.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

91

# Configuring the safety program

# 7.2 Creating the safety program

If the floating-point operation produces an invalid floating-point number (NaN) and no invalid floating-point number (NaN) existed as an address prior to this, the following diagnostics event will be entered in the F CPU's diagnostic buffer:

""Safety program: Invalid REAL number in DB"" (event ID 16#75D9)

You can use this entry in the diagnostic buffer to identify the F block with the invalid floating-point number (NaN).

If you are not able to prevent these events from occurring in your safety program, you will need to decide, on the basis of your application, whether you wish to respond to them in your safety program.

|AD?|nddie|101.o = 101.0_|10o.0|-10q|CUIL|5035|
|---|---|---|---|---|---|---|
|AD?|indoic|0b37 1.0e+3e|:Addle|0etz|3.0e-3e|10o.0|
| |100.0|3.0e-38| |CUIL|AD_|:itis|
|0837i|LIN_R|08371|#Addic|3402-32|c0m| |
| |ce-JE| |CUII|Sms|AD?|0BJ7i|
|Addue|J1o|~10O|02-J8|~100.0|CuTO|100.0=|
|DIV|LIK_R|:tris|100.0_| |100.-|CutQ|
|0.0|502S|SoRT|HXR|:Squo-|{AJi|hal|
|-10o.05|CVIQ|CUIL|5023_W| | | |

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.3 Configuring fail-safe AS-AS communication

You can use the F_LIM_R F block to check the result of a floating-point operation for overflow (± infinite) and invalid floating-point number (NaN).

- A limit violation is indicated by IN &gt; MAX or ""+ infinite"". ",What are the two methods for changing the input parameters of F blocks with F data types as described in the 'Compendium Part B - Process Safety (V9.0)'?,A4,You can adjust input parameters either offline with the CFC editor's help or online by deactivating safety mode in CFC test mode.,2.640625,2.796875,3.671875,1.5859375,0.7109375
19,pcs7_compendium_part_b_en-US_en-US.txt,37,5dea5c3b1bc7a2a2d3707ace8a7d6e3ed157196366f8ee88ba630fadc3d36b0e,"Changes to the input parameters of F blocks with F data types can be made as follows:

- Offline with the assistance of the CFC editor
- Online using CFC test mode with safety mode deactivated

Note

Values of PAR_ID and COMPLEM must not be changed. If errors in the safety data format are detected during the execution of the safety program, an F-STOP is triggered.

# 7.2.4 Run sequence of F-blocks

# Defining the run sequence

You define the run sequence in the CFC editor in the same way as for a standard user program. Changing the run sequence also changes the collective signature.

# Correct run sequence of F-blocks

The sequence of the F-blocks within the F-shutdown group is relevant. The number of F-runtime groups the F-shutdown group has been split into is of no relevance. Essentially, the correct run sequence of the various F-block types is as follows:

1. Placed automatically:
- F module driver for F-signal modules with inputs or with inputs and outputs
- F-communications blocks and F-system blocks for receiving
- F blocks for data conversion from standard value to F-structure
- F modules with OS connection
2. F channel drivers for inputs
3. F blocks for user logic

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

1. F channel drivers for outputs
2. Placed automatically:
- F block F_PLK
- F block F_PSG_M
- F module driver for F-signal modules with outputs or with inputs and outputs
- F-communications blocks and F-system blocks for sending
- F block F_PLK_O
- F block F_DIAG (S7 F-Systems Lib V1_3 and higher)

The run sequence of the blocks listed under items 1 and 5 is adjusted automatically when the F-program is compiled.
As if S7 F Systems Lib V1_3, separate runtime groups are created for the F blocks listed under points 1 and 5 during the first compilation.
The IPO principle (input, process, output) must always be observed when placing F-channel drivers and F-blocks for user logic.
This ensures that all inputs are read first, the relevant processing steps are performed, and all outputs are then written.
Furthermore, F-runtime groups and F-monitoring blocks that are only visible following compilation are also added automatically.

Note

No changes may be made in the automatically added runtime groups with the exception of the scan cycle monitoring on ""F_CYC_CO"" blocks and the parameter assignment of the ""F_SHUTDN"" block.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.5 F-runtime groups

During the programming of the safety program, F-blocks cannot be inserted directly into tasks (cyclic interrupt OBs). When a new CFC chart is created in PCS 7, the system will automatically generate a runtime group of the same name, into which the F-blocks placed in the corresponding CFC chart can then be inserted. An F-runtime group only becomes an F-runtime group (identified by a yellow folder and ""F"") when F-blocks are called in it.

0B37 [Cyclic interrupt7] (300 ms)
@CPU_RTI@CPU_RT
@F_ShutDn_37 (300 ms)
@F_ShutDn (300 ms)
CycCo-QB37 (300 ms)
CycCo-OB3ZIF_CYC_CO-OB37
@F_CycCo-OB3ZIF_TEST
@F_CycCo-OB37IF_TESTC
@F_TestMode (300 ms)
@F_IN_37_0 (300 ms)
SFC_109_F (300 ms)
AI_F (300 ms)
HS104_F (300 ms)
@F_OUT_37_0 (300 ms)
@F_DbIniti (300 ms)
0B38 [Cycic interrupta] (10 ms)

# Runtime groups of an F-program

The F-program is divided into several runtime groups, as shown in the table below.

Note

xx = Number of the cyclic interrupt OB

y = Consecutive numbering if several shutdown groups exist in a single cyclic interrupt OB

|Chart|F blocks|
|---|---|
|@F_ShutDn_xx|Shutdown logic of cyclic interrupt OB The shutdown logic is created with RTGLOGIC and standard logic blocks.|
|@F_ShutDn|Shutdown block Where an F-program is present in several cyclic interrupt OBs, this runtime group is integrated into the cyclic interrupt OB with the shortest call time. The shutdown logic is created with F_SHUTDN, RTGLOGIC, and standard logic blocks.|
|@F_CycCo-OBxx|F_CYC_CO, F_TEST and F_TESTC (for tests)|
|@F_TestMode|F_TESTM for managing safety mode|
|@F_IN_xx_y|F blocks which supply input values for the F-program (F_QUITES, communication receive blocks, conversion blocks from standard to F-data types, drivers for F-input modules) Runtime groups with user logic, in the sequence in which they were created by the user|

Compendium Part B - Process Safety (V9.0)
Operating Manual, 04/2018, A5E43228905-AA

# 7.2 Creating the safety program

@F_OUT_xx_y Blocks which further process output values of F-blocks (communication send blocks, conversion blocks from F-to standard data types, drivers for F-output modules, F_PLK, F_PLK_O, and F_DIAG for program sequence control)

@F_DbInitxx DB_INIT function block required for the cold restart of an F-runtime group

All required error OBs are added to the block container in the SIMATIC Manager.

There should only be one @F_IN_xx_y runtime group before the first F-user runtime group and one @F_OUT_xx_y runtime group after the last F-user runtime group. If the safety program consists of several shutdown groups (see section 6.2.6 (Page 87)), there is the @F_IN_xx_y and @F_OUT_xx_y runtime group both before and after the F-user runtime group in the shutdown groups.

# Rules for F-runtime groups in the safety program

- We recommend that you proceed as follows in order to make the lengths of the F-cycles as uniform as possible:
If you mix F-and standard runtime groups in a cyclic interrupt OB, you must execute the F-runtime groups before the standard runtime groups.
- The following defaults are set for properties of an F-runtime group:
- Reduction ratio = 1
- Phase offset = 0
- Properties Runtime Group
- Task: 0B37
- Name: HS104
- Comment:
- Reduction ratio:
- Phase offset:
- Optimize run sequence
- Active:
- You are not permitted to move automatically generated F-runtime groups (identified by @).

Note: The feature: Optimize Run Sequence in CFC can lead to a change in the collective signature and impair the response times of the safety program, and therefore should not be used in F-runtime groups.

With PCS 7 V7.0 SP1 and higher, it is no longer possible to optimize the run sequence for cyclic interrupt OBs with F-runtime groups.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.6 F-shutdown groups

An F-shutdown group is a self-contained unit in your safety program. It contains user logic which is executed or shut down simultaneously. The F-shutdown group contains one or a number of F-runtime groups which are assigned to a common cyclic interrupt OB. You can choose whether an error during execution of the safety program causes a full shutdown or a partial shutdown of the safety program. With a partial shutdown, only the F-shutdown group in which the error occurred is shut down.

# Rules for F-shutdown groups in the safety program

You are not permitted to directly interconnect F-blocks in different F-shutdown groups. Data can only be exchanged between F-shutdown groups using special communication blocks (F_S_xx, F_R_xx for F_BOOL and F_REAL data structures). Therefore, all F-channel drivers in an F-signal module must be in the same F-shutdown group, together with the module driver of the F-signal module.

# Defining F-shutdown groups

As soon as you place F-blocks in the CFC editor for the first time, all of the F-runtime groups in a single cyclic interrupt OB will form an F-shutdown group. You can configure each F-runtime group as the last F-runtime group in an F-shutdown group by placing the F_PSG_M ""selection block"". The F-system then creates a new F-shutdown group for all subsequent F-runtime groups until another F_PSG_M block is found.

# Distribution/Combination by means of manual placing of F_PSG_M

If you add or delete one or a number of F_PSG_M blocks in your project, the order of your F-shutdown groups will change. If you make a change to the layout of your F-shutdown groups, you must make sure that the F-module drivers and all assigned F-channel drivers are integrated in the same F-shutdown group. You can split one F-shutdown group into two F-shutdown groups. To do this, in the CFC editor's runtime editor, place the F_PSG_M block in the last F-runtime group which is to be assigned to the first F-shutdown group. All subsequent F-runtime groups will then be assigned to the second F-shutdown group. The number of F-shutdown groups is limited to 110 in all cyclic interrupt OBs. The system restricts the number of F-runtime groups in an F-shutdown group. You have the option of combining two F-shutdown groups. To do this, in the runtime editor of the CFC editor, delete the F_PSG_M block between the F-shutdown groups. If you combine a number of F-shutdown groups which exchange data via F-communication blocks in a single F-shutdown group, you need to remove these F-communications blocks and replace them with direct interconnections.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# Programming data exchange between F-shutdown groups

If you wish to exchange data between two F-shutdown groups, you are not permitted to interconnect the inputs and outputs directly. You need to use the following F-system blocks for data exchange between F blocks in different F-shutdown groups:

|F block|Description|
|---|---|
|F_S_R/F_R_R|Safe transfer of 5 data of the F_REAL type|
|F_S_BO/F_R_BO|Safe transfer of 5 data of the F_BOOL type|

# Procedure for data exchange

1. In the F-shutdown group from which data is to be transferred, add an F_S_R or F_S_BO type F-block.
2. In the F-shutdown group to which data is to be transferred, add an F_R_R or F_R_BO type F-block.
3. Interconnect the SD_R_xx inputs of the F_S_R or the SD_BO_xx inputs of the F_S_BO with the data to be transferred.
4. Interconnect the RD_R_xx outputs of the F_R_R or the RD_BO_xx outputs of the F_R_BO with the inputs of the F-block for further processing of the data received.
5. Interconnect the S_DB output of the send block with the S_DB input of the associated receive block.
6. Configure the TIMEOUT inputs of the F_R_R and F_R_BO receive blocks with the F-monitoring time calculated.
7. Configure the receive block substitute values for the scenario of a shutdown of the sending shutdown group.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Extract from a chart for shutdown group 1 with send block:

|42617|7ail-|7133 Cor|CHLDEA F|1e-0- Ck_INE|
|---|---|---|---|---|
|JdEO|90_8o_|J0_EO|90_BO|JD_Bo_|
|11_112|J0_EO_07|32_80_08|7193 Coz|CHLDEA|
|Q_EAII|4212 bloel|PaJJ_CX|0_Kod|ubSime|
|4nu|Lou|JG RG|P3c >| |

The connection to shutdown group 2 is established by linking output S_DB of block F_S_BO_1 in shutdown group 1 with input S_DB on block F_R_BO_1 in shutdown group 2.

Extract from a chart for shutdown group 2 with receive block:

|Xbaeha|32430|netr|
|---|---|---|
|314 = doxr|3281p|REC_E?|
|Recei|ER EL|RD_BO_|
|RD_BO_|8088Q_01|RD_EQ|
|RD_E?|302ZD|RD_Lo|

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

89

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.7 Data exchange between the F user program and standard user program

The standard program and the F-program use different data formats. Accordingly, special conversion blocks have to be used for data exchange.

F-CPU
F-program
Conversion blocks
Standard program
Converting F-data types to standard data types

If you need the standard user program to process data from the F-program further (for monitoring on the PCS 7 OS, for example), a block for F_FDatatype_Datatype data conversion will have to be interconnected in the user program so that the F-data types can be converted into standard data types. This converter blocks must be called in the standard user program (standard runtime group).

Extract from a process tag chart; converting the ""QBAD"" signal from F_BOOL to BOOL:

Note

The figure is available in its original size as appendix to the manual in the ZIP download of the checklists.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Standard and F-blocks are in different runtime groups. As shown here, some F-blocks have outputs (depicted in gray), which can be directly interconnected with standard PCS 7 blocks. PCS 7 blocks such as MonAnL, MonDiL, EventMESSAGE and their associated faceplates and process symbols are used to visualize fail-safe analog values and status messages as well as system states and operating states. If parameters cannot be directly further interconnected due to the safety data format, the conversion blocks described above can be used.

# Converting standard data types into F-data types

If data from the standard user program is to be processed further in the F-program, it will need to be converted. The blocks for data conversion from standard data types to F-data types (F_datatype_Fdatatype) can only be used in the F-program (F-runtime group).

Extract from an F-chart, conversion from REAL to F_REAL:

|7_R_FR_CONv|R -B|CE 32|CB39|:RELL|Aulci|
|---|---|---|---|---|---|
|DAII ZROC3?|VALUE DiT| | | | |

Note: The conversion blocks only perform data conversion; in other words, you will need to program additional measures in the F-program for plausibility checking purposes (with F_LIM_R, for example), in order to ensure that only non-hazardous values are possible.

# 7.2.8 How F-blocks with floating-point operations respond to number range overflows

Within the context of analog value processing, number range overflows/underflows can occur during arithmetic calculations (with division by 0, root from a negative number or number range overflow). With S7 F Systems Lib V1_3 and higher, the response is as follows in this case: The results ""Overflow (± infinite)"", ""Denormalized floating-point number"" or ""Invalid floating-point number (NaN)"" are:

- Either output at the output and can be processed further by subsequent F blocks
- Or signaled to special outputs. A substitute value is output if necessary.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

91

# Configuring the safety program

# 7.2 Creating the safety program

If the floating-point operation produces an invalid floating-point number (NaN) and no invalid floating-point number (NaN) existed as an address prior to this, the following diagnostics event will be entered in the F CPU's diagnostic buffer:

""Safety program: Invalid REAL number in DB"" (event ID 16#75D9)

You can use this entry in the diagnostic buffer to identify the F block with the invalid floating-point number (NaN).

If you are not able to prevent these events from occurring in your safety program, you will need to decide, on the basis of your application, whether you wish to respond to them in your safety program.

|AD?|nddie|101.o = 101.0_|10o.0|-10q|CUIL|5035|
|---|---|---|---|---|---|---|
|AD?|indoic|0b37 1.0e+3e|:Addle|0etz|3.0e-3e|10o.0|
| |100.0|3.0e-38| |CUIL|AD_|:itis|
|0837i|LIN_R|08371|#Addic|3402-32|c0m| |
| |ce-JE| |CUII|Sms|AD?|0BJ7i|
|Addue|J1o|~10O|02-J8|~100.0|CuTO|100.0=|
|DIV|LIK_R|:tris|100.0_| |100.-|CutQ|
|0.0|502S|SoRT|HXR|:Squo-|{AJi|hal|
|-10o.05|CVIQ|CUIL|5023_W| | | |

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.3 Configuring fail-safe AS-AS communication

You can use the F_LIM_R F block to check the result of a floating-point operation for overflow (± infinite) and invalid floating-point number (NaN).

- A limit violation is indicated by IN &gt; MAX or ""+ infinite"". ",What are the two methods for changing the input parameters of F blocks with F data types as described in the 'Compendium Part B - Process Safety (V9.0)'?,A5,The 'Compendium Part B - Process Safety (V9.0)' outlines two approaches: offline editing with the CFC editor and online adjustments in CFC test mode when safety mode is off.,2.84375,3.046875,3.84375,1.7265625,0.76953125
20,pcs7_compendium_part_b_en-US_en-US.txt,37,5dea5c3b1bc7a2a2d3707ace8a7d6e3ed157196366f8ee88ba630fadc3d36b0e,"Changes to the input parameters of F blocks with F data types can be made as follows:

- Offline with the assistance of the CFC editor
- Online using CFC test mode with safety mode deactivated

Note

Values of PAR_ID and COMPLEM must not be changed. If errors in the safety data format are detected during the execution of the safety program, an F-STOP is triggered.

# 7.2.4 Run sequence of F-blocks

# Defining the run sequence

You define the run sequence in the CFC editor in the same way as for a standard user program. Changing the run sequence also changes the collective signature.

# Correct run sequence of F-blocks

The sequence of the F-blocks within the F-shutdown group is relevant. The number of F-runtime groups the F-shutdown group has been split into is of no relevance. Essentially, the correct run sequence of the various F-block types is as follows:

1. Placed automatically:
- F module driver for F-signal modules with inputs or with inputs and outputs
- F-communications blocks and F-system blocks for receiving
- F blocks for data conversion from standard value to F-structure
- F modules with OS connection
2. F channel drivers for inputs
3. F blocks for user logic

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

1. F channel drivers for outputs
2. Placed automatically:
- F block F_PLK
- F block F_PSG_M
- F module driver for F-signal modules with outputs or with inputs and outputs
- F-communications blocks and F-system blocks for sending
- F block F_PLK_O
- F block F_DIAG (S7 F-Systems Lib V1_3 and higher)

The run sequence of the blocks listed under items 1 and 5 is adjusted automatically when the F-program is compiled.
As if S7 F Systems Lib V1_3, separate runtime groups are created for the F blocks listed under points 1 and 5 during the first compilation.
The IPO principle (input, process, output) must always be observed when placing F-channel drivers and F-blocks for user logic.
This ensures that all inputs are read first, the relevant processing steps are performed, and all outputs are then written.
Furthermore, F-runtime groups and F-monitoring blocks that are only visible following compilation are also added automatically.

Note

No changes may be made in the automatically added runtime groups with the exception of the scan cycle monitoring on ""F_CYC_CO"" blocks and the parameter assignment of the ""F_SHUTDN"" block.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.5 F-runtime groups

During the programming of the safety program, F-blocks cannot be inserted directly into tasks (cyclic interrupt OBs). When a new CFC chart is created in PCS 7, the system will automatically generate a runtime group of the same name, into which the F-blocks placed in the corresponding CFC chart can then be inserted. An F-runtime group only becomes an F-runtime group (identified by a yellow folder and ""F"") when F-blocks are called in it.

0B37 [Cyclic interrupt7] (300 ms)
@CPU_RTI@CPU_RT
@F_ShutDn_37 (300 ms)
@F_ShutDn (300 ms)
CycCo-QB37 (300 ms)
CycCo-OB3ZIF_CYC_CO-OB37
@F_CycCo-OB3ZIF_TEST
@F_CycCo-OB37IF_TESTC
@F_TestMode (300 ms)
@F_IN_37_0 (300 ms)
SFC_109_F (300 ms)
AI_F (300 ms)
HS104_F (300 ms)
@F_OUT_37_0 (300 ms)
@F_DbIniti (300 ms)
0B38 [Cycic interrupta] (10 ms)

# Runtime groups of an F-program

The F-program is divided into several runtime groups, as shown in the table below.

Note

xx = Number of the cyclic interrupt OB

y = Consecutive numbering if several shutdown groups exist in a single cyclic interrupt OB

|Chart|F blocks|
|---|---|
|@F_ShutDn_xx|Shutdown logic of cyclic interrupt OB The shutdown logic is created with RTGLOGIC and standard logic blocks.|
|@F_ShutDn|Shutdown block Where an F-program is present in several cyclic interrupt OBs, this runtime group is integrated into the cyclic interrupt OB with the shortest call time. The shutdown logic is created with F_SHUTDN, RTGLOGIC, and standard logic blocks.|
|@F_CycCo-OBxx|F_CYC_CO, F_TEST and F_TESTC (for tests)|
|@F_TestMode|F_TESTM for managing safety mode|
|@F_IN_xx_y|F blocks which supply input values for the F-program (F_QUITES, communication receive blocks, conversion blocks from standard to F-data types, drivers for F-input modules) Runtime groups with user logic, in the sequence in which they were created by the user|

Compendium Part B - Process Safety (V9.0)
Operating Manual, 04/2018, A5E43228905-AA

# 7.2 Creating the safety program

@F_OUT_xx_y Blocks which further process output values of F-blocks (communication send blocks, conversion blocks from F-to standard data types, drivers for F-output modules, F_PLK, F_PLK_O, and F_DIAG for program sequence control)

@F_DbInitxx DB_INIT function block required for the cold restart of an F-runtime group

All required error OBs are added to the block container in the SIMATIC Manager.

There should only be one @F_IN_xx_y runtime group before the first F-user runtime group and one @F_OUT_xx_y runtime group after the last F-user runtime group. If the safety program consists of several shutdown groups (see section 6.2.6 (Page 87)), there is the @F_IN_xx_y and @F_OUT_xx_y runtime group both before and after the F-user runtime group in the shutdown groups.

# Rules for F-runtime groups in the safety program

- We recommend that you proceed as follows in order to make the lengths of the F-cycles as uniform as possible:
If you mix F-and standard runtime groups in a cyclic interrupt OB, you must execute the F-runtime groups before the standard runtime groups.
- The following defaults are set for properties of an F-runtime group:
- Reduction ratio = 1
- Phase offset = 0
- Properties Runtime Group
- Task: 0B37
- Name: HS104
- Comment:
- Reduction ratio:
- Phase offset:
- Optimize run sequence
- Active:
- You are not permitted to move automatically generated F-runtime groups (identified by @).

Note: The feature: Optimize Run Sequence in CFC can lead to a change in the collective signature and impair the response times of the safety program, and therefore should not be used in F-runtime groups.

With PCS 7 V7.0 SP1 and higher, it is no longer possible to optimize the run sequence for cyclic interrupt OBs with F-runtime groups.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.6 F-shutdown groups

An F-shutdown group is a self-contained unit in your safety program. It contains user logic which is executed or shut down simultaneously. The F-shutdown group contains one or a number of F-runtime groups which are assigned to a common cyclic interrupt OB. You can choose whether an error during execution of the safety program causes a full shutdown or a partial shutdown of the safety program. With a partial shutdown, only the F-shutdown group in which the error occurred is shut down.

# Rules for F-shutdown groups in the safety program

You are not permitted to directly interconnect F-blocks in different F-shutdown groups. Data can only be exchanged between F-shutdown groups using special communication blocks (F_S_xx, F_R_xx for F_BOOL and F_REAL data structures). Therefore, all F-channel drivers in an F-signal module must be in the same F-shutdown group, together with the module driver of the F-signal module.

# Defining F-shutdown groups

As soon as you place F-blocks in the CFC editor for the first time, all of the F-runtime groups in a single cyclic interrupt OB will form an F-shutdown group. You can configure each F-runtime group as the last F-runtime group in an F-shutdown group by placing the F_PSG_M ""selection block"". The F-system then creates a new F-shutdown group for all subsequent F-runtime groups until another F_PSG_M block is found.

# Distribution/Combination by means of manual placing of F_PSG_M

If you add or delete one or a number of F_PSG_M blocks in your project, the order of your F-shutdown groups will change. If you make a change to the layout of your F-shutdown groups, you must make sure that the F-module drivers and all assigned F-channel drivers are integrated in the same F-shutdown group. You can split one F-shutdown group into two F-shutdown groups. To do this, in the CFC editor's runtime editor, place the F_PSG_M block in the last F-runtime group which is to be assigned to the first F-shutdown group. All subsequent F-runtime groups will then be assigned to the second F-shutdown group. The number of F-shutdown groups is limited to 110 in all cyclic interrupt OBs. The system restricts the number of F-runtime groups in an F-shutdown group. You have the option of combining two F-shutdown groups. To do this, in the runtime editor of the CFC editor, delete the F_PSG_M block between the F-shutdown groups. If you combine a number of F-shutdown groups which exchange data via F-communication blocks in a single F-shutdown group, you need to remove these F-communications blocks and replace them with direct interconnections.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# Programming data exchange between F-shutdown groups

If you wish to exchange data between two F-shutdown groups, you are not permitted to interconnect the inputs and outputs directly. You need to use the following F-system blocks for data exchange between F blocks in different F-shutdown groups:

|F block|Description|
|---|---|
|F_S_R/F_R_R|Safe transfer of 5 data of the F_REAL type|
|F_S_BO/F_R_BO|Safe transfer of 5 data of the F_BOOL type|

# Procedure for data exchange

1. In the F-shutdown group from which data is to be transferred, add an F_S_R or F_S_BO type F-block.
2. In the F-shutdown group to which data is to be transferred, add an F_R_R or F_R_BO type F-block.
3. Interconnect the SD_R_xx inputs of the F_S_R or the SD_BO_xx inputs of the F_S_BO with the data to be transferred.
4. Interconnect the RD_R_xx outputs of the F_R_R or the RD_BO_xx outputs of the F_R_BO with the inputs of the F-block for further processing of the data received.
5. Interconnect the S_DB output of the send block with the S_DB input of the associated receive block.
6. Configure the TIMEOUT inputs of the F_R_R and F_R_BO receive blocks with the F-monitoring time calculated.
7. Configure the receive block substitute values for the scenario of a shutdown of the sending shutdown group.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Extract from a chart for shutdown group 1 with send block:

|42617|7ail-|7133 Cor|CHLDEA F|1e-0- Ck_INE|
|---|---|---|---|---|
|JdEO|90_8o_|J0_EO|90_BO|JD_Bo_|
|11_112|J0_EO_07|32_80_08|7193 Coz|CHLDEA|
|Q_EAII|4212 bloel|PaJJ_CX|0_Kod|ubSime|
|4nu|Lou|JG RG|P3c >| |

The connection to shutdown group 2 is established by linking output S_DB of block F_S_BO_1 in shutdown group 1 with input S_DB on block F_R_BO_1 in shutdown group 2.

Extract from a chart for shutdown group 2 with receive block:

|Xbaeha|32430|netr|
|---|---|---|
|314 = doxr|3281p|REC_E?|
|Recei|ER EL|RD_BO_|
|RD_BO_|8088Q_01|RD_EQ|
|RD_E?|302ZD|RD_Lo|

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

89

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.7 Data exchange between the F user program and standard user program

The standard program and the F-program use different data formats. Accordingly, special conversion blocks have to be used for data exchange.

F-CPU
F-program
Conversion blocks
Standard program
Converting F-data types to standard data types

If you need the standard user program to process data from the F-program further (for monitoring on the PCS 7 OS, for example), a block for F_FDatatype_Datatype data conversion will have to be interconnected in the user program so that the F-data types can be converted into standard data types. This converter blocks must be called in the standard user program (standard runtime group).

Extract from a process tag chart; converting the ""QBAD"" signal from F_BOOL to BOOL:

Note

The figure is available in its original size as appendix to the manual in the ZIP download of the checklists.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Standard and F-blocks are in different runtime groups. As shown here, some F-blocks have outputs (depicted in gray), which can be directly interconnected with standard PCS 7 blocks. PCS 7 blocks such as MonAnL, MonDiL, EventMESSAGE and their associated faceplates and process symbols are used to visualize fail-safe analog values and status messages as well as system states and operating states. If parameters cannot be directly further interconnected due to the safety data format, the conversion blocks described above can be used.

# Converting standard data types into F-data types

If data from the standard user program is to be processed further in the F-program, it will need to be converted. The blocks for data conversion from standard data types to F-data types (F_datatype_Fdatatype) can only be used in the F-program (F-runtime group).

Extract from an F-chart, conversion from REAL to F_REAL:

|7_R_FR_CONv|R -B|CE 32|CB39|:RELL|Aulci|
|---|---|---|---|---|---|
|DAII ZROC3?|VALUE DiT| | | | |

Note: The conversion blocks only perform data conversion; in other words, you will need to program additional measures in the F-program for plausibility checking purposes (with F_LIM_R, for example), in order to ensure that only non-hazardous values are possible.

# 7.2.8 How F-blocks with floating-point operations respond to number range overflows

Within the context of analog value processing, number range overflows/underflows can occur during arithmetic calculations (with division by 0, root from a negative number or number range overflow). With S7 F Systems Lib V1_3 and higher, the response is as follows in this case: The results ""Overflow (± infinite)"", ""Denormalized floating-point number"" or ""Invalid floating-point number (NaN)"" are:

- Either output at the output and can be processed further by subsequent F blocks
- Or signaled to special outputs. A substitute value is output if necessary.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

91

# Configuring the safety program

# 7.2 Creating the safety program

If the floating-point operation produces an invalid floating-point number (NaN) and no invalid floating-point number (NaN) existed as an address prior to this, the following diagnostics event will be entered in the F CPU's diagnostic buffer:

""Safety program: Invalid REAL number in DB"" (event ID 16#75D9)

You can use this entry in the diagnostic buffer to identify the F block with the invalid floating-point number (NaN).

If you are not able to prevent these events from occurring in your safety program, you will need to decide, on the basis of your application, whether you wish to respond to them in your safety program.

|AD?|nddie|101.o = 101.0_|10o.0|-10q|CUIL|5035|
|---|---|---|---|---|---|---|
|AD?|indoic|0b37 1.0e+3e|:Addle|0etz|3.0e-3e|10o.0|
| |100.0|3.0e-38| |CUIL|AD_|:itis|
|0837i|LIN_R|08371|#Addic|3402-32|c0m| |
| |ce-JE| |CUII|Sms|AD?|0BJ7i|
|Addue|J1o|~10O|02-J8|~100.0|CuTO|100.0=|
|DIV|LIK_R|:tris|100.0_| |100.-|CutQ|
|0.0|502S|SoRT|HXR|:Squo-|{AJi|hal|
|-10o.05|CVIQ|CUIL|5023_W| | | |

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.3 Configuring fail-safe AS-AS communication

You can use the F_LIM_R F block to check the result of a floating-point operation for overflow (± infinite) and invalid floating-point number (NaN).

- A limit violation is indicated by IN &gt; MAX or ""+ infinite"". ",What blocks are placed automatically during the configuration of the safety program according to the 'Compendium Part B - Process Safety (V9.0)'?,A1,"F block F_PLK, F block F_PSG_M, F module driver for F-signal modules with outputs or with inputs and outputs, F-communications blocks and F-system blocks for sending, F block F_PLK_O, F block F_DIAG (S7 F-Systems Lib V1_3 and higher).",2.4375,2.640625,3.359375,1.875,0.796875
21,pcs7_compendium_part_b_en-US_en-US.txt,37,5dea5c3b1bc7a2a2d3707ace8a7d6e3ed157196366f8ee88ba630fadc3d36b0e,"Changes to the input parameters of F blocks with F data types can be made as follows:

- Offline with the assistance of the CFC editor
- Online using CFC test mode with safety mode deactivated

Note

Values of PAR_ID and COMPLEM must not be changed. If errors in the safety data format are detected during the execution of the safety program, an F-STOP is triggered.

# 7.2.4 Run sequence of F-blocks

# Defining the run sequence

You define the run sequence in the CFC editor in the same way as for a standard user program. Changing the run sequence also changes the collective signature.

# Correct run sequence of F-blocks

The sequence of the F-blocks within the F-shutdown group is relevant. The number of F-runtime groups the F-shutdown group has been split into is of no relevance. Essentially, the correct run sequence of the various F-block types is as follows:

1. Placed automatically:
- F module driver for F-signal modules with inputs or with inputs and outputs
- F-communications blocks and F-system blocks for receiving
- F blocks for data conversion from standard value to F-structure
- F modules with OS connection
2. F channel drivers for inputs
3. F blocks for user logic

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

1. F channel drivers for outputs
2. Placed automatically:
- F block F_PLK
- F block F_PSG_M
- F module driver for F-signal modules with outputs or with inputs and outputs
- F-communications blocks and F-system blocks for sending
- F block F_PLK_O
- F block F_DIAG (S7 F-Systems Lib V1_3 and higher)

The run sequence of the blocks listed under items 1 and 5 is adjusted automatically when the F-program is compiled.
As if S7 F Systems Lib V1_3, separate runtime groups are created for the F blocks listed under points 1 and 5 during the first compilation.
The IPO principle (input, process, output) must always be observed when placing F-channel drivers and F-blocks for user logic.
This ensures that all inputs are read first, the relevant processing steps are performed, and all outputs are then written.
Furthermore, F-runtime groups and F-monitoring blocks that are only visible following compilation are also added automatically.

Note

No changes may be made in the automatically added runtime groups with the exception of the scan cycle monitoring on ""F_CYC_CO"" blocks and the parameter assignment of the ""F_SHUTDN"" block.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.5 F-runtime groups

During the programming of the safety program, F-blocks cannot be inserted directly into tasks (cyclic interrupt OBs). When a new CFC chart is created in PCS 7, the system will automatically generate a runtime group of the same name, into which the F-blocks placed in the corresponding CFC chart can then be inserted. An F-runtime group only becomes an F-runtime group (identified by a yellow folder and ""F"") when F-blocks are called in it.

0B37 [Cyclic interrupt7] (300 ms)
@CPU_RTI@CPU_RT
@F_ShutDn_37 (300 ms)
@F_ShutDn (300 ms)
CycCo-QB37 (300 ms)
CycCo-OB3ZIF_CYC_CO-OB37
@F_CycCo-OB3ZIF_TEST
@F_CycCo-OB37IF_TESTC
@F_TestMode (300 ms)
@F_IN_37_0 (300 ms)
SFC_109_F (300 ms)
AI_F (300 ms)
HS104_F (300 ms)
@F_OUT_37_0 (300 ms)
@F_DbIniti (300 ms)
0B38 [Cycic interrupta] (10 ms)

# Runtime groups of an F-program

The F-program is divided into several runtime groups, as shown in the table below.

Note

xx = Number of the cyclic interrupt OB

y = Consecutive numbering if several shutdown groups exist in a single cyclic interrupt OB

|Chart|F blocks|
|---|---|
|@F_ShutDn_xx|Shutdown logic of cyclic interrupt OB The shutdown logic is created with RTGLOGIC and standard logic blocks.|
|@F_ShutDn|Shutdown block Where an F-program is present in several cyclic interrupt OBs, this runtime group is integrated into the cyclic interrupt OB with the shortest call time. The shutdown logic is created with F_SHUTDN, RTGLOGIC, and standard logic blocks.|
|@F_CycCo-OBxx|F_CYC_CO, F_TEST and F_TESTC (for tests)|
|@F_TestMode|F_TESTM for managing safety mode|
|@F_IN_xx_y|F blocks which supply input values for the F-program (F_QUITES, communication receive blocks, conversion blocks from standard to F-data types, drivers for F-input modules) Runtime groups with user logic, in the sequence in which they were created by the user|

Compendium Part B - Process Safety (V9.0)
Operating Manual, 04/2018, A5E43228905-AA

# 7.2 Creating the safety program

@F_OUT_xx_y Blocks which further process output values of F-blocks (communication send blocks, conversion blocks from F-to standard data types, drivers for F-output modules, F_PLK, F_PLK_O, and F_DIAG for program sequence control)

@F_DbInitxx DB_INIT function block required for the cold restart of an F-runtime group

All required error OBs are added to the block container in the SIMATIC Manager.

There should only be one @F_IN_xx_y runtime group before the first F-user runtime group and one @F_OUT_xx_y runtime group after the last F-user runtime group. If the safety program consists of several shutdown groups (see section 6.2.6 (Page 87)), there is the @F_IN_xx_y and @F_OUT_xx_y runtime group both before and after the F-user runtime group in the shutdown groups.

# Rules for F-runtime groups in the safety program

- We recommend that you proceed as follows in order to make the lengths of the F-cycles as uniform as possible:
If you mix F-and standard runtime groups in a cyclic interrupt OB, you must execute the F-runtime groups before the standard runtime groups.
- The following defaults are set for properties of an F-runtime group:
- Reduction ratio = 1
- Phase offset = 0
- Properties Runtime Group
- Task: 0B37
- Name: HS104
- Comment:
- Reduction ratio:
- Phase offset:
- Optimize run sequence
- Active:
- You are not permitted to move automatically generated F-runtime groups (identified by @).

Note: The feature: Optimize Run Sequence in CFC can lead to a change in the collective signature and impair the response times of the safety program, and therefore should not be used in F-runtime groups.

With PCS 7 V7.0 SP1 and higher, it is no longer possible to optimize the run sequence for cyclic interrupt OBs with F-runtime groups.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.6 F-shutdown groups

An F-shutdown group is a self-contained unit in your safety program. It contains user logic which is executed or shut down simultaneously. The F-shutdown group contains one or a number of F-runtime groups which are assigned to a common cyclic interrupt OB. You can choose whether an error during execution of the safety program causes a full shutdown or a partial shutdown of the safety program. With a partial shutdown, only the F-shutdown group in which the error occurred is shut down.

# Rules for F-shutdown groups in the safety program

You are not permitted to directly interconnect F-blocks in different F-shutdown groups. Data can only be exchanged between F-shutdown groups using special communication blocks (F_S_xx, F_R_xx for F_BOOL and F_REAL data structures). Therefore, all F-channel drivers in an F-signal module must be in the same F-shutdown group, together with the module driver of the F-signal module.

# Defining F-shutdown groups

As soon as you place F-blocks in the CFC editor for the first time, all of the F-runtime groups in a single cyclic interrupt OB will form an F-shutdown group. You can configure each F-runtime group as the last F-runtime group in an F-shutdown group by placing the F_PSG_M ""selection block"". The F-system then creates a new F-shutdown group for all subsequent F-runtime groups until another F_PSG_M block is found.

# Distribution/Combination by means of manual placing of F_PSG_M

If you add or delete one or a number of F_PSG_M blocks in your project, the order of your F-shutdown groups will change. If you make a change to the layout of your F-shutdown groups, you must make sure that the F-module drivers and all assigned F-channel drivers are integrated in the same F-shutdown group. You can split one F-shutdown group into two F-shutdown groups. To do this, in the CFC editor's runtime editor, place the F_PSG_M block in the last F-runtime group which is to be assigned to the first F-shutdown group. All subsequent F-runtime groups will then be assigned to the second F-shutdown group. The number of F-shutdown groups is limited to 110 in all cyclic interrupt OBs. The system restricts the number of F-runtime groups in an F-shutdown group. You have the option of combining two F-shutdown groups. To do this, in the runtime editor of the CFC editor, delete the F_PSG_M block between the F-shutdown groups. If you combine a number of F-shutdown groups which exchange data via F-communication blocks in a single F-shutdown group, you need to remove these F-communications blocks and replace them with direct interconnections.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# Programming data exchange between F-shutdown groups

If you wish to exchange data between two F-shutdown groups, you are not permitted to interconnect the inputs and outputs directly. You need to use the following F-system blocks for data exchange between F blocks in different F-shutdown groups:

|F block|Description|
|---|---|
|F_S_R/F_R_R|Safe transfer of 5 data of the F_REAL type|
|F_S_BO/F_R_BO|Safe transfer of 5 data of the F_BOOL type|

# Procedure for data exchange

1. In the F-shutdown group from which data is to be transferred, add an F_S_R or F_S_BO type F-block.
2. In the F-shutdown group to which data is to be transferred, add an F_R_R or F_R_BO type F-block.
3. Interconnect the SD_R_xx inputs of the F_S_R or the SD_BO_xx inputs of the F_S_BO with the data to be transferred.
4. Interconnect the RD_R_xx outputs of the F_R_R or the RD_BO_xx outputs of the F_R_BO with the inputs of the F-block for further processing of the data received.
5. Interconnect the S_DB output of the send block with the S_DB input of the associated receive block.
6. Configure the TIMEOUT inputs of the F_R_R and F_R_BO receive blocks with the F-monitoring time calculated.
7. Configure the receive block substitute values for the scenario of a shutdown of the sending shutdown group.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Extract from a chart for shutdown group 1 with send block:

|42617|7ail-|7133 Cor|CHLDEA F|1e-0- Ck_INE|
|---|---|---|---|---|
|JdEO|90_8o_|J0_EO|90_BO|JD_Bo_|
|11_112|J0_EO_07|32_80_08|7193 Coz|CHLDEA|
|Q_EAII|4212 bloel|PaJJ_CX|0_Kod|ubSime|
|4nu|Lou|JG RG|P3c >| |

The connection to shutdown group 2 is established by linking output S_DB of block F_S_BO_1 in shutdown group 1 with input S_DB on block F_R_BO_1 in shutdown group 2.

Extract from a chart for shutdown group 2 with receive block:

|Xbaeha|32430|netr|
|---|---|---|
|314 = doxr|3281p|REC_E?|
|Recei|ER EL|RD_BO_|
|RD_BO_|8088Q_01|RD_EQ|
|RD_E?|302ZD|RD_Lo|

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

89

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.7 Data exchange between the F user program and standard user program

The standard program and the F-program use different data formats. Accordingly, special conversion blocks have to be used for data exchange.

F-CPU
F-program
Conversion blocks
Standard program
Converting F-data types to standard data types

If you need the standard user program to process data from the F-program further (for monitoring on the PCS 7 OS, for example), a block for F_FDatatype_Datatype data conversion will have to be interconnected in the user program so that the F-data types can be converted into standard data types. This converter blocks must be called in the standard user program (standard runtime group).

Extract from a process tag chart; converting the ""QBAD"" signal from F_BOOL to BOOL:

Note

The figure is available in its original size as appendix to the manual in the ZIP download of the checklists.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Standard and F-blocks are in different runtime groups. As shown here, some F-blocks have outputs (depicted in gray), which can be directly interconnected with standard PCS 7 blocks. PCS 7 blocks such as MonAnL, MonDiL, EventMESSAGE and their associated faceplates and process symbols are used to visualize fail-safe analog values and status messages as well as system states and operating states. If parameters cannot be directly further interconnected due to the safety data format, the conversion blocks described above can be used.

# Converting standard data types into F-data types

If data from the standard user program is to be processed further in the F-program, it will need to be converted. The blocks for data conversion from standard data types to F-data types (F_datatype_Fdatatype) can only be used in the F-program (F-runtime group).

Extract from an F-chart, conversion from REAL to F_REAL:

|7_R_FR_CONv|R -B|CE 32|CB39|:RELL|Aulci|
|---|---|---|---|---|---|
|DAII ZROC3?|VALUE DiT| | | | |

Note: The conversion blocks only perform data conversion; in other words, you will need to program additional measures in the F-program for plausibility checking purposes (with F_LIM_R, for example), in order to ensure that only non-hazardous values are possible.

# 7.2.8 How F-blocks with floating-point operations respond to number range overflows

Within the context of analog value processing, number range overflows/underflows can occur during arithmetic calculations (with division by 0, root from a negative number or number range overflow). With S7 F Systems Lib V1_3 and higher, the response is as follows in this case: The results ""Overflow (± infinite)"", ""Denormalized floating-point number"" or ""Invalid floating-point number (NaN)"" are:

- Either output at the output and can be processed further by subsequent F blocks
- Or signaled to special outputs. A substitute value is output if necessary.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

91

# Configuring the safety program

# 7.2 Creating the safety program

If the floating-point operation produces an invalid floating-point number (NaN) and no invalid floating-point number (NaN) existed as an address prior to this, the following diagnostics event will be entered in the F CPU's diagnostic buffer:

""Safety program: Invalid REAL number in DB"" (event ID 16#75D9)

You can use this entry in the diagnostic buffer to identify the F block with the invalid floating-point number (NaN).

If you are not able to prevent these events from occurring in your safety program, you will need to decide, on the basis of your application, whether you wish to respond to them in your safety program.

|AD?|nddie|101.o = 101.0_|10o.0|-10q|CUIL|5035|
|---|---|---|---|---|---|---|
|AD?|indoic|0b37 1.0e+3e|:Addle|0etz|3.0e-3e|10o.0|
| |100.0|3.0e-38| |CUIL|AD_|:itis|
|0837i|LIN_R|08371|#Addic|3402-32|c0m| |
| |ce-JE| |CUII|Sms|AD?|0BJ7i|
|Addue|J1o|~10O|02-J8|~100.0|CuTO|100.0=|
|DIV|LIK_R|:tris|100.0_| |100.-|CutQ|
|0.0|502S|SoRT|HXR|:Squo-|{AJi|hal|
|-10o.05|CVIQ|CUIL|5023_W| | | |

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.3 Configuring fail-safe AS-AS communication

You can use the F_LIM_R F block to check the result of a floating-point operation for overflow (± infinite) and invalid floating-point number (NaN).

- A limit violation is indicated by IN &gt; MAX or ""+ infinite"". ",What blocks are placed automatically during the configuration of the safety program according to the 'Compendium Part B - Process Safety (V9.0)'?,A2,"Automatically placed blocks include F_PLK, F_PSG_M, module drivers for F-signal modules, communication and system blocks for sending, F_PLK_O, and F_DIAG for versions S7 F-Systems Lib V1_3 and above.",2.421875,2.609375,3.484375,1.8125,0.69140625
22,pcs7_compendium_part_b_en-US_en-US.txt,37,5dea5c3b1bc7a2a2d3707ace8a7d6e3ed157196366f8ee88ba630fadc3d36b0e,"Changes to the input parameters of F blocks with F data types can be made as follows:

- Offline with the assistance of the CFC editor
- Online using CFC test mode with safety mode deactivated

Note

Values of PAR_ID and COMPLEM must not be changed. If errors in the safety data format are detected during the execution of the safety program, an F-STOP is triggered.

# 7.2.4 Run sequence of F-blocks

# Defining the run sequence

You define the run sequence in the CFC editor in the same way as for a standard user program. Changing the run sequence also changes the collective signature.

# Correct run sequence of F-blocks

The sequence of the F-blocks within the F-shutdown group is relevant. The number of F-runtime groups the F-shutdown group has been split into is of no relevance. Essentially, the correct run sequence of the various F-block types is as follows:

1. Placed automatically:
- F module driver for F-signal modules with inputs or with inputs and outputs
- F-communications blocks and F-system blocks for receiving
- F blocks for data conversion from standard value to F-structure
- F modules with OS connection
2. F channel drivers for inputs
3. F blocks for user logic

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

1. F channel drivers for outputs
2. Placed automatically:
- F block F_PLK
- F block F_PSG_M
- F module driver for F-signal modules with outputs or with inputs and outputs
- F-communications blocks and F-system blocks for sending
- F block F_PLK_O
- F block F_DIAG (S7 F-Systems Lib V1_3 and higher)

The run sequence of the blocks listed under items 1 and 5 is adjusted automatically when the F-program is compiled.
As if S7 F Systems Lib V1_3, separate runtime groups are created for the F blocks listed under points 1 and 5 during the first compilation.
The IPO principle (input, process, output) must always be observed when placing F-channel drivers and F-blocks for user logic.
This ensures that all inputs are read first, the relevant processing steps are performed, and all outputs are then written.
Furthermore, F-runtime groups and F-monitoring blocks that are only visible following compilation are also added automatically.

Note

No changes may be made in the automatically added runtime groups with the exception of the scan cycle monitoring on ""F_CYC_CO"" blocks and the parameter assignment of the ""F_SHUTDN"" block.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.5 F-runtime groups

During the programming of the safety program, F-blocks cannot be inserted directly into tasks (cyclic interrupt OBs). When a new CFC chart is created in PCS 7, the system will automatically generate a runtime group of the same name, into which the F-blocks placed in the corresponding CFC chart can then be inserted. An F-runtime group only becomes an F-runtime group (identified by a yellow folder and ""F"") when F-blocks are called in it.

0B37 [Cyclic interrupt7] (300 ms)
@CPU_RTI@CPU_RT
@F_ShutDn_37 (300 ms)
@F_ShutDn (300 ms)
CycCo-QB37 (300 ms)
CycCo-OB3ZIF_CYC_CO-OB37
@F_CycCo-OB3ZIF_TEST
@F_CycCo-OB37IF_TESTC
@F_TestMode (300 ms)
@F_IN_37_0 (300 ms)
SFC_109_F (300 ms)
AI_F (300 ms)
HS104_F (300 ms)
@F_OUT_37_0 (300 ms)
@F_DbIniti (300 ms)
0B38 [Cycic interrupta] (10 ms)

# Runtime groups of an F-program

The F-program is divided into several runtime groups, as shown in the table below.

Note

xx = Number of the cyclic interrupt OB

y = Consecutive numbering if several shutdown groups exist in a single cyclic interrupt OB

|Chart|F blocks|
|---|---|
|@F_ShutDn_xx|Shutdown logic of cyclic interrupt OB The shutdown logic is created with RTGLOGIC and standard logic blocks.|
|@F_ShutDn|Shutdown block Where an F-program is present in several cyclic interrupt OBs, this runtime group is integrated into the cyclic interrupt OB with the shortest call time. The shutdown logic is created with F_SHUTDN, RTGLOGIC, and standard logic blocks.|
|@F_CycCo-OBxx|F_CYC_CO, F_TEST and F_TESTC (for tests)|
|@F_TestMode|F_TESTM for managing safety mode|
|@F_IN_xx_y|F blocks which supply input values for the F-program (F_QUITES, communication receive blocks, conversion blocks from standard to F-data types, drivers for F-input modules) Runtime groups with user logic, in the sequence in which they were created by the user|

Compendium Part B - Process Safety (V9.0)
Operating Manual, 04/2018, A5E43228905-AA

# 7.2 Creating the safety program

@F_OUT_xx_y Blocks which further process output values of F-blocks (communication send blocks, conversion blocks from F-to standard data types, drivers for F-output modules, F_PLK, F_PLK_O, and F_DIAG for program sequence control)

@F_DbInitxx DB_INIT function block required for the cold restart of an F-runtime group

All required error OBs are added to the block container in the SIMATIC Manager.

There should only be one @F_IN_xx_y runtime group before the first F-user runtime group and one @F_OUT_xx_y runtime group after the last F-user runtime group. If the safety program consists of several shutdown groups (see section 6.2.6 (Page 87)), there is the @F_IN_xx_y and @F_OUT_xx_y runtime group both before and after the F-user runtime group in the shutdown groups.

# Rules for F-runtime groups in the safety program

- We recommend that you proceed as follows in order to make the lengths of the F-cycles as uniform as possible:
If you mix F-and standard runtime groups in a cyclic interrupt OB, you must execute the F-runtime groups before the standard runtime groups.
- The following defaults are set for properties of an F-runtime group:
- Reduction ratio = 1
- Phase offset = 0
- Properties Runtime Group
- Task: 0B37
- Name: HS104
- Comment:
- Reduction ratio:
- Phase offset:
- Optimize run sequence
- Active:
- You are not permitted to move automatically generated F-runtime groups (identified by @).

Note: The feature: Optimize Run Sequence in CFC can lead to a change in the collective signature and impair the response times of the safety program, and therefore should not be used in F-runtime groups.

With PCS 7 V7.0 SP1 and higher, it is no longer possible to optimize the run sequence for cyclic interrupt OBs with F-runtime groups.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.6 F-shutdown groups

An F-shutdown group is a self-contained unit in your safety program. It contains user logic which is executed or shut down simultaneously. The F-shutdown group contains one or a number of F-runtime groups which are assigned to a common cyclic interrupt OB. You can choose whether an error during execution of the safety program causes a full shutdown or a partial shutdown of the safety program. With a partial shutdown, only the F-shutdown group in which the error occurred is shut down.

# Rules for F-shutdown groups in the safety program

You are not permitted to directly interconnect F-blocks in different F-shutdown groups. Data can only be exchanged between F-shutdown groups using special communication blocks (F_S_xx, F_R_xx for F_BOOL and F_REAL data structures). Therefore, all F-channel drivers in an F-signal module must be in the same F-shutdown group, together with the module driver of the F-signal module.

# Defining F-shutdown groups

As soon as you place F-blocks in the CFC editor for the first time, all of the F-runtime groups in a single cyclic interrupt OB will form an F-shutdown group. You can configure each F-runtime group as the last F-runtime group in an F-shutdown group by placing the F_PSG_M ""selection block"". The F-system then creates a new F-shutdown group for all subsequent F-runtime groups until another F_PSG_M block is found.

# Distribution/Combination by means of manual placing of F_PSG_M

If you add or delete one or a number of F_PSG_M blocks in your project, the order of your F-shutdown groups will change. If you make a change to the layout of your F-shutdown groups, you must make sure that the F-module drivers and all assigned F-channel drivers are integrated in the same F-shutdown group. You can split one F-shutdown group into two F-shutdown groups. To do this, in the CFC editor's runtime editor, place the F_PSG_M block in the last F-runtime group which is to be assigned to the first F-shutdown group. All subsequent F-runtime groups will then be assigned to the second F-shutdown group. The number of F-shutdown groups is limited to 110 in all cyclic interrupt OBs. The system restricts the number of F-runtime groups in an F-shutdown group. You have the option of combining two F-shutdown groups. To do this, in the runtime editor of the CFC editor, delete the F_PSG_M block between the F-shutdown groups. If you combine a number of F-shutdown groups which exchange data via F-communication blocks in a single F-shutdown group, you need to remove these F-communications blocks and replace them with direct interconnections.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# Programming data exchange between F-shutdown groups

If you wish to exchange data between two F-shutdown groups, you are not permitted to interconnect the inputs and outputs directly. You need to use the following F-system blocks for data exchange between F blocks in different F-shutdown groups:

|F block|Description|
|---|---|
|F_S_R/F_R_R|Safe transfer of 5 data of the F_REAL type|
|F_S_BO/F_R_BO|Safe transfer of 5 data of the F_BOOL type|

# Procedure for data exchange

1. In the F-shutdown group from which data is to be transferred, add an F_S_R or F_S_BO type F-block.
2. In the F-shutdown group to which data is to be transferred, add an F_R_R or F_R_BO type F-block.
3. Interconnect the SD_R_xx inputs of the F_S_R or the SD_BO_xx inputs of the F_S_BO with the data to be transferred.
4. Interconnect the RD_R_xx outputs of the F_R_R or the RD_BO_xx outputs of the F_R_BO with the inputs of the F-block for further processing of the data received.
5. Interconnect the S_DB output of the send block with the S_DB input of the associated receive block.
6. Configure the TIMEOUT inputs of the F_R_R and F_R_BO receive blocks with the F-monitoring time calculated.
7. Configure the receive block substitute values for the scenario of a shutdown of the sending shutdown group.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Extract from a chart for shutdown group 1 with send block:

|42617|7ail-|7133 Cor|CHLDEA F|1e-0- Ck_INE|
|---|---|---|---|---|
|JdEO|90_8o_|J0_EO|90_BO|JD_Bo_|
|11_112|J0_EO_07|32_80_08|7193 Coz|CHLDEA|
|Q_EAII|4212 bloel|PaJJ_CX|0_Kod|ubSime|
|4nu|Lou|JG RG|P3c >| |

The connection to shutdown group 2 is established by linking output S_DB of block F_S_BO_1 in shutdown group 1 with input S_DB on block F_R_BO_1 in shutdown group 2.

Extract from a chart for shutdown group 2 with receive block:

|Xbaeha|32430|netr|
|---|---|---|
|314 = doxr|3281p|REC_E?|
|Recei|ER EL|RD_BO_|
|RD_BO_|8088Q_01|RD_EQ|
|RD_E?|302ZD|RD_Lo|

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

89

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.7 Data exchange between the F user program and standard user program

The standard program and the F-program use different data formats. Accordingly, special conversion blocks have to be used for data exchange.

F-CPU
F-program
Conversion blocks
Standard program
Converting F-data types to standard data types

If you need the standard user program to process data from the F-program further (for monitoring on the PCS 7 OS, for example), a block for F_FDatatype_Datatype data conversion will have to be interconnected in the user program so that the F-data types can be converted into standard data types. This converter blocks must be called in the standard user program (standard runtime group).

Extract from a process tag chart; converting the ""QBAD"" signal from F_BOOL to BOOL:

Note

The figure is available in its original size as appendix to the manual in the ZIP download of the checklists.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Standard and F-blocks are in different runtime groups. As shown here, some F-blocks have outputs (depicted in gray), which can be directly interconnected with standard PCS 7 blocks. PCS 7 blocks such as MonAnL, MonDiL, EventMESSAGE and their associated faceplates and process symbols are used to visualize fail-safe analog values and status messages as well as system states and operating states. If parameters cannot be directly further interconnected due to the safety data format, the conversion blocks described above can be used.

# Converting standard data types into F-data types

If data from the standard user program is to be processed further in the F-program, it will need to be converted. The blocks for data conversion from standard data types to F-data types (F_datatype_Fdatatype) can only be used in the F-program (F-runtime group).

Extract from an F-chart, conversion from REAL to F_REAL:

|7_R_FR_CONv|R -B|CE 32|CB39|:RELL|Aulci|
|---|---|---|---|---|---|
|DAII ZROC3?|VALUE DiT| | | | |

Note: The conversion blocks only perform data conversion; in other words, you will need to program additional measures in the F-program for plausibility checking purposes (with F_LIM_R, for example), in order to ensure that only non-hazardous values are possible.

# 7.2.8 How F-blocks with floating-point operations respond to number range overflows

Within the context of analog value processing, number range overflows/underflows can occur during arithmetic calculations (with division by 0, root from a negative number or number range overflow). With S7 F Systems Lib V1_3 and higher, the response is as follows in this case: The results ""Overflow (± infinite)"", ""Denormalized floating-point number"" or ""Invalid floating-point number (NaN)"" are:

- Either output at the output and can be processed further by subsequent F blocks
- Or signaled to special outputs. A substitute value is output if necessary.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

91

# Configuring the safety program

# 7.2 Creating the safety program

If the floating-point operation produces an invalid floating-point number (NaN) and no invalid floating-point number (NaN) existed as an address prior to this, the following diagnostics event will be entered in the F CPU's diagnostic buffer:

""Safety program: Invalid REAL number in DB"" (event ID 16#75D9)

You can use this entry in the diagnostic buffer to identify the F block with the invalid floating-point number (NaN).

If you are not able to prevent these events from occurring in your safety program, you will need to decide, on the basis of your application, whether you wish to respond to them in your safety program.

|AD?|nddie|101.o = 101.0_|10o.0|-10q|CUIL|5035|
|---|---|---|---|---|---|---|
|AD?|indoic|0b37 1.0e+3e|:Addle|0etz|3.0e-3e|10o.0|
| |100.0|3.0e-38| |CUIL|AD_|:itis|
|0837i|LIN_R|08371|#Addic|3402-32|c0m| |
| |ce-JE| |CUII|Sms|AD?|0BJ7i|
|Addue|J1o|~10O|02-J8|~100.0|CuTO|100.0=|
|DIV|LIK_R|:tris|100.0_| |100.-|CutQ|
|0.0|502S|SoRT|HXR|:Squo-|{AJi|hal|
|-10o.05|CVIQ|CUIL|5023_W| | | |

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.3 Configuring fail-safe AS-AS communication

You can use the F_LIM_R F block to check the result of a floating-point operation for overflow (± infinite) and invalid floating-point number (NaN).

- A limit violation is indicated by IN &gt; MAX or ""+ infinite"". ",What blocks are placed automatically during the configuration of the safety program according to the 'Compendium Part B - Process Safety (V9.0)'?,A3,"The system automatically positions F_PLK, F_PSG_M, drivers for F-signal modules, sending communication and system blocks, F_PLK_O, and F_DIAG in S7 F-Systems Lib V1_3+.",2.28125,2.390625,3.34375,1.6875,0.6328125
23,pcs7_compendium_part_b_en-US_en-US.txt,37,5dea5c3b1bc7a2a2d3707ace8a7d6e3ed157196366f8ee88ba630fadc3d36b0e,"Changes to the input parameters of F blocks with F data types can be made as follows:

- Offline with the assistance of the CFC editor
- Online using CFC test mode with safety mode deactivated

Note

Values of PAR_ID and COMPLEM must not be changed. If errors in the safety data format are detected during the execution of the safety program, an F-STOP is triggered.

# 7.2.4 Run sequence of F-blocks

# Defining the run sequence

You define the run sequence in the CFC editor in the same way as for a standard user program. Changing the run sequence also changes the collective signature.

# Correct run sequence of F-blocks

The sequence of the F-blocks within the F-shutdown group is relevant. The number of F-runtime groups the F-shutdown group has been split into is of no relevance. Essentially, the correct run sequence of the various F-block types is as follows:

1. Placed automatically:
- F module driver for F-signal modules with inputs or with inputs and outputs
- F-communications blocks and F-system blocks for receiving
- F blocks for data conversion from standard value to F-structure
- F modules with OS connection
2. F channel drivers for inputs
3. F blocks for user logic

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

1. F channel drivers for outputs
2. Placed automatically:
- F block F_PLK
- F block F_PSG_M
- F module driver for F-signal modules with outputs or with inputs and outputs
- F-communications blocks and F-system blocks for sending
- F block F_PLK_O
- F block F_DIAG (S7 F-Systems Lib V1_3 and higher)

The run sequence of the blocks listed under items 1 and 5 is adjusted automatically when the F-program is compiled.
As if S7 F Systems Lib V1_3, separate runtime groups are created for the F blocks listed under points 1 and 5 during the first compilation.
The IPO principle (input, process, output) must always be observed when placing F-channel drivers and F-blocks for user logic.
This ensures that all inputs are read first, the relevant processing steps are performed, and all outputs are then written.
Furthermore, F-runtime groups and F-monitoring blocks that are only visible following compilation are also added automatically.

Note

No changes may be made in the automatically added runtime groups with the exception of the scan cycle monitoring on ""F_CYC_CO"" blocks and the parameter assignment of the ""F_SHUTDN"" block.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.5 F-runtime groups

During the programming of the safety program, F-blocks cannot be inserted directly into tasks (cyclic interrupt OBs). When a new CFC chart is created in PCS 7, the system will automatically generate a runtime group of the same name, into which the F-blocks placed in the corresponding CFC chart can then be inserted. An F-runtime group only becomes an F-runtime group (identified by a yellow folder and ""F"") when F-blocks are called in it.

0B37 [Cyclic interrupt7] (300 ms)
@CPU_RTI@CPU_RT
@F_ShutDn_37 (300 ms)
@F_ShutDn (300 ms)
CycCo-QB37 (300 ms)
CycCo-OB3ZIF_CYC_CO-OB37
@F_CycCo-OB3ZIF_TEST
@F_CycCo-OB37IF_TESTC
@F_TestMode (300 ms)
@F_IN_37_0 (300 ms)
SFC_109_F (300 ms)
AI_F (300 ms)
HS104_F (300 ms)
@F_OUT_37_0 (300 ms)
@F_DbIniti (300 ms)
0B38 [Cycic interrupta] (10 ms)

# Runtime groups of an F-program

The F-program is divided into several runtime groups, as shown in the table below.

Note

xx = Number of the cyclic interrupt OB

y = Consecutive numbering if several shutdown groups exist in a single cyclic interrupt OB

|Chart|F blocks|
|---|---|
|@F_ShutDn_xx|Shutdown logic of cyclic interrupt OB The shutdown logic is created with RTGLOGIC and standard logic blocks.|
|@F_ShutDn|Shutdown block Where an F-program is present in several cyclic interrupt OBs, this runtime group is integrated into the cyclic interrupt OB with the shortest call time. The shutdown logic is created with F_SHUTDN, RTGLOGIC, and standard logic blocks.|
|@F_CycCo-OBxx|F_CYC_CO, F_TEST and F_TESTC (for tests)|
|@F_TestMode|F_TESTM for managing safety mode|
|@F_IN_xx_y|F blocks which supply input values for the F-program (F_QUITES, communication receive blocks, conversion blocks from standard to F-data types, drivers for F-input modules) Runtime groups with user logic, in the sequence in which they were created by the user|

Compendium Part B - Process Safety (V9.0)
Operating Manual, 04/2018, A5E43228905-AA

# 7.2 Creating the safety program

@F_OUT_xx_y Blocks which further process output values of F-blocks (communication send blocks, conversion blocks from F-to standard data types, drivers for F-output modules, F_PLK, F_PLK_O, and F_DIAG for program sequence control)

@F_DbInitxx DB_INIT function block required for the cold restart of an F-runtime group

All required error OBs are added to the block container in the SIMATIC Manager.

There should only be one @F_IN_xx_y runtime group before the first F-user runtime group and one @F_OUT_xx_y runtime group after the last F-user runtime group. If the safety program consists of several shutdown groups (see section 6.2.6 (Page 87)), there is the @F_IN_xx_y and @F_OUT_xx_y runtime group both before and after the F-user runtime group in the shutdown groups.

# Rules for F-runtime groups in the safety program

- We recommend that you proceed as follows in order to make the lengths of the F-cycles as uniform as possible:
If you mix F-and standard runtime groups in a cyclic interrupt OB, you must execute the F-runtime groups before the standard runtime groups.
- The following defaults are set for properties of an F-runtime group:
- Reduction ratio = 1
- Phase offset = 0
- Properties Runtime Group
- Task: 0B37
- Name: HS104
- Comment:
- Reduction ratio:
- Phase offset:
- Optimize run sequence
- Active:
- You are not permitted to move automatically generated F-runtime groups (identified by @).

Note: The feature: Optimize Run Sequence in CFC can lead to a change in the collective signature and impair the response times of the safety program, and therefore should not be used in F-runtime groups.

With PCS 7 V7.0 SP1 and higher, it is no longer possible to optimize the run sequence for cyclic interrupt OBs with F-runtime groups.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.6 F-shutdown groups

An F-shutdown group is a self-contained unit in your safety program. It contains user logic which is executed or shut down simultaneously. The F-shutdown group contains one or a number of F-runtime groups which are assigned to a common cyclic interrupt OB. You can choose whether an error during execution of the safety program causes a full shutdown or a partial shutdown of the safety program. With a partial shutdown, only the F-shutdown group in which the error occurred is shut down.

# Rules for F-shutdown groups in the safety program

You are not permitted to directly interconnect F-blocks in different F-shutdown groups. Data can only be exchanged between F-shutdown groups using special communication blocks (F_S_xx, F_R_xx for F_BOOL and F_REAL data structures). Therefore, all F-channel drivers in an F-signal module must be in the same F-shutdown group, together with the module driver of the F-signal module.

# Defining F-shutdown groups

As soon as you place F-blocks in the CFC editor for the first time, all of the F-runtime groups in a single cyclic interrupt OB will form an F-shutdown group. You can configure each F-runtime group as the last F-runtime group in an F-shutdown group by placing the F_PSG_M ""selection block"". The F-system then creates a new F-shutdown group for all subsequent F-runtime groups until another F_PSG_M block is found.

# Distribution/Combination by means of manual placing of F_PSG_M

If you add or delete one or a number of F_PSG_M blocks in your project, the order of your F-shutdown groups will change. If you make a change to the layout of your F-shutdown groups, you must make sure that the F-module drivers and all assigned F-channel drivers are integrated in the same F-shutdown group. You can split one F-shutdown group into two F-shutdown groups. To do this, in the CFC editor's runtime editor, place the F_PSG_M block in the last F-runtime group which is to be assigned to the first F-shutdown group. All subsequent F-runtime groups will then be assigned to the second F-shutdown group. The number of F-shutdown groups is limited to 110 in all cyclic interrupt OBs. The system restricts the number of F-runtime groups in an F-shutdown group. You have the option of combining two F-shutdown groups. To do this, in the runtime editor of the CFC editor, delete the F_PSG_M block between the F-shutdown groups. If you combine a number of F-shutdown groups which exchange data via F-communication blocks in a single F-shutdown group, you need to remove these F-communications blocks and replace them with direct interconnections.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# Programming data exchange between F-shutdown groups

If you wish to exchange data between two F-shutdown groups, you are not permitted to interconnect the inputs and outputs directly. You need to use the following F-system blocks for data exchange between F blocks in different F-shutdown groups:

|F block|Description|
|---|---|
|F_S_R/F_R_R|Safe transfer of 5 data of the F_REAL type|
|F_S_BO/F_R_BO|Safe transfer of 5 data of the F_BOOL type|

# Procedure for data exchange

1. In the F-shutdown group from which data is to be transferred, add an F_S_R or F_S_BO type F-block.
2. In the F-shutdown group to which data is to be transferred, add an F_R_R or F_R_BO type F-block.
3. Interconnect the SD_R_xx inputs of the F_S_R or the SD_BO_xx inputs of the F_S_BO with the data to be transferred.
4. Interconnect the RD_R_xx outputs of the F_R_R or the RD_BO_xx outputs of the F_R_BO with the inputs of the F-block for further processing of the data received.
5. Interconnect the S_DB output of the send block with the S_DB input of the associated receive block.
6. Configure the TIMEOUT inputs of the F_R_R and F_R_BO receive blocks with the F-monitoring time calculated.
7. Configure the receive block substitute values for the scenario of a shutdown of the sending shutdown group.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Extract from a chart for shutdown group 1 with send block:

|42617|7ail-|7133 Cor|CHLDEA F|1e-0- Ck_INE|
|---|---|---|---|---|
|JdEO|90_8o_|J0_EO|90_BO|JD_Bo_|
|11_112|J0_EO_07|32_80_08|7193 Coz|CHLDEA|
|Q_EAII|4212 bloel|PaJJ_CX|0_Kod|ubSime|
|4nu|Lou|JG RG|P3c >| |

The connection to shutdown group 2 is established by linking output S_DB of block F_S_BO_1 in shutdown group 1 with input S_DB on block F_R_BO_1 in shutdown group 2.

Extract from a chart for shutdown group 2 with receive block:

|Xbaeha|32430|netr|
|---|---|---|
|314 = doxr|3281p|REC_E?|
|Recei|ER EL|RD_BO_|
|RD_BO_|8088Q_01|RD_EQ|
|RD_E?|302ZD|RD_Lo|

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

89

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.7 Data exchange between the F user program and standard user program

The standard program and the F-program use different data formats. Accordingly, special conversion blocks have to be used for data exchange.

F-CPU
F-program
Conversion blocks
Standard program
Converting F-data types to standard data types

If you need the standard user program to process data from the F-program further (for monitoring on the PCS 7 OS, for example), a block for F_FDatatype_Datatype data conversion will have to be interconnected in the user program so that the F-data types can be converted into standard data types. This converter blocks must be called in the standard user program (standard runtime group).

Extract from a process tag chart; converting the ""QBAD"" signal from F_BOOL to BOOL:

Note

The figure is available in its original size as appendix to the manual in the ZIP download of the checklists.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Standard and F-blocks are in different runtime groups. As shown here, some F-blocks have outputs (depicted in gray), which can be directly interconnected with standard PCS 7 blocks. PCS 7 blocks such as MonAnL, MonDiL, EventMESSAGE and their associated faceplates and process symbols are used to visualize fail-safe analog values and status messages as well as system states and operating states. If parameters cannot be directly further interconnected due to the safety data format, the conversion blocks described above can be used.

# Converting standard data types into F-data types

If data from the standard user program is to be processed further in the F-program, it will need to be converted. The blocks for data conversion from standard data types to F-data types (F_datatype_Fdatatype) can only be used in the F-program (F-runtime group).

Extract from an F-chart, conversion from REAL to F_REAL:

|7_R_FR_CONv|R -B|CE 32|CB39|:RELL|Aulci|
|---|---|---|---|---|---|
|DAII ZROC3?|VALUE DiT| | | | |

Note: The conversion blocks only perform data conversion; in other words, you will need to program additional measures in the F-program for plausibility checking purposes (with F_LIM_R, for example), in order to ensure that only non-hazardous values are possible.

# 7.2.8 How F-blocks with floating-point operations respond to number range overflows

Within the context of analog value processing, number range overflows/underflows can occur during arithmetic calculations (with division by 0, root from a negative number or number range overflow). With S7 F Systems Lib V1_3 and higher, the response is as follows in this case: The results ""Overflow (± infinite)"", ""Denormalized floating-point number"" or ""Invalid floating-point number (NaN)"" are:

- Either output at the output and can be processed further by subsequent F blocks
- Or signaled to special outputs. A substitute value is output if necessary.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

91

# Configuring the safety program

# 7.2 Creating the safety program

If the floating-point operation produces an invalid floating-point number (NaN) and no invalid floating-point number (NaN) existed as an address prior to this, the following diagnostics event will be entered in the F CPU's diagnostic buffer:

""Safety program: Invalid REAL number in DB"" (event ID 16#75D9)

You can use this entry in the diagnostic buffer to identify the F block with the invalid floating-point number (NaN).

If you are not able to prevent these events from occurring in your safety program, you will need to decide, on the basis of your application, whether you wish to respond to them in your safety program.

|AD?|nddie|101.o = 101.0_|10o.0|-10q|CUIL|5035|
|---|---|---|---|---|---|---|
|AD?|indoic|0b37 1.0e+3e|:Addle|0etz|3.0e-3e|10o.0|
| |100.0|3.0e-38| |CUIL|AD_|:itis|
|0837i|LIN_R|08371|#Addic|3402-32|c0m| |
| |ce-JE| |CUII|Sms|AD?|0BJ7i|
|Addue|J1o|~10O|02-J8|~100.0|CuTO|100.0=|
|DIV|LIK_R|:tris|100.0_| |100.-|CutQ|
|0.0|502S|SoRT|HXR|:Squo-|{AJi|hal|
|-10o.05|CVIQ|CUIL|5023_W| | | |

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.3 Configuring fail-safe AS-AS communication

You can use the F_LIM_R F block to check the result of a floating-point operation for overflow (± infinite) and invalid floating-point number (NaN).

- A limit violation is indicated by IN &gt; MAX or ""+ infinite"". ",What blocks are placed automatically during the configuration of the safety program according to the 'Compendium Part B - Process Safety (V9.0)'?,A4,"Blocks like F_PLK, F_PSG_M, and drivers for F-signal modules are automatically placed, along with sending communication blocks and F_DIAG in specified library versions.",2.15625,2.171875,3.359375,1.5625,0.6796875
24,pcs7_compendium_part_b_en-US_en-US.txt,37,5dea5c3b1bc7a2a2d3707ace8a7d6e3ed157196366f8ee88ba630fadc3d36b0e,"Changes to the input parameters of F blocks with F data types can be made as follows:

- Offline with the assistance of the CFC editor
- Online using CFC test mode with safety mode deactivated

Note

Values of PAR_ID and COMPLEM must not be changed. If errors in the safety data format are detected during the execution of the safety program, an F-STOP is triggered.

# 7.2.4 Run sequence of F-blocks

# Defining the run sequence

You define the run sequence in the CFC editor in the same way as for a standard user program. Changing the run sequence also changes the collective signature.

# Correct run sequence of F-blocks

The sequence of the F-blocks within the F-shutdown group is relevant. The number of F-runtime groups the F-shutdown group has been split into is of no relevance. Essentially, the correct run sequence of the various F-block types is as follows:

1. Placed automatically:
- F module driver for F-signal modules with inputs or with inputs and outputs
- F-communications blocks and F-system blocks for receiving
- F blocks for data conversion from standard value to F-structure
- F modules with OS connection
2. F channel drivers for inputs
3. F blocks for user logic

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

1. F channel drivers for outputs
2. Placed automatically:
- F block F_PLK
- F block F_PSG_M
- F module driver for F-signal modules with outputs or with inputs and outputs
- F-communications blocks and F-system blocks for sending
- F block F_PLK_O
- F block F_DIAG (S7 F-Systems Lib V1_3 and higher)

The run sequence of the blocks listed under items 1 and 5 is adjusted automatically when the F-program is compiled.
As if S7 F Systems Lib V1_3, separate runtime groups are created for the F blocks listed under points 1 and 5 during the first compilation.
The IPO principle (input, process, output) must always be observed when placing F-channel drivers and F-blocks for user logic.
This ensures that all inputs are read first, the relevant processing steps are performed, and all outputs are then written.
Furthermore, F-runtime groups and F-monitoring blocks that are only visible following compilation are also added automatically.

Note

No changes may be made in the automatically added runtime groups with the exception of the scan cycle monitoring on ""F_CYC_CO"" blocks and the parameter assignment of the ""F_SHUTDN"" block.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.5 F-runtime groups

During the programming of the safety program, F-blocks cannot be inserted directly into tasks (cyclic interrupt OBs). When a new CFC chart is created in PCS 7, the system will automatically generate a runtime group of the same name, into which the F-blocks placed in the corresponding CFC chart can then be inserted. An F-runtime group only becomes an F-runtime group (identified by a yellow folder and ""F"") when F-blocks are called in it.

0B37 [Cyclic interrupt7] (300 ms)
@CPU_RTI@CPU_RT
@F_ShutDn_37 (300 ms)
@F_ShutDn (300 ms)
CycCo-QB37 (300 ms)
CycCo-OB3ZIF_CYC_CO-OB37
@F_CycCo-OB3ZIF_TEST
@F_CycCo-OB37IF_TESTC
@F_TestMode (300 ms)
@F_IN_37_0 (300 ms)
SFC_109_F (300 ms)
AI_F (300 ms)
HS104_F (300 ms)
@F_OUT_37_0 (300 ms)
@F_DbIniti (300 ms)
0B38 [Cycic interrupta] (10 ms)

# Runtime groups of an F-program

The F-program is divided into several runtime groups, as shown in the table below.

Note

xx = Number of the cyclic interrupt OB

y = Consecutive numbering if several shutdown groups exist in a single cyclic interrupt OB

|Chart|F blocks|
|---|---|
|@F_ShutDn_xx|Shutdown logic of cyclic interrupt OB The shutdown logic is created with RTGLOGIC and standard logic blocks.|
|@F_ShutDn|Shutdown block Where an F-program is present in several cyclic interrupt OBs, this runtime group is integrated into the cyclic interrupt OB with the shortest call time. The shutdown logic is created with F_SHUTDN, RTGLOGIC, and standard logic blocks.|
|@F_CycCo-OBxx|F_CYC_CO, F_TEST and F_TESTC (for tests)|
|@F_TestMode|F_TESTM for managing safety mode|
|@F_IN_xx_y|F blocks which supply input values for the F-program (F_QUITES, communication receive blocks, conversion blocks from standard to F-data types, drivers for F-input modules) Runtime groups with user logic, in the sequence in which they were created by the user|

Compendium Part B - Process Safety (V9.0)
Operating Manual, 04/2018, A5E43228905-AA

# 7.2 Creating the safety program

@F_OUT_xx_y Blocks which further process output values of F-blocks (communication send blocks, conversion blocks from F-to standard data types, drivers for F-output modules, F_PLK, F_PLK_O, and F_DIAG for program sequence control)

@F_DbInitxx DB_INIT function block required for the cold restart of an F-runtime group

All required error OBs are added to the block container in the SIMATIC Manager.

There should only be one @F_IN_xx_y runtime group before the first F-user runtime group and one @F_OUT_xx_y runtime group after the last F-user runtime group. If the safety program consists of several shutdown groups (see section 6.2.6 (Page 87)), there is the @F_IN_xx_y and @F_OUT_xx_y runtime group both before and after the F-user runtime group in the shutdown groups.

# Rules for F-runtime groups in the safety program

- We recommend that you proceed as follows in order to make the lengths of the F-cycles as uniform as possible:
If you mix F-and standard runtime groups in a cyclic interrupt OB, you must execute the F-runtime groups before the standard runtime groups.
- The following defaults are set for properties of an F-runtime group:
- Reduction ratio = 1
- Phase offset = 0
- Properties Runtime Group
- Task: 0B37
- Name: HS104
- Comment:
- Reduction ratio:
- Phase offset:
- Optimize run sequence
- Active:
- You are not permitted to move automatically generated F-runtime groups (identified by @).

Note: The feature: Optimize Run Sequence in CFC can lead to a change in the collective signature and impair the response times of the safety program, and therefore should not be used in F-runtime groups.

With PCS 7 V7.0 SP1 and higher, it is no longer possible to optimize the run sequence for cyclic interrupt OBs with F-runtime groups.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.6 F-shutdown groups

An F-shutdown group is a self-contained unit in your safety program. It contains user logic which is executed or shut down simultaneously. The F-shutdown group contains one or a number of F-runtime groups which are assigned to a common cyclic interrupt OB. You can choose whether an error during execution of the safety program causes a full shutdown or a partial shutdown of the safety program. With a partial shutdown, only the F-shutdown group in which the error occurred is shut down.

# Rules for F-shutdown groups in the safety program

You are not permitted to directly interconnect F-blocks in different F-shutdown groups. Data can only be exchanged between F-shutdown groups using special communication blocks (F_S_xx, F_R_xx for F_BOOL and F_REAL data structures). Therefore, all F-channel drivers in an F-signal module must be in the same F-shutdown group, together with the module driver of the F-signal module.

# Defining F-shutdown groups

As soon as you place F-blocks in the CFC editor for the first time, all of the F-runtime groups in a single cyclic interrupt OB will form an F-shutdown group. You can configure each F-runtime group as the last F-runtime group in an F-shutdown group by placing the F_PSG_M ""selection block"". The F-system then creates a new F-shutdown group for all subsequent F-runtime groups until another F_PSG_M block is found.

# Distribution/Combination by means of manual placing of F_PSG_M

If you add or delete one or a number of F_PSG_M blocks in your project, the order of your F-shutdown groups will change. If you make a change to the layout of your F-shutdown groups, you must make sure that the F-module drivers and all assigned F-channel drivers are integrated in the same F-shutdown group. You can split one F-shutdown group into two F-shutdown groups. To do this, in the CFC editor's runtime editor, place the F_PSG_M block in the last F-runtime group which is to be assigned to the first F-shutdown group. All subsequent F-runtime groups will then be assigned to the second F-shutdown group. The number of F-shutdown groups is limited to 110 in all cyclic interrupt OBs. The system restricts the number of F-runtime groups in an F-shutdown group. You have the option of combining two F-shutdown groups. To do this, in the runtime editor of the CFC editor, delete the F_PSG_M block between the F-shutdown groups. If you combine a number of F-shutdown groups which exchange data via F-communication blocks in a single F-shutdown group, you need to remove these F-communications blocks and replace them with direct interconnections.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# Programming data exchange between F-shutdown groups

If you wish to exchange data between two F-shutdown groups, you are not permitted to interconnect the inputs and outputs directly. You need to use the following F-system blocks for data exchange between F blocks in different F-shutdown groups:

|F block|Description|
|---|---|
|F_S_R/F_R_R|Safe transfer of 5 data of the F_REAL type|
|F_S_BO/F_R_BO|Safe transfer of 5 data of the F_BOOL type|

# Procedure for data exchange

1. In the F-shutdown group from which data is to be transferred, add an F_S_R or F_S_BO type F-block.
2. In the F-shutdown group to which data is to be transferred, add an F_R_R or F_R_BO type F-block.
3. Interconnect the SD_R_xx inputs of the F_S_R or the SD_BO_xx inputs of the F_S_BO with the data to be transferred.
4. Interconnect the RD_R_xx outputs of the F_R_R or the RD_BO_xx outputs of the F_R_BO with the inputs of the F-block for further processing of the data received.
5. Interconnect the S_DB output of the send block with the S_DB input of the associated receive block.
6. Configure the TIMEOUT inputs of the F_R_R and F_R_BO receive blocks with the F-monitoring time calculated.
7. Configure the receive block substitute values for the scenario of a shutdown of the sending shutdown group.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Extract from a chart for shutdown group 1 with send block:

|42617|7ail-|7133 Cor|CHLDEA F|1e-0- Ck_INE|
|---|---|---|---|---|
|JdEO|90_8o_|J0_EO|90_BO|JD_Bo_|
|11_112|J0_EO_07|32_80_08|7193 Coz|CHLDEA|
|Q_EAII|4212 bloel|PaJJ_CX|0_Kod|ubSime|
|4nu|Lou|JG RG|P3c >| |

The connection to shutdown group 2 is established by linking output S_DB of block F_S_BO_1 in shutdown group 1 with input S_DB on block F_R_BO_1 in shutdown group 2.

Extract from a chart for shutdown group 2 with receive block:

|Xbaeha|32430|netr|
|---|---|---|
|314 = doxr|3281p|REC_E?|
|Recei|ER EL|RD_BO_|
|RD_BO_|8088Q_01|RD_EQ|
|RD_E?|302ZD|RD_Lo|

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

89

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.7 Data exchange between the F user program and standard user program

The standard program and the F-program use different data formats. Accordingly, special conversion blocks have to be used for data exchange.

F-CPU
F-program
Conversion blocks
Standard program
Converting F-data types to standard data types

If you need the standard user program to process data from the F-program further (for monitoring on the PCS 7 OS, for example), a block for F_FDatatype_Datatype data conversion will have to be interconnected in the user program so that the F-data types can be converted into standard data types. This converter blocks must be called in the standard user program (standard runtime group).

Extract from a process tag chart; converting the ""QBAD"" signal from F_BOOL to BOOL:

Note

The figure is available in its original size as appendix to the manual in the ZIP download of the checklists.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Standard and F-blocks are in different runtime groups. As shown here, some F-blocks have outputs (depicted in gray), which can be directly interconnected with standard PCS 7 blocks. PCS 7 blocks such as MonAnL, MonDiL, EventMESSAGE and their associated faceplates and process symbols are used to visualize fail-safe analog values and status messages as well as system states and operating states. If parameters cannot be directly further interconnected due to the safety data format, the conversion blocks described above can be used.

# Converting standard data types into F-data types

If data from the standard user program is to be processed further in the F-program, it will need to be converted. The blocks for data conversion from standard data types to F-data types (F_datatype_Fdatatype) can only be used in the F-program (F-runtime group).

Extract from an F-chart, conversion from REAL to F_REAL:

|7_R_FR_CONv|R -B|CE 32|CB39|:RELL|Aulci|
|---|---|---|---|---|---|
|DAII ZROC3?|VALUE DiT| | | | |

Note: The conversion blocks only perform data conversion; in other words, you will need to program additional measures in the F-program for plausibility checking purposes (with F_LIM_R, for example), in order to ensure that only non-hazardous values are possible.

# 7.2.8 How F-blocks with floating-point operations respond to number range overflows

Within the context of analog value processing, number range overflows/underflows can occur during arithmetic calculations (with division by 0, root from a negative number or number range overflow). With S7 F Systems Lib V1_3 and higher, the response is as follows in this case: The results ""Overflow (± infinite)"", ""Denormalized floating-point number"" or ""Invalid floating-point number (NaN)"" are:

- Either output at the output and can be processed further by subsequent F blocks
- Or signaled to special outputs. A substitute value is output if necessary.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

91

# Configuring the safety program

# 7.2 Creating the safety program

If the floating-point operation produces an invalid floating-point number (NaN) and no invalid floating-point number (NaN) existed as an address prior to this, the following diagnostics event will be entered in the F CPU's diagnostic buffer:

""Safety program: Invalid REAL number in DB"" (event ID 16#75D9)

You can use this entry in the diagnostic buffer to identify the F block with the invalid floating-point number (NaN).

If you are not able to prevent these events from occurring in your safety program, you will need to decide, on the basis of your application, whether you wish to respond to them in your safety program.

|AD?|nddie|101.o = 101.0_|10o.0|-10q|CUIL|5035|
|---|---|---|---|---|---|---|
|AD?|indoic|0b37 1.0e+3e|:Addle|0etz|3.0e-3e|10o.0|
| |100.0|3.0e-38| |CUIL|AD_|:itis|
|0837i|LIN_R|08371|#Addic|3402-32|c0m| |
| |ce-JE| |CUII|Sms|AD?|0BJ7i|
|Addue|J1o|~10O|02-J8|~100.0|CuTO|100.0=|
|DIV|LIK_R|:tris|100.0_| |100.-|CutQ|
|0.0|502S|SoRT|HXR|:Squo-|{AJi|hal|
|-10o.05|CVIQ|CUIL|5023_W| | | |

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.3 Configuring fail-safe AS-AS communication

You can use the F_LIM_R F block to check the result of a floating-point operation for overflow (± infinite) and invalid floating-point number (NaN).

- A limit violation is indicated by IN &gt; MAX or ""+ infinite"". ",What blocks are placed automatically during the configuration of the safety program according to the 'Compendium Part B - Process Safety (V9.0)'?,A5,"The manual lists F_PLK, F_PSG_M, F-signal module drivers, sending communication and system blocks, F_PLK_O, and F_DIAG (in S7 F-Systems Lib V1_3+) as automatically placed.",2.1875,2.421875,3.359375,1.6484375,0.71875
25,pcs7_compendium_part_b_en-US_en-US.txt,37,5dea5c3b1bc7a2a2d3707ace8a7d6e3ed157196366f8ee88ba630fadc3d36b0e,"Changes to the input parameters of F blocks with F data types can be made as follows:

- Offline with the assistance of the CFC editor
- Online using CFC test mode with safety mode deactivated

Note

Values of PAR_ID and COMPLEM must not be changed. If errors in the safety data format are detected during the execution of the safety program, an F-STOP is triggered.

# 7.2.4 Run sequence of F-blocks

# Defining the run sequence

You define the run sequence in the CFC editor in the same way as for a standard user program. Changing the run sequence also changes the collective signature.

# Correct run sequence of F-blocks

The sequence of the F-blocks within the F-shutdown group is relevant. The number of F-runtime groups the F-shutdown group has been split into is of no relevance. Essentially, the correct run sequence of the various F-block types is as follows:

1. Placed automatically:
- F module driver for F-signal modules with inputs or with inputs and outputs
- F-communications blocks and F-system blocks for receiving
- F blocks for data conversion from standard value to F-structure
- F modules with OS connection
2. F channel drivers for inputs
3. F blocks for user logic

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

1. F channel drivers for outputs
2. Placed automatically:
- F block F_PLK
- F block F_PSG_M
- F module driver for F-signal modules with outputs or with inputs and outputs
- F-communications blocks and F-system blocks for sending
- F block F_PLK_O
- F block F_DIAG (S7 F-Systems Lib V1_3 and higher)

The run sequence of the blocks listed under items 1 and 5 is adjusted automatically when the F-program is compiled.
As if S7 F Systems Lib V1_3, separate runtime groups are created for the F blocks listed under points 1 and 5 during the first compilation.
The IPO principle (input, process, output) must always be observed when placing F-channel drivers and F-blocks for user logic.
This ensures that all inputs are read first, the relevant processing steps are performed, and all outputs are then written.
Furthermore, F-runtime groups and F-monitoring blocks that are only visible following compilation are also added automatically.

Note

No changes may be made in the automatically added runtime groups with the exception of the scan cycle monitoring on ""F_CYC_CO"" blocks and the parameter assignment of the ""F_SHUTDN"" block.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.5 F-runtime groups

During the programming of the safety program, F-blocks cannot be inserted directly into tasks (cyclic interrupt OBs). When a new CFC chart is created in PCS 7, the system will automatically generate a runtime group of the same name, into which the F-blocks placed in the corresponding CFC chart can then be inserted. An F-runtime group only becomes an F-runtime group (identified by a yellow folder and ""F"") when F-blocks are called in it.

0B37 [Cyclic interrupt7] (300 ms)
@CPU_RTI@CPU_RT
@F_ShutDn_37 (300 ms)
@F_ShutDn (300 ms)
CycCo-QB37 (300 ms)
CycCo-OB3ZIF_CYC_CO-OB37
@F_CycCo-OB3ZIF_TEST
@F_CycCo-OB37IF_TESTC
@F_TestMode (300 ms)
@F_IN_37_0 (300 ms)
SFC_109_F (300 ms)
AI_F (300 ms)
HS104_F (300 ms)
@F_OUT_37_0 (300 ms)
@F_DbIniti (300 ms)
0B38 [Cycic interrupta] (10 ms)

# Runtime groups of an F-program

The F-program is divided into several runtime groups, as shown in the table below.

Note

xx = Number of the cyclic interrupt OB

y = Consecutive numbering if several shutdown groups exist in a single cyclic interrupt OB

|Chart|F blocks|
|---|---|
|@F_ShutDn_xx|Shutdown logic of cyclic interrupt OB The shutdown logic is created with RTGLOGIC and standard logic blocks.|
|@F_ShutDn|Shutdown block Where an F-program is present in several cyclic interrupt OBs, this runtime group is integrated into the cyclic interrupt OB with the shortest call time. The shutdown logic is created with F_SHUTDN, RTGLOGIC, and standard logic blocks.|
|@F_CycCo-OBxx|F_CYC_CO, F_TEST and F_TESTC (for tests)|
|@F_TestMode|F_TESTM for managing safety mode|
|@F_IN_xx_y|F blocks which supply input values for the F-program (F_QUITES, communication receive blocks, conversion blocks from standard to F-data types, drivers for F-input modules) Runtime groups with user logic, in the sequence in which they were created by the user|

Compendium Part B - Process Safety (V9.0)
Operating Manual, 04/2018, A5E43228905-AA

# 7.2 Creating the safety program

@F_OUT_xx_y Blocks which further process output values of F-blocks (communication send blocks, conversion blocks from F-to standard data types, drivers for F-output modules, F_PLK, F_PLK_O, and F_DIAG for program sequence control)

@F_DbInitxx DB_INIT function block required for the cold restart of an F-runtime group

All required error OBs are added to the block container in the SIMATIC Manager.

There should only be one @F_IN_xx_y runtime group before the first F-user runtime group and one @F_OUT_xx_y runtime group after the last F-user runtime group. If the safety program consists of several shutdown groups (see section 6.2.6 (Page 87)), there is the @F_IN_xx_y and @F_OUT_xx_y runtime group both before and after the F-user runtime group in the shutdown groups.

# Rules for F-runtime groups in the safety program

- We recommend that you proceed as follows in order to make the lengths of the F-cycles as uniform as possible:
If you mix F-and standard runtime groups in a cyclic interrupt OB, you must execute the F-runtime groups before the standard runtime groups.
- The following defaults are set for properties of an F-runtime group:
- Reduction ratio = 1
- Phase offset = 0
- Properties Runtime Group
- Task: 0B37
- Name: HS104
- Comment:
- Reduction ratio:
- Phase offset:
- Optimize run sequence
- Active:
- You are not permitted to move automatically generated F-runtime groups (identified by @).

Note: The feature: Optimize Run Sequence in CFC can lead to a change in the collective signature and impair the response times of the safety program, and therefore should not be used in F-runtime groups.

With PCS 7 V7.0 SP1 and higher, it is no longer possible to optimize the run sequence for cyclic interrupt OBs with F-runtime groups.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.6 F-shutdown groups

An F-shutdown group is a self-contained unit in your safety program. It contains user logic which is executed or shut down simultaneously. The F-shutdown group contains one or a number of F-runtime groups which are assigned to a common cyclic interrupt OB. You can choose whether an error during execution of the safety program causes a full shutdown or a partial shutdown of the safety program. With a partial shutdown, only the F-shutdown group in which the error occurred is shut down.

# Rules for F-shutdown groups in the safety program

You are not permitted to directly interconnect F-blocks in different F-shutdown groups. Data can only be exchanged between F-shutdown groups using special communication blocks (F_S_xx, F_R_xx for F_BOOL and F_REAL data structures). Therefore, all F-channel drivers in an F-signal module must be in the same F-shutdown group, together with the module driver of the F-signal module.

# Defining F-shutdown groups

As soon as you place F-blocks in the CFC editor for the first time, all of the F-runtime groups in a single cyclic interrupt OB will form an F-shutdown group. You can configure each F-runtime group as the last F-runtime group in an F-shutdown group by placing the F_PSG_M ""selection block"". The F-system then creates a new F-shutdown group for all subsequent F-runtime groups until another F_PSG_M block is found.

# Distribution/Combination by means of manual placing of F_PSG_M

If you add or delete one or a number of F_PSG_M blocks in your project, the order of your F-shutdown groups will change. If you make a change to the layout of your F-shutdown groups, you must make sure that the F-module drivers and all assigned F-channel drivers are integrated in the same F-shutdown group. You can split one F-shutdown group into two F-shutdown groups. To do this, in the CFC editor's runtime editor, place the F_PSG_M block in the last F-runtime group which is to be assigned to the first F-shutdown group. All subsequent F-runtime groups will then be assigned to the second F-shutdown group. The number of F-shutdown groups is limited to 110 in all cyclic interrupt OBs. The system restricts the number of F-runtime groups in an F-shutdown group. You have the option of combining two F-shutdown groups. To do this, in the runtime editor of the CFC editor, delete the F_PSG_M block between the F-shutdown groups. If you combine a number of F-shutdown groups which exchange data via F-communication blocks in a single F-shutdown group, you need to remove these F-communications blocks and replace them with direct interconnections.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# Programming data exchange between F-shutdown groups

If you wish to exchange data between two F-shutdown groups, you are not permitted to interconnect the inputs and outputs directly. You need to use the following F-system blocks for data exchange between F blocks in different F-shutdown groups:

|F block|Description|
|---|---|
|F_S_R/F_R_R|Safe transfer of 5 data of the F_REAL type|
|F_S_BO/F_R_BO|Safe transfer of 5 data of the F_BOOL type|

# Procedure for data exchange

1. In the F-shutdown group from which data is to be transferred, add an F_S_R or F_S_BO type F-block.
2. In the F-shutdown group to which data is to be transferred, add an F_R_R or F_R_BO type F-block.
3. Interconnect the SD_R_xx inputs of the F_S_R or the SD_BO_xx inputs of the F_S_BO with the data to be transferred.
4. Interconnect the RD_R_xx outputs of the F_R_R or the RD_BO_xx outputs of the F_R_BO with the inputs of the F-block for further processing of the data received.
5. Interconnect the S_DB output of the send block with the S_DB input of the associated receive block.
6. Configure the TIMEOUT inputs of the F_R_R and F_R_BO receive blocks with the F-monitoring time calculated.
7. Configure the receive block substitute values for the scenario of a shutdown of the sending shutdown group.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Extract from a chart for shutdown group 1 with send block:

|42617|7ail-|7133 Cor|CHLDEA F|1e-0- Ck_INE|
|---|---|---|---|---|
|JdEO|90_8o_|J0_EO|90_BO|JD_Bo_|
|11_112|J0_EO_07|32_80_08|7193 Coz|CHLDEA|
|Q_EAII|4212 bloel|PaJJ_CX|0_Kod|ubSime|
|4nu|Lou|JG RG|P3c >| |

The connection to shutdown group 2 is established by linking output S_DB of block F_S_BO_1 in shutdown group 1 with input S_DB on block F_R_BO_1 in shutdown group 2.

Extract from a chart for shutdown group 2 with receive block:

|Xbaeha|32430|netr|
|---|---|---|
|314 = doxr|3281p|REC_E?|
|Recei|ER EL|RD_BO_|
|RD_BO_|8088Q_01|RD_EQ|
|RD_E?|302ZD|RD_Lo|

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

89

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.7 Data exchange between the F user program and standard user program

The standard program and the F-program use different data formats. Accordingly, special conversion blocks have to be used for data exchange.

F-CPU
F-program
Conversion blocks
Standard program
Converting F-data types to standard data types

If you need the standard user program to process data from the F-program further (for monitoring on the PCS 7 OS, for example), a block for F_FDatatype_Datatype data conversion will have to be interconnected in the user program so that the F-data types can be converted into standard data types. This converter blocks must be called in the standard user program (standard runtime group).

Extract from a process tag chart; converting the ""QBAD"" signal from F_BOOL to BOOL:

Note

The figure is available in its original size as appendix to the manual in the ZIP download of the checklists.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Standard and F-blocks are in different runtime groups. As shown here, some F-blocks have outputs (depicted in gray), which can be directly interconnected with standard PCS 7 blocks. PCS 7 blocks such as MonAnL, MonDiL, EventMESSAGE and their associated faceplates and process symbols are used to visualize fail-safe analog values and status messages as well as system states and operating states. If parameters cannot be directly further interconnected due to the safety data format, the conversion blocks described above can be used.

# Converting standard data types into F-data types

If data from the standard user program is to be processed further in the F-program, it will need to be converted. The blocks for data conversion from standard data types to F-data types (F_datatype_Fdatatype) can only be used in the F-program (F-runtime group).

Extract from an F-chart, conversion from REAL to F_REAL:

|7_R_FR_CONv|R -B|CE 32|CB39|:RELL|Aulci|
|---|---|---|---|---|---|
|DAII ZROC3?|VALUE DiT| | | | |

Note: The conversion blocks only perform data conversion; in other words, you will need to program additional measures in the F-program for plausibility checking purposes (with F_LIM_R, for example), in order to ensure that only non-hazardous values are possible.

# 7.2.8 How F-blocks with floating-point operations respond to number range overflows

Within the context of analog value processing, number range overflows/underflows can occur during arithmetic calculations (with division by 0, root from a negative number or number range overflow). With S7 F Systems Lib V1_3 and higher, the response is as follows in this case: The results ""Overflow (± infinite)"", ""Denormalized floating-point number"" or ""Invalid floating-point number (NaN)"" are:

- Either output at the output and can be processed further by subsequent F blocks
- Or signaled to special outputs. A substitute value is output if necessary.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

91

# Configuring the safety program

# 7.2 Creating the safety program

If the floating-point operation produces an invalid floating-point number (NaN) and no invalid floating-point number (NaN) existed as an address prior to this, the following diagnostics event will be entered in the F CPU's diagnostic buffer:

""Safety program: Invalid REAL number in DB"" (event ID 16#75D9)

You can use this entry in the diagnostic buffer to identify the F block with the invalid floating-point number (NaN).

If you are not able to prevent these events from occurring in your safety program, you will need to decide, on the basis of your application, whether you wish to respond to them in your safety program.

|AD?|nddie|101.o = 101.0_|10o.0|-10q|CUIL|5035|
|---|---|---|---|---|---|---|
|AD?|indoic|0b37 1.0e+3e|:Addle|0etz|3.0e-3e|10o.0|
| |100.0|3.0e-38| |CUIL|AD_|:itis|
|0837i|LIN_R|08371|#Addic|3402-32|c0m| |
| |ce-JE| |CUII|Sms|AD?|0BJ7i|
|Addue|J1o|~10O|02-J8|~100.0|CuTO|100.0=|
|DIV|LIK_R|:tris|100.0_| |100.-|CutQ|
|0.0|502S|SoRT|HXR|:Squo-|{AJi|hal|
|-10o.05|CVIQ|CUIL|5023_W| | | |

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.3 Configuring fail-safe AS-AS communication

You can use the F_LIM_R F block to check the result of a floating-point operation for overflow (± infinite) and invalid floating-point number (NaN).

- A limit violation is indicated by IN &gt; MAX or ""+ infinite"". ",What is an F-shutdown group in the context of the safety program described in the 'Compendium Part B - Process Safety (V9.0)'?,A1,"An F-shutdown group is a self-contained unit in the safety program containing user logic executed or shut down simultaneously, consisting of one or more F-runtime groups assigned to a common cyclic interrupt OB.",2.5625,2.78125,3.609375,1.9375,0.65625
26,pcs7_compendium_part_b_en-US_en-US.txt,37,5dea5c3b1bc7a2a2d3707ace8a7d6e3ed157196366f8ee88ba630fadc3d36b0e,"Changes to the input parameters of F blocks with F data types can be made as follows:

- Offline with the assistance of the CFC editor
- Online using CFC test mode with safety mode deactivated

Note

Values of PAR_ID and COMPLEM must not be changed. If errors in the safety data format are detected during the execution of the safety program, an F-STOP is triggered.

# 7.2.4 Run sequence of F-blocks

# Defining the run sequence

You define the run sequence in the CFC editor in the same way as for a standard user program. Changing the run sequence also changes the collective signature.

# Correct run sequence of F-blocks

The sequence of the F-blocks within the F-shutdown group is relevant. The number of F-runtime groups the F-shutdown group has been split into is of no relevance. Essentially, the correct run sequence of the various F-block types is as follows:

1. Placed automatically:
- F module driver for F-signal modules with inputs or with inputs and outputs
- F-communications blocks and F-system blocks for receiving
- F blocks for data conversion from standard value to F-structure
- F modules with OS connection
2. F channel drivers for inputs
3. F blocks for user logic

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

1. F channel drivers for outputs
2. Placed automatically:
- F block F_PLK
- F block F_PSG_M
- F module driver for F-signal modules with outputs or with inputs and outputs
- F-communications blocks and F-system blocks for sending
- F block F_PLK_O
- F block F_DIAG (S7 F-Systems Lib V1_3 and higher)

The run sequence of the blocks listed under items 1 and 5 is adjusted automatically when the F-program is compiled.
As if S7 F Systems Lib V1_3, separate runtime groups are created for the F blocks listed under points 1 and 5 during the first compilation.
The IPO principle (input, process, output) must always be observed when placing F-channel drivers and F-blocks for user logic.
This ensures that all inputs are read first, the relevant processing steps are performed, and all outputs are then written.
Furthermore, F-runtime groups and F-monitoring blocks that are only visible following compilation are also added automatically.

Note

No changes may be made in the automatically added runtime groups with the exception of the scan cycle monitoring on ""F_CYC_CO"" blocks and the parameter assignment of the ""F_SHUTDN"" block.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.5 F-runtime groups

During the programming of the safety program, F-blocks cannot be inserted directly into tasks (cyclic interrupt OBs). When a new CFC chart is created in PCS 7, the system will automatically generate a runtime group of the same name, into which the F-blocks placed in the corresponding CFC chart can then be inserted. An F-runtime group only becomes an F-runtime group (identified by a yellow folder and ""F"") when F-blocks are called in it.

0B37 [Cyclic interrupt7] (300 ms)
@CPU_RTI@CPU_RT
@F_ShutDn_37 (300 ms)
@F_ShutDn (300 ms)
CycCo-QB37 (300 ms)
CycCo-OB3ZIF_CYC_CO-OB37
@F_CycCo-OB3ZIF_TEST
@F_CycCo-OB37IF_TESTC
@F_TestMode (300 ms)
@F_IN_37_0 (300 ms)
SFC_109_F (300 ms)
AI_F (300 ms)
HS104_F (300 ms)
@F_OUT_37_0 (300 ms)
@F_DbIniti (300 ms)
0B38 [Cycic interrupta] (10 ms)

# Runtime groups of an F-program

The F-program is divided into several runtime groups, as shown in the table below.

Note

xx = Number of the cyclic interrupt OB

y = Consecutive numbering if several shutdown groups exist in a single cyclic interrupt OB

|Chart|F blocks|
|---|---|
|@F_ShutDn_xx|Shutdown logic of cyclic interrupt OB The shutdown logic is created with RTGLOGIC and standard logic blocks.|
|@F_ShutDn|Shutdown block Where an F-program is present in several cyclic interrupt OBs, this runtime group is integrated into the cyclic interrupt OB with the shortest call time. The shutdown logic is created with F_SHUTDN, RTGLOGIC, and standard logic blocks.|
|@F_CycCo-OBxx|F_CYC_CO, F_TEST and F_TESTC (for tests)|
|@F_TestMode|F_TESTM for managing safety mode|
|@F_IN_xx_y|F blocks which supply input values for the F-program (F_QUITES, communication receive blocks, conversion blocks from standard to F-data types, drivers for F-input modules) Runtime groups with user logic, in the sequence in which they were created by the user|

Compendium Part B - Process Safety (V9.0)
Operating Manual, 04/2018, A5E43228905-AA

# 7.2 Creating the safety program

@F_OUT_xx_y Blocks which further process output values of F-blocks (communication send blocks, conversion blocks from F-to standard data types, drivers for F-output modules, F_PLK, F_PLK_O, and F_DIAG for program sequence control)

@F_DbInitxx DB_INIT function block required for the cold restart of an F-runtime group

All required error OBs are added to the block container in the SIMATIC Manager.

There should only be one @F_IN_xx_y runtime group before the first F-user runtime group and one @F_OUT_xx_y runtime group after the last F-user runtime group. If the safety program consists of several shutdown groups (see section 6.2.6 (Page 87)), there is the @F_IN_xx_y and @F_OUT_xx_y runtime group both before and after the F-user runtime group in the shutdown groups.

# Rules for F-runtime groups in the safety program

- We recommend that you proceed as follows in order to make the lengths of the F-cycles as uniform as possible:
If you mix F-and standard runtime groups in a cyclic interrupt OB, you must execute the F-runtime groups before the standard runtime groups.
- The following defaults are set for properties of an F-runtime group:
- Reduction ratio = 1
- Phase offset = 0
- Properties Runtime Group
- Task: 0B37
- Name: HS104
- Comment:
- Reduction ratio:
- Phase offset:
- Optimize run sequence
- Active:
- You are not permitted to move automatically generated F-runtime groups (identified by @).

Note: The feature: Optimize Run Sequence in CFC can lead to a change in the collective signature and impair the response times of the safety program, and therefore should not be used in F-runtime groups.

With PCS 7 V7.0 SP1 and higher, it is no longer possible to optimize the run sequence for cyclic interrupt OBs with F-runtime groups.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.6 F-shutdown groups

An F-shutdown group is a self-contained unit in your safety program. It contains user logic which is executed or shut down simultaneously. The F-shutdown group contains one or a number of F-runtime groups which are assigned to a common cyclic interrupt OB. You can choose whether an error during execution of the safety program causes a full shutdown or a partial shutdown of the safety program. With a partial shutdown, only the F-shutdown group in which the error occurred is shut down.

# Rules for F-shutdown groups in the safety program

You are not permitted to directly interconnect F-blocks in different F-shutdown groups. Data can only be exchanged between F-shutdown groups using special communication blocks (F_S_xx, F_R_xx for F_BOOL and F_REAL data structures). Therefore, all F-channel drivers in an F-signal module must be in the same F-shutdown group, together with the module driver of the F-signal module.

# Defining F-shutdown groups

As soon as you place F-blocks in the CFC editor for the first time, all of the F-runtime groups in a single cyclic interrupt OB will form an F-shutdown group. You can configure each F-runtime group as the last F-runtime group in an F-shutdown group by placing the F_PSG_M ""selection block"". The F-system then creates a new F-shutdown group for all subsequent F-runtime groups until another F_PSG_M block is found.

# Distribution/Combination by means of manual placing of F_PSG_M

If you add or delete one or a number of F_PSG_M blocks in your project, the order of your F-shutdown groups will change. If you make a change to the layout of your F-shutdown groups, you must make sure that the F-module drivers and all assigned F-channel drivers are integrated in the same F-shutdown group. You can split one F-shutdown group into two F-shutdown groups. To do this, in the CFC editor's runtime editor, place the F_PSG_M block in the last F-runtime group which is to be assigned to the first F-shutdown group. All subsequent F-runtime groups will then be assigned to the second F-shutdown group. The number of F-shutdown groups is limited to 110 in all cyclic interrupt OBs. The system restricts the number of F-runtime groups in an F-shutdown group. You have the option of combining two F-shutdown groups. To do this, in the runtime editor of the CFC editor, delete the F_PSG_M block between the F-shutdown groups. If you combine a number of F-shutdown groups which exchange data via F-communication blocks in a single F-shutdown group, you need to remove these F-communications blocks and replace them with direct interconnections.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# Programming data exchange between F-shutdown groups

If you wish to exchange data between two F-shutdown groups, you are not permitted to interconnect the inputs and outputs directly. You need to use the following F-system blocks for data exchange between F blocks in different F-shutdown groups:

|F block|Description|
|---|---|
|F_S_R/F_R_R|Safe transfer of 5 data of the F_REAL type|
|F_S_BO/F_R_BO|Safe transfer of 5 data of the F_BOOL type|

# Procedure for data exchange

1. In the F-shutdown group from which data is to be transferred, add an F_S_R or F_S_BO type F-block.
2. In the F-shutdown group to which data is to be transferred, add an F_R_R or F_R_BO type F-block.
3. Interconnect the SD_R_xx inputs of the F_S_R or the SD_BO_xx inputs of the F_S_BO with the data to be transferred.
4. Interconnect the RD_R_xx outputs of the F_R_R or the RD_BO_xx outputs of the F_R_BO with the inputs of the F-block for further processing of the data received.
5. Interconnect the S_DB output of the send block with the S_DB input of the associated receive block.
6. Configure the TIMEOUT inputs of the F_R_R and F_R_BO receive blocks with the F-monitoring time calculated.
7. Configure the receive block substitute values for the scenario of a shutdown of the sending shutdown group.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Extract from a chart for shutdown group 1 with send block:

|42617|7ail-|7133 Cor|CHLDEA F|1e-0- Ck_INE|
|---|---|---|---|---|
|JdEO|90_8o_|J0_EO|90_BO|JD_Bo_|
|11_112|J0_EO_07|32_80_08|7193 Coz|CHLDEA|
|Q_EAII|4212 bloel|PaJJ_CX|0_Kod|ubSime|
|4nu|Lou|JG RG|P3c >| |

The connection to shutdown group 2 is established by linking output S_DB of block F_S_BO_1 in shutdown group 1 with input S_DB on block F_R_BO_1 in shutdown group 2.

Extract from a chart for shutdown group 2 with receive block:

|Xbaeha|32430|netr|
|---|---|---|
|314 = doxr|3281p|REC_E?|
|Recei|ER EL|RD_BO_|
|RD_BO_|8088Q_01|RD_EQ|
|RD_E?|302ZD|RD_Lo|

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

89

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.7 Data exchange between the F user program and standard user program

The standard program and the F-program use different data formats. Accordingly, special conversion blocks have to be used for data exchange.

F-CPU
F-program
Conversion blocks
Standard program
Converting F-data types to standard data types

If you need the standard user program to process data from the F-program further (for monitoring on the PCS 7 OS, for example), a block for F_FDatatype_Datatype data conversion will have to be interconnected in the user program so that the F-data types can be converted into standard data types. This converter blocks must be called in the standard user program (standard runtime group).

Extract from a process tag chart; converting the ""QBAD"" signal from F_BOOL to BOOL:

Note

The figure is available in its original size as appendix to the manual in the ZIP download of the checklists.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Standard and F-blocks are in different runtime groups. As shown here, some F-blocks have outputs (depicted in gray), which can be directly interconnected with standard PCS 7 blocks. PCS 7 blocks such as MonAnL, MonDiL, EventMESSAGE and their associated faceplates and process symbols are used to visualize fail-safe analog values and status messages as well as system states and operating states. If parameters cannot be directly further interconnected due to the safety data format, the conversion blocks described above can be used.

# Converting standard data types into F-data types

If data from the standard user program is to be processed further in the F-program, it will need to be converted. The blocks for data conversion from standard data types to F-data types (F_datatype_Fdatatype) can only be used in the F-program (F-runtime group).

Extract from an F-chart, conversion from REAL to F_REAL:

|7_R_FR_CONv|R -B|CE 32|CB39|:RELL|Aulci|
|---|---|---|---|---|---|
|DAII ZROC3?|VALUE DiT| | | | |

Note: The conversion blocks only perform data conversion; in other words, you will need to program additional measures in the F-program for plausibility checking purposes (with F_LIM_R, for example), in order to ensure that only non-hazardous values are possible.

# 7.2.8 How F-blocks with floating-point operations respond to number range overflows

Within the context of analog value processing, number range overflows/underflows can occur during arithmetic calculations (with division by 0, root from a negative number or number range overflow). With S7 F Systems Lib V1_3 and higher, the response is as follows in this case: The results ""Overflow (± infinite)"", ""Denormalized floating-point number"" or ""Invalid floating-point number (NaN)"" are:

- Either output at the output and can be processed further by subsequent F blocks
- Or signaled to special outputs. A substitute value is output if necessary.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

91

# Configuring the safety program

# 7.2 Creating the safety program

If the floating-point operation produces an invalid floating-point number (NaN) and no invalid floating-point number (NaN) existed as an address prior to this, the following diagnostics event will be entered in the F CPU's diagnostic buffer:

""Safety program: Invalid REAL number in DB"" (event ID 16#75D9)

You can use this entry in the diagnostic buffer to identify the F block with the invalid floating-point number (NaN).

If you are not able to prevent these events from occurring in your safety program, you will need to decide, on the basis of your application, whether you wish to respond to them in your safety program.

|AD?|nddie|101.o = 101.0_|10o.0|-10q|CUIL|5035|
|---|---|---|---|---|---|---|
|AD?|indoic|0b37 1.0e+3e|:Addle|0etz|3.0e-3e|10o.0|
| |100.0|3.0e-38| |CUIL|AD_|:itis|
|0837i|LIN_R|08371|#Addic|3402-32|c0m| |
| |ce-JE| |CUII|Sms|AD?|0BJ7i|
|Addue|J1o|~10O|02-J8|~100.0|CuTO|100.0=|
|DIV|LIK_R|:tris|100.0_| |100.-|CutQ|
|0.0|502S|SoRT|HXR|:Squo-|{AJi|hal|
|-10o.05|CVIQ|CUIL|5023_W| | | |

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.3 Configuring fail-safe AS-AS communication

You can use the F_LIM_R F block to check the result of a floating-point operation for overflow (± infinite) and invalid floating-point number (NaN).

- A limit violation is indicated by IN &gt; MAX or ""+ infinite"". ",What is an F-shutdown group in the context of the safety program described in the 'Compendium Part B - Process Safety (V9.0)'?,A2,"A self-contained safety program unit with user logic for simultaneous execution or shutdown, comprising F-runtime groups under a shared cyclic interrupt OB.",1.6640625,1.671875,3.21875,1.75,0.51171875
27,pcs7_compendium_part_b_en-US_en-US.txt,37,5dea5c3b1bc7a2a2d3707ace8a7d6e3ed157196366f8ee88ba630fadc3d36b0e,"Changes to the input parameters of F blocks with F data types can be made as follows:

- Offline with the assistance of the CFC editor
- Online using CFC test mode with safety mode deactivated

Note

Values of PAR_ID and COMPLEM must not be changed. If errors in the safety data format are detected during the execution of the safety program, an F-STOP is triggered.

# 7.2.4 Run sequence of F-blocks

# Defining the run sequence

You define the run sequence in the CFC editor in the same way as for a standard user program. Changing the run sequence also changes the collective signature.

# Correct run sequence of F-blocks

The sequence of the F-blocks within the F-shutdown group is relevant. The number of F-runtime groups the F-shutdown group has been split into is of no relevance. Essentially, the correct run sequence of the various F-block types is as follows:

1. Placed automatically:
- F module driver for F-signal modules with inputs or with inputs and outputs
- F-communications blocks and F-system blocks for receiving
- F blocks for data conversion from standard value to F-structure
- F modules with OS connection
2. F channel drivers for inputs
3. F blocks for user logic

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

1. F channel drivers for outputs
2. Placed automatically:
- F block F_PLK
- F block F_PSG_M
- F module driver for F-signal modules with outputs or with inputs and outputs
- F-communications blocks and F-system blocks for sending
- F block F_PLK_O
- F block F_DIAG (S7 F-Systems Lib V1_3 and higher)

The run sequence of the blocks listed under items 1 and 5 is adjusted automatically when the F-program is compiled.
As if S7 F Systems Lib V1_3, separate runtime groups are created for the F blocks listed under points 1 and 5 during the first compilation.
The IPO principle (input, process, output) must always be observed when placing F-channel drivers and F-blocks for user logic.
This ensures that all inputs are read first, the relevant processing steps are performed, and all outputs are then written.
Furthermore, F-runtime groups and F-monitoring blocks that are only visible following compilation are also added automatically.

Note

No changes may be made in the automatically added runtime groups with the exception of the scan cycle monitoring on ""F_CYC_CO"" blocks and the parameter assignment of the ""F_SHUTDN"" block.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.5 F-runtime groups

During the programming of the safety program, F-blocks cannot be inserted directly into tasks (cyclic interrupt OBs). When a new CFC chart is created in PCS 7, the system will automatically generate a runtime group of the same name, into which the F-blocks placed in the corresponding CFC chart can then be inserted. An F-runtime group only becomes an F-runtime group (identified by a yellow folder and ""F"") when F-blocks are called in it.

0B37 [Cyclic interrupt7] (300 ms)
@CPU_RTI@CPU_RT
@F_ShutDn_37 (300 ms)
@F_ShutDn (300 ms)
CycCo-QB37 (300 ms)
CycCo-OB3ZIF_CYC_CO-OB37
@F_CycCo-OB3ZIF_TEST
@F_CycCo-OB37IF_TESTC
@F_TestMode (300 ms)
@F_IN_37_0 (300 ms)
SFC_109_F (300 ms)
AI_F (300 ms)
HS104_F (300 ms)
@F_OUT_37_0 (300 ms)
@F_DbIniti (300 ms)
0B38 [Cycic interrupta] (10 ms)

# Runtime groups of an F-program

The F-program is divided into several runtime groups, as shown in the table below.

Note

xx = Number of the cyclic interrupt OB

y = Consecutive numbering if several shutdown groups exist in a single cyclic interrupt OB

|Chart|F blocks|
|---|---|
|@F_ShutDn_xx|Shutdown logic of cyclic interrupt OB The shutdown logic is created with RTGLOGIC and standard logic blocks.|
|@F_ShutDn|Shutdown block Where an F-program is present in several cyclic interrupt OBs, this runtime group is integrated into the cyclic interrupt OB with the shortest call time. The shutdown logic is created with F_SHUTDN, RTGLOGIC, and standard logic blocks.|
|@F_CycCo-OBxx|F_CYC_CO, F_TEST and F_TESTC (for tests)|
|@F_TestMode|F_TESTM for managing safety mode|
|@F_IN_xx_y|F blocks which supply input values for the F-program (F_QUITES, communication receive blocks, conversion blocks from standard to F-data types, drivers for F-input modules) Runtime groups with user logic, in the sequence in which they were created by the user|

Compendium Part B - Process Safety (V9.0)
Operating Manual, 04/2018, A5E43228905-AA

# 7.2 Creating the safety program

@F_OUT_xx_y Blocks which further process output values of F-blocks (communication send blocks, conversion blocks from F-to standard data types, drivers for F-output modules, F_PLK, F_PLK_O, and F_DIAG for program sequence control)

@F_DbInitxx DB_INIT function block required for the cold restart of an F-runtime group

All required error OBs are added to the block container in the SIMATIC Manager.

There should only be one @F_IN_xx_y runtime group before the first F-user runtime group and one @F_OUT_xx_y runtime group after the last F-user runtime group. If the safety program consists of several shutdown groups (see section 6.2.6 (Page 87)), there is the @F_IN_xx_y and @F_OUT_xx_y runtime group both before and after the F-user runtime group in the shutdown groups.

# Rules for F-runtime groups in the safety program

- We recommend that you proceed as follows in order to make the lengths of the F-cycles as uniform as possible:
If you mix F-and standard runtime groups in a cyclic interrupt OB, you must execute the F-runtime groups before the standard runtime groups.
- The following defaults are set for properties of an F-runtime group:
- Reduction ratio = 1
- Phase offset = 0
- Properties Runtime Group
- Task: 0B37
- Name: HS104
- Comment:
- Reduction ratio:
- Phase offset:
- Optimize run sequence
- Active:
- You are not permitted to move automatically generated F-runtime groups (identified by @).

Note: The feature: Optimize Run Sequence in CFC can lead to a change in the collective signature and impair the response times of the safety program, and therefore should not be used in F-runtime groups.

With PCS 7 V7.0 SP1 and higher, it is no longer possible to optimize the run sequence for cyclic interrupt OBs with F-runtime groups.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.6 F-shutdown groups

An F-shutdown group is a self-contained unit in your safety program. It contains user logic which is executed or shut down simultaneously. The F-shutdown group contains one or a number of F-runtime groups which are assigned to a common cyclic interrupt OB. You can choose whether an error during execution of the safety program causes a full shutdown or a partial shutdown of the safety program. With a partial shutdown, only the F-shutdown group in which the error occurred is shut down.

# Rules for F-shutdown groups in the safety program

You are not permitted to directly interconnect F-blocks in different F-shutdown groups. Data can only be exchanged between F-shutdown groups using special communication blocks (F_S_xx, F_R_xx for F_BOOL and F_REAL data structures). Therefore, all F-channel drivers in an F-signal module must be in the same F-shutdown group, together with the module driver of the F-signal module.

# Defining F-shutdown groups

As soon as you place F-blocks in the CFC editor for the first time, all of the F-runtime groups in a single cyclic interrupt OB will form an F-shutdown group. You can configure each F-runtime group as the last F-runtime group in an F-shutdown group by placing the F_PSG_M ""selection block"". The F-system then creates a new F-shutdown group for all subsequent F-runtime groups until another F_PSG_M block is found.

# Distribution/Combination by means of manual placing of F_PSG_M

If you add or delete one or a number of F_PSG_M blocks in your project, the order of your F-shutdown groups will change. If you make a change to the layout of your F-shutdown groups, you must make sure that the F-module drivers and all assigned F-channel drivers are integrated in the same F-shutdown group. You can split one F-shutdown group into two F-shutdown groups. To do this, in the CFC editor's runtime editor, place the F_PSG_M block in the last F-runtime group which is to be assigned to the first F-shutdown group. All subsequent F-runtime groups will then be assigned to the second F-shutdown group. The number of F-shutdown groups is limited to 110 in all cyclic interrupt OBs. The system restricts the number of F-runtime groups in an F-shutdown group. You have the option of combining two F-shutdown groups. To do this, in the runtime editor of the CFC editor, delete the F_PSG_M block between the F-shutdown groups. If you combine a number of F-shutdown groups which exchange data via F-communication blocks in a single F-shutdown group, you need to remove these F-communications blocks and replace them with direct interconnections.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# Programming data exchange between F-shutdown groups

If you wish to exchange data between two F-shutdown groups, you are not permitted to interconnect the inputs and outputs directly. You need to use the following F-system blocks for data exchange between F blocks in different F-shutdown groups:

|F block|Description|
|---|---|
|F_S_R/F_R_R|Safe transfer of 5 data of the F_REAL type|
|F_S_BO/F_R_BO|Safe transfer of 5 data of the F_BOOL type|

# Procedure for data exchange

1. In the F-shutdown group from which data is to be transferred, add an F_S_R or F_S_BO type F-block.
2. In the F-shutdown group to which data is to be transferred, add an F_R_R or F_R_BO type F-block.
3. Interconnect the SD_R_xx inputs of the F_S_R or the SD_BO_xx inputs of the F_S_BO with the data to be transferred.
4. Interconnect the RD_R_xx outputs of the F_R_R or the RD_BO_xx outputs of the F_R_BO with the inputs of the F-block for further processing of the data received.
5. Interconnect the S_DB output of the send block with the S_DB input of the associated receive block.
6. Configure the TIMEOUT inputs of the F_R_R and F_R_BO receive blocks with the F-monitoring time calculated.
7. Configure the receive block substitute values for the scenario of a shutdown of the sending shutdown group.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Extract from a chart for shutdown group 1 with send block:

|42617|7ail-|7133 Cor|CHLDEA F|1e-0- Ck_INE|
|---|---|---|---|---|
|JdEO|90_8o_|J0_EO|90_BO|JD_Bo_|
|11_112|J0_EO_07|32_80_08|7193 Coz|CHLDEA|
|Q_EAII|4212 bloel|PaJJ_CX|0_Kod|ubSime|
|4nu|Lou|JG RG|P3c >| |

The connection to shutdown group 2 is established by linking output S_DB of block F_S_BO_1 in shutdown group 1 with input S_DB on block F_R_BO_1 in shutdown group 2.

Extract from a chart for shutdown group 2 with receive block:

|Xbaeha|32430|netr|
|---|---|---|
|314 = doxr|3281p|REC_E?|
|Recei|ER EL|RD_BO_|
|RD_BO_|8088Q_01|RD_EQ|
|RD_E?|302ZD|RD_Lo|

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

89

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.7 Data exchange between the F user program and standard user program

The standard program and the F-program use different data formats. Accordingly, special conversion blocks have to be used for data exchange.

F-CPU
F-program
Conversion blocks
Standard program
Converting F-data types to standard data types

If you need the standard user program to process data from the F-program further (for monitoring on the PCS 7 OS, for example), a block for F_FDatatype_Datatype data conversion will have to be interconnected in the user program so that the F-data types can be converted into standard data types. This converter blocks must be called in the standard user program (standard runtime group).

Extract from a process tag chart; converting the ""QBAD"" signal from F_BOOL to BOOL:

Note

The figure is available in its original size as appendix to the manual in the ZIP download of the checklists.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Standard and F-blocks are in different runtime groups. As shown here, some F-blocks have outputs (depicted in gray), which can be directly interconnected with standard PCS 7 blocks. PCS 7 blocks such as MonAnL, MonDiL, EventMESSAGE and their associated faceplates and process symbols are used to visualize fail-safe analog values and status messages as well as system states and operating states. If parameters cannot be directly further interconnected due to the safety data format, the conversion blocks described above can be used.

# Converting standard data types into F-data types

If data from the standard user program is to be processed further in the F-program, it will need to be converted. The blocks for data conversion from standard data types to F-data types (F_datatype_Fdatatype) can only be used in the F-program (F-runtime group).

Extract from an F-chart, conversion from REAL to F_REAL:

|7_R_FR_CONv|R -B|CE 32|CB39|:RELL|Aulci|
|---|---|---|---|---|---|
|DAII ZROC3?|VALUE DiT| | | | |

Note: The conversion blocks only perform data conversion; in other words, you will need to program additional measures in the F-program for plausibility checking purposes (with F_LIM_R, for example), in order to ensure that only non-hazardous values are possible.

# 7.2.8 How F-blocks with floating-point operations respond to number range overflows

Within the context of analog value processing, number range overflows/underflows can occur during arithmetic calculations (with division by 0, root from a negative number or number range overflow). With S7 F Systems Lib V1_3 and higher, the response is as follows in this case: The results ""Overflow (± infinite)"", ""Denormalized floating-point number"" or ""Invalid floating-point number (NaN)"" are:

- Either output at the output and can be processed further by subsequent F blocks
- Or signaled to special outputs. A substitute value is output if necessary.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

91

# Configuring the safety program

# 7.2 Creating the safety program

If the floating-point operation produces an invalid floating-point number (NaN) and no invalid floating-point number (NaN) existed as an address prior to this, the following diagnostics event will be entered in the F CPU's diagnostic buffer:

""Safety program: Invalid REAL number in DB"" (event ID 16#75D9)

You can use this entry in the diagnostic buffer to identify the F block with the invalid floating-point number (NaN).

If you are not able to prevent these events from occurring in your safety program, you will need to decide, on the basis of your application, whether you wish to respond to them in your safety program.

|AD?|nddie|101.o = 101.0_|10o.0|-10q|CUIL|5035|
|---|---|---|---|---|---|---|
|AD?|indoic|0b37 1.0e+3e|:Addle|0etz|3.0e-3e|10o.0|
| |100.0|3.0e-38| |CUIL|AD_|:itis|
|0837i|LIN_R|08371|#Addic|3402-32|c0m| |
| |ce-JE| |CUII|Sms|AD?|0BJ7i|
|Addue|J1o|~10O|02-J8|~100.0|CuTO|100.0=|
|DIV|LIK_R|:tris|100.0_| |100.-|CutQ|
|0.0|502S|SoRT|HXR|:Squo-|{AJi|hal|
|-10o.05|CVIQ|CUIL|5023_W| | | |

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.3 Configuring fail-safe AS-AS communication

You can use the F_LIM_R F block to check the result of a floating-point operation for overflow (± infinite) and invalid floating-point number (NaN).

- A limit violation is indicated by IN &gt; MAX or ""+ infinite"". ",What is an F-shutdown group in the context of the safety program described in the 'Compendium Part B - Process Safety (V9.0)'?,A3,"It's a safety program segment with user logic that operates or stops together, made up of F-runtime groups linked to the same cyclic interrupt OB.",1.6796875,1.984375,3.484375,1.65625,0.439453125
28,pcs7_compendium_part_b_en-US_en-US.txt,37,5dea5c3b1bc7a2a2d3707ace8a7d6e3ed157196366f8ee88ba630fadc3d36b0e,"Changes to the input parameters of F blocks with F data types can be made as follows:

- Offline with the assistance of the CFC editor
- Online using CFC test mode with safety mode deactivated

Note

Values of PAR_ID and COMPLEM must not be changed. If errors in the safety data format are detected during the execution of the safety program, an F-STOP is triggered.

# 7.2.4 Run sequence of F-blocks

# Defining the run sequence

You define the run sequence in the CFC editor in the same way as for a standard user program. Changing the run sequence also changes the collective signature.

# Correct run sequence of F-blocks

The sequence of the F-blocks within the F-shutdown group is relevant. The number of F-runtime groups the F-shutdown group has been split into is of no relevance. Essentially, the correct run sequence of the various F-block types is as follows:

1. Placed automatically:
- F module driver for F-signal modules with inputs or with inputs and outputs
- F-communications blocks and F-system blocks for receiving
- F blocks for data conversion from standard value to F-structure
- F modules with OS connection
2. F channel drivers for inputs
3. F blocks for user logic

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

1. F channel drivers for outputs
2. Placed automatically:
- F block F_PLK
- F block F_PSG_M
- F module driver for F-signal modules with outputs or with inputs and outputs
- F-communications blocks and F-system blocks for sending
- F block F_PLK_O
- F block F_DIAG (S7 F-Systems Lib V1_3 and higher)

The run sequence of the blocks listed under items 1 and 5 is adjusted automatically when the F-program is compiled.
As if S7 F Systems Lib V1_3, separate runtime groups are created for the F blocks listed under points 1 and 5 during the first compilation.
The IPO principle (input, process, output) must always be observed when placing F-channel drivers and F-blocks for user logic.
This ensures that all inputs are read first, the relevant processing steps are performed, and all outputs are then written.
Furthermore, F-runtime groups and F-monitoring blocks that are only visible following compilation are also added automatically.

Note

No changes may be made in the automatically added runtime groups with the exception of the scan cycle monitoring on ""F_CYC_CO"" blocks and the parameter assignment of the ""F_SHUTDN"" block.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.5 F-runtime groups

During the programming of the safety program, F-blocks cannot be inserted directly into tasks (cyclic interrupt OBs). When a new CFC chart is created in PCS 7, the system will automatically generate a runtime group of the same name, into which the F-blocks placed in the corresponding CFC chart can then be inserted. An F-runtime group only becomes an F-runtime group (identified by a yellow folder and ""F"") when F-blocks are called in it.

0B37 [Cyclic interrupt7] (300 ms)
@CPU_RTI@CPU_RT
@F_ShutDn_37 (300 ms)
@F_ShutDn (300 ms)
CycCo-QB37 (300 ms)
CycCo-OB3ZIF_CYC_CO-OB37
@F_CycCo-OB3ZIF_TEST
@F_CycCo-OB37IF_TESTC
@F_TestMode (300 ms)
@F_IN_37_0 (300 ms)
SFC_109_F (300 ms)
AI_F (300 ms)
HS104_F (300 ms)
@F_OUT_37_0 (300 ms)
@F_DbIniti (300 ms)
0B38 [Cycic interrupta] (10 ms)

# Runtime groups of an F-program

The F-program is divided into several runtime groups, as shown in the table below.

Note

xx = Number of the cyclic interrupt OB

y = Consecutive numbering if several shutdown groups exist in a single cyclic interrupt OB

|Chart|F blocks|
|---|---|
|@F_ShutDn_xx|Shutdown logic of cyclic interrupt OB The shutdown logic is created with RTGLOGIC and standard logic blocks.|
|@F_ShutDn|Shutdown block Where an F-program is present in several cyclic interrupt OBs, this runtime group is integrated into the cyclic interrupt OB with the shortest call time. The shutdown logic is created with F_SHUTDN, RTGLOGIC, and standard logic blocks.|
|@F_CycCo-OBxx|F_CYC_CO, F_TEST and F_TESTC (for tests)|
|@F_TestMode|F_TESTM for managing safety mode|
|@F_IN_xx_y|F blocks which supply input values for the F-program (F_QUITES, communication receive blocks, conversion blocks from standard to F-data types, drivers for F-input modules) Runtime groups with user logic, in the sequence in which they were created by the user|

Compendium Part B - Process Safety (V9.0)
Operating Manual, 04/2018, A5E43228905-AA

# 7.2 Creating the safety program

@F_OUT_xx_y Blocks which further process output values of F-blocks (communication send blocks, conversion blocks from F-to standard data types, drivers for F-output modules, F_PLK, F_PLK_O, and F_DIAG for program sequence control)

@F_DbInitxx DB_INIT function block required for the cold restart of an F-runtime group

All required error OBs are added to the block container in the SIMATIC Manager.

There should only be one @F_IN_xx_y runtime group before the first F-user runtime group and one @F_OUT_xx_y runtime group after the last F-user runtime group. If the safety program consists of several shutdown groups (see section 6.2.6 (Page 87)), there is the @F_IN_xx_y and @F_OUT_xx_y runtime group both before and after the F-user runtime group in the shutdown groups.

# Rules for F-runtime groups in the safety program

- We recommend that you proceed as follows in order to make the lengths of the F-cycles as uniform as possible:
If you mix F-and standard runtime groups in a cyclic interrupt OB, you must execute the F-runtime groups before the standard runtime groups.
- The following defaults are set for properties of an F-runtime group:
- Reduction ratio = 1
- Phase offset = 0
- Properties Runtime Group
- Task: 0B37
- Name: HS104
- Comment:
- Reduction ratio:
- Phase offset:
- Optimize run sequence
- Active:
- You are not permitted to move automatically generated F-runtime groups (identified by @).

Note: The feature: Optimize Run Sequence in CFC can lead to a change in the collective signature and impair the response times of the safety program, and therefore should not be used in F-runtime groups.

With PCS 7 V7.0 SP1 and higher, it is no longer possible to optimize the run sequence for cyclic interrupt OBs with F-runtime groups.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.6 F-shutdown groups

An F-shutdown group is a self-contained unit in your safety program. It contains user logic which is executed or shut down simultaneously. The F-shutdown group contains one or a number of F-runtime groups which are assigned to a common cyclic interrupt OB. You can choose whether an error during execution of the safety program causes a full shutdown or a partial shutdown of the safety program. With a partial shutdown, only the F-shutdown group in which the error occurred is shut down.

# Rules for F-shutdown groups in the safety program

You are not permitted to directly interconnect F-blocks in different F-shutdown groups. Data can only be exchanged between F-shutdown groups using special communication blocks (F_S_xx, F_R_xx for F_BOOL and F_REAL data structures). Therefore, all F-channel drivers in an F-signal module must be in the same F-shutdown group, together with the module driver of the F-signal module.

# Defining F-shutdown groups

As soon as you place F-blocks in the CFC editor for the first time, all of the F-runtime groups in a single cyclic interrupt OB will form an F-shutdown group. You can configure each F-runtime group as the last F-runtime group in an F-shutdown group by placing the F_PSG_M ""selection block"". The F-system then creates a new F-shutdown group for all subsequent F-runtime groups until another F_PSG_M block is found.

# Distribution/Combination by means of manual placing of F_PSG_M

If you add or delete one or a number of F_PSG_M blocks in your project, the order of your F-shutdown groups will change. If you make a change to the layout of your F-shutdown groups, you must make sure that the F-module drivers and all assigned F-channel drivers are integrated in the same F-shutdown group. You can split one F-shutdown group into two F-shutdown groups. To do this, in the CFC editor's runtime editor, place the F_PSG_M block in the last F-runtime group which is to be assigned to the first F-shutdown group. All subsequent F-runtime groups will then be assigned to the second F-shutdown group. The number of F-shutdown groups is limited to 110 in all cyclic interrupt OBs. The system restricts the number of F-runtime groups in an F-shutdown group. You have the option of combining two F-shutdown groups. To do this, in the runtime editor of the CFC editor, delete the F_PSG_M block between the F-shutdown groups. If you combine a number of F-shutdown groups which exchange data via F-communication blocks in a single F-shutdown group, you need to remove these F-communications blocks and replace them with direct interconnections.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# Programming data exchange between F-shutdown groups

If you wish to exchange data between two F-shutdown groups, you are not permitted to interconnect the inputs and outputs directly. You need to use the following F-system blocks for data exchange between F blocks in different F-shutdown groups:

|F block|Description|
|---|---|
|F_S_R/F_R_R|Safe transfer of 5 data of the F_REAL type|
|F_S_BO/F_R_BO|Safe transfer of 5 data of the F_BOOL type|

# Procedure for data exchange

1. In the F-shutdown group from which data is to be transferred, add an F_S_R or F_S_BO type F-block.
2. In the F-shutdown group to which data is to be transferred, add an F_R_R or F_R_BO type F-block.
3. Interconnect the SD_R_xx inputs of the F_S_R or the SD_BO_xx inputs of the F_S_BO with the data to be transferred.
4. Interconnect the RD_R_xx outputs of the F_R_R or the RD_BO_xx outputs of the F_R_BO with the inputs of the F-block for further processing of the data received.
5. Interconnect the S_DB output of the send block with the S_DB input of the associated receive block.
6. Configure the TIMEOUT inputs of the F_R_R and F_R_BO receive blocks with the F-monitoring time calculated.
7. Configure the receive block substitute values for the scenario of a shutdown of the sending shutdown group.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Extract from a chart for shutdown group 1 with send block:

|42617|7ail-|7133 Cor|CHLDEA F|1e-0- Ck_INE|
|---|---|---|---|---|
|JdEO|90_8o_|J0_EO|90_BO|JD_Bo_|
|11_112|J0_EO_07|32_80_08|7193 Coz|CHLDEA|
|Q_EAII|4212 bloel|PaJJ_CX|0_Kod|ubSime|
|4nu|Lou|JG RG|P3c >| |

The connection to shutdown group 2 is established by linking output S_DB of block F_S_BO_1 in shutdown group 1 with input S_DB on block F_R_BO_1 in shutdown group 2.

Extract from a chart for shutdown group 2 with receive block:

|Xbaeha|32430|netr|
|---|---|---|
|314 = doxr|3281p|REC_E?|
|Recei|ER EL|RD_BO_|
|RD_BO_|8088Q_01|RD_EQ|
|RD_E?|302ZD|RD_Lo|

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

89

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.7 Data exchange between the F user program and standard user program

The standard program and the F-program use different data formats. Accordingly, special conversion blocks have to be used for data exchange.

F-CPU
F-program
Conversion blocks
Standard program
Converting F-data types to standard data types

If you need the standard user program to process data from the F-program further (for monitoring on the PCS 7 OS, for example), a block for F_FDatatype_Datatype data conversion will have to be interconnected in the user program so that the F-data types can be converted into standard data types. This converter blocks must be called in the standard user program (standard runtime group).

Extract from a process tag chart; converting the ""QBAD"" signal from F_BOOL to BOOL:

Note

The figure is available in its original size as appendix to the manual in the ZIP download of the checklists.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Standard and F-blocks are in different runtime groups. As shown here, some F-blocks have outputs (depicted in gray), which can be directly interconnected with standard PCS 7 blocks. PCS 7 blocks such as MonAnL, MonDiL, EventMESSAGE and their associated faceplates and process symbols are used to visualize fail-safe analog values and status messages as well as system states and operating states. If parameters cannot be directly further interconnected due to the safety data format, the conversion blocks described above can be used.

# Converting standard data types into F-data types

If data from the standard user program is to be processed further in the F-program, it will need to be converted. The blocks for data conversion from standard data types to F-data types (F_datatype_Fdatatype) can only be used in the F-program (F-runtime group).

Extract from an F-chart, conversion from REAL to F_REAL:

|7_R_FR_CONv|R -B|CE 32|CB39|:RELL|Aulci|
|---|---|---|---|---|---|
|DAII ZROC3?|VALUE DiT| | | | |

Note: The conversion blocks only perform data conversion; in other words, you will need to program additional measures in the F-program for plausibility checking purposes (with F_LIM_R, for example), in order to ensure that only non-hazardous values are possible.

# 7.2.8 How F-blocks with floating-point operations respond to number range overflows

Within the context of analog value processing, number range overflows/underflows can occur during arithmetic calculations (with division by 0, root from a negative number or number range overflow). With S7 F Systems Lib V1_3 and higher, the response is as follows in this case: The results ""Overflow (± infinite)"", ""Denormalized floating-point number"" or ""Invalid floating-point number (NaN)"" are:

- Either output at the output and can be processed further by subsequent F blocks
- Or signaled to special outputs. A substitute value is output if necessary.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

91

# Configuring the safety program

# 7.2 Creating the safety program

If the floating-point operation produces an invalid floating-point number (NaN) and no invalid floating-point number (NaN) existed as an address prior to this, the following diagnostics event will be entered in the F CPU's diagnostic buffer:

""Safety program: Invalid REAL number in DB"" (event ID 16#75D9)

You can use this entry in the diagnostic buffer to identify the F block with the invalid floating-point number (NaN).

If you are not able to prevent these events from occurring in your safety program, you will need to decide, on the basis of your application, whether you wish to respond to them in your safety program.

|AD?|nddie|101.o = 101.0_|10o.0|-10q|CUIL|5035|
|---|---|---|---|---|---|---|
|AD?|indoic|0b37 1.0e+3e|:Addle|0etz|3.0e-3e|10o.0|
| |100.0|3.0e-38| |CUIL|AD_|:itis|
|0837i|LIN_R|08371|#Addic|3402-32|c0m| |
| |ce-JE| |CUII|Sms|AD?|0BJ7i|
|Addue|J1o|~10O|02-J8|~100.0|CuTO|100.0=|
|DIV|LIK_R|:tris|100.0_| |100.-|CutQ|
|0.0|502S|SoRT|HXR|:Squo-|{AJi|hal|
|-10o.05|CVIQ|CUIL|5023_W| | | |

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.3 Configuring fail-safe AS-AS communication

You can use the F_LIM_R F block to check the result of a floating-point operation for overflow (± infinite) and invalid floating-point number (NaN).

- A limit violation is indicated by IN &gt; MAX or ""+ infinite"". ",What is an F-shutdown group in the context of the safety program described in the 'Compendium Part B - Process Safety (V9.0)'?,A4,An F-shutdown group groups F-runtime groups under one cyclic interrupt OB for coordinated execution or shutdown of user logic.,1.9453125,2.234375,3.390625,1.625,0.376953125
29,pcs7_compendium_part_b_en-US_en-US.txt,37,5dea5c3b1bc7a2a2d3707ace8a7d6e3ed157196366f8ee88ba630fadc3d36b0e,"Changes to the input parameters of F blocks with F data types can be made as follows:

- Offline with the assistance of the CFC editor
- Online using CFC test mode with safety mode deactivated

Note

Values of PAR_ID and COMPLEM must not be changed. If errors in the safety data format are detected during the execution of the safety program, an F-STOP is triggered.

# 7.2.4 Run sequence of F-blocks

# Defining the run sequence

You define the run sequence in the CFC editor in the same way as for a standard user program. Changing the run sequence also changes the collective signature.

# Correct run sequence of F-blocks

The sequence of the F-blocks within the F-shutdown group is relevant. The number of F-runtime groups the F-shutdown group has been split into is of no relevance. Essentially, the correct run sequence of the various F-block types is as follows:

1. Placed automatically:
- F module driver for F-signal modules with inputs or with inputs and outputs
- F-communications blocks and F-system blocks for receiving
- F blocks for data conversion from standard value to F-structure
- F modules with OS connection
2. F channel drivers for inputs
3. F blocks for user logic

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

1. F channel drivers for outputs
2. Placed automatically:
- F block F_PLK
- F block F_PSG_M
- F module driver for F-signal modules with outputs or with inputs and outputs
- F-communications blocks and F-system blocks for sending
- F block F_PLK_O
- F block F_DIAG (S7 F-Systems Lib V1_3 and higher)

The run sequence of the blocks listed under items 1 and 5 is adjusted automatically when the F-program is compiled.
As if S7 F Systems Lib V1_3, separate runtime groups are created for the F blocks listed under points 1 and 5 during the first compilation.
The IPO principle (input, process, output) must always be observed when placing F-channel drivers and F-blocks for user logic.
This ensures that all inputs are read first, the relevant processing steps are performed, and all outputs are then written.
Furthermore, F-runtime groups and F-monitoring blocks that are only visible following compilation are also added automatically.

Note

No changes may be made in the automatically added runtime groups with the exception of the scan cycle monitoring on ""F_CYC_CO"" blocks and the parameter assignment of the ""F_SHUTDN"" block.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.5 F-runtime groups

During the programming of the safety program, F-blocks cannot be inserted directly into tasks (cyclic interrupt OBs). When a new CFC chart is created in PCS 7, the system will automatically generate a runtime group of the same name, into which the F-blocks placed in the corresponding CFC chart can then be inserted. An F-runtime group only becomes an F-runtime group (identified by a yellow folder and ""F"") when F-blocks are called in it.

0B37 [Cyclic interrupt7] (300 ms)
@CPU_RTI@CPU_RT
@F_ShutDn_37 (300 ms)
@F_ShutDn (300 ms)
CycCo-QB37 (300 ms)
CycCo-OB3ZIF_CYC_CO-OB37
@F_CycCo-OB3ZIF_TEST
@F_CycCo-OB37IF_TESTC
@F_TestMode (300 ms)
@F_IN_37_0 (300 ms)
SFC_109_F (300 ms)
AI_F (300 ms)
HS104_F (300 ms)
@F_OUT_37_0 (300 ms)
@F_DbIniti (300 ms)
0B38 [Cycic interrupta] (10 ms)

# Runtime groups of an F-program

The F-program is divided into several runtime groups, as shown in the table below.

Note

xx = Number of the cyclic interrupt OB

y = Consecutive numbering if several shutdown groups exist in a single cyclic interrupt OB

|Chart|F blocks|
|---|---|
|@F_ShutDn_xx|Shutdown logic of cyclic interrupt OB The shutdown logic is created with RTGLOGIC and standard logic blocks.|
|@F_ShutDn|Shutdown block Where an F-program is present in several cyclic interrupt OBs, this runtime group is integrated into the cyclic interrupt OB with the shortest call time. The shutdown logic is created with F_SHUTDN, RTGLOGIC, and standard logic blocks.|
|@F_CycCo-OBxx|F_CYC_CO, F_TEST and F_TESTC (for tests)|
|@F_TestMode|F_TESTM for managing safety mode|
|@F_IN_xx_y|F blocks which supply input values for the F-program (F_QUITES, communication receive blocks, conversion blocks from standard to F-data types, drivers for F-input modules) Runtime groups with user logic, in the sequence in which they were created by the user|

Compendium Part B - Process Safety (V9.0)
Operating Manual, 04/2018, A5E43228905-AA

# 7.2 Creating the safety program

@F_OUT_xx_y Blocks which further process output values of F-blocks (communication send blocks, conversion blocks from F-to standard data types, drivers for F-output modules, F_PLK, F_PLK_O, and F_DIAG for program sequence control)

@F_DbInitxx DB_INIT function block required for the cold restart of an F-runtime group

All required error OBs are added to the block container in the SIMATIC Manager.

There should only be one @F_IN_xx_y runtime group before the first F-user runtime group and one @F_OUT_xx_y runtime group after the last F-user runtime group. If the safety program consists of several shutdown groups (see section 6.2.6 (Page 87)), there is the @F_IN_xx_y and @F_OUT_xx_y runtime group both before and after the F-user runtime group in the shutdown groups.

# Rules for F-runtime groups in the safety program

- We recommend that you proceed as follows in order to make the lengths of the F-cycles as uniform as possible:
If you mix F-and standard runtime groups in a cyclic interrupt OB, you must execute the F-runtime groups before the standard runtime groups.
- The following defaults are set for properties of an F-runtime group:
- Reduction ratio = 1
- Phase offset = 0
- Properties Runtime Group
- Task: 0B37
- Name: HS104
- Comment:
- Reduction ratio:
- Phase offset:
- Optimize run sequence
- Active:
- You are not permitted to move automatically generated F-runtime groups (identified by @).

Note: The feature: Optimize Run Sequence in CFC can lead to a change in the collective signature and impair the response times of the safety program, and therefore should not be used in F-runtime groups.

With PCS 7 V7.0 SP1 and higher, it is no longer possible to optimize the run sequence for cyclic interrupt OBs with F-runtime groups.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.6 F-shutdown groups

An F-shutdown group is a self-contained unit in your safety program. It contains user logic which is executed or shut down simultaneously. The F-shutdown group contains one or a number of F-runtime groups which are assigned to a common cyclic interrupt OB. You can choose whether an error during execution of the safety program causes a full shutdown or a partial shutdown of the safety program. With a partial shutdown, only the F-shutdown group in which the error occurred is shut down.

# Rules for F-shutdown groups in the safety program

You are not permitted to directly interconnect F-blocks in different F-shutdown groups. Data can only be exchanged between F-shutdown groups using special communication blocks (F_S_xx, F_R_xx for F_BOOL and F_REAL data structures). Therefore, all F-channel drivers in an F-signal module must be in the same F-shutdown group, together with the module driver of the F-signal module.

# Defining F-shutdown groups

As soon as you place F-blocks in the CFC editor for the first time, all of the F-runtime groups in a single cyclic interrupt OB will form an F-shutdown group. You can configure each F-runtime group as the last F-runtime group in an F-shutdown group by placing the F_PSG_M ""selection block"". The F-system then creates a new F-shutdown group for all subsequent F-runtime groups until another F_PSG_M block is found.

# Distribution/Combination by means of manual placing of F_PSG_M

If you add or delete one or a number of F_PSG_M blocks in your project, the order of your F-shutdown groups will change. If you make a change to the layout of your F-shutdown groups, you must make sure that the F-module drivers and all assigned F-channel drivers are integrated in the same F-shutdown group. You can split one F-shutdown group into two F-shutdown groups. To do this, in the CFC editor's runtime editor, place the F_PSG_M block in the last F-runtime group which is to be assigned to the first F-shutdown group. All subsequent F-runtime groups will then be assigned to the second F-shutdown group. The number of F-shutdown groups is limited to 110 in all cyclic interrupt OBs. The system restricts the number of F-runtime groups in an F-shutdown group. You have the option of combining two F-shutdown groups. To do this, in the runtime editor of the CFC editor, delete the F_PSG_M block between the F-shutdown groups. If you combine a number of F-shutdown groups which exchange data via F-communication blocks in a single F-shutdown group, you need to remove these F-communications blocks and replace them with direct interconnections.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# Programming data exchange between F-shutdown groups

If you wish to exchange data between two F-shutdown groups, you are not permitted to interconnect the inputs and outputs directly. You need to use the following F-system blocks for data exchange between F blocks in different F-shutdown groups:

|F block|Description|
|---|---|
|F_S_R/F_R_R|Safe transfer of 5 data of the F_REAL type|
|F_S_BO/F_R_BO|Safe transfer of 5 data of the F_BOOL type|

# Procedure for data exchange

1. In the F-shutdown group from which data is to be transferred, add an F_S_R or F_S_BO type F-block.
2. In the F-shutdown group to which data is to be transferred, add an F_R_R or F_R_BO type F-block.
3. Interconnect the SD_R_xx inputs of the F_S_R or the SD_BO_xx inputs of the F_S_BO with the data to be transferred.
4. Interconnect the RD_R_xx outputs of the F_R_R or the RD_BO_xx outputs of the F_R_BO with the inputs of the F-block for further processing of the data received.
5. Interconnect the S_DB output of the send block with the S_DB input of the associated receive block.
6. Configure the TIMEOUT inputs of the F_R_R and F_R_BO receive blocks with the F-monitoring time calculated.
7. Configure the receive block substitute values for the scenario of a shutdown of the sending shutdown group.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Extract from a chart for shutdown group 1 with send block:

|42617|7ail-|7133 Cor|CHLDEA F|1e-0- Ck_INE|
|---|---|---|---|---|
|JdEO|90_8o_|J0_EO|90_BO|JD_Bo_|
|11_112|J0_EO_07|32_80_08|7193 Coz|CHLDEA|
|Q_EAII|4212 bloel|PaJJ_CX|0_Kod|ubSime|
|4nu|Lou|JG RG|P3c >| |

The connection to shutdown group 2 is established by linking output S_DB of block F_S_BO_1 in shutdown group 1 with input S_DB on block F_R_BO_1 in shutdown group 2.

Extract from a chart for shutdown group 2 with receive block:

|Xbaeha|32430|netr|
|---|---|---|
|314 = doxr|3281p|REC_E?|
|Recei|ER EL|RD_BO_|
|RD_BO_|8088Q_01|RD_EQ|
|RD_E?|302ZD|RD_Lo|

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

89

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.7 Data exchange between the F user program and standard user program

The standard program and the F-program use different data formats. Accordingly, special conversion blocks have to be used for data exchange.

F-CPU
F-program
Conversion blocks
Standard program
Converting F-data types to standard data types

If you need the standard user program to process data from the F-program further (for monitoring on the PCS 7 OS, for example), a block for F_FDatatype_Datatype data conversion will have to be interconnected in the user program so that the F-data types can be converted into standard data types. This converter blocks must be called in the standard user program (standard runtime group).

Extract from a process tag chart; converting the ""QBAD"" signal from F_BOOL to BOOL:

Note

The figure is available in its original size as appendix to the manual in the ZIP download of the checklists.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Standard and F-blocks are in different runtime groups. As shown here, some F-blocks have outputs (depicted in gray), which can be directly interconnected with standard PCS 7 blocks. PCS 7 blocks such as MonAnL, MonDiL, EventMESSAGE and their associated faceplates and process symbols are used to visualize fail-safe analog values and status messages as well as system states and operating states. If parameters cannot be directly further interconnected due to the safety data format, the conversion blocks described above can be used.

# Converting standard data types into F-data types

If data from the standard user program is to be processed further in the F-program, it will need to be converted. The blocks for data conversion from standard data types to F-data types (F_datatype_Fdatatype) can only be used in the F-program (F-runtime group).

Extract from an F-chart, conversion from REAL to F_REAL:

|7_R_FR_CONv|R -B|CE 32|CB39|:RELL|Aulci|
|---|---|---|---|---|---|
|DAII ZROC3?|VALUE DiT| | | | |

Note: The conversion blocks only perform data conversion; in other words, you will need to program additional measures in the F-program for plausibility checking purposes (with F_LIM_R, for example), in order to ensure that only non-hazardous values are possible.

# 7.2.8 How F-blocks with floating-point operations respond to number range overflows

Within the context of analog value processing, number range overflows/underflows can occur during arithmetic calculations (with division by 0, root from a negative number or number range overflow). With S7 F Systems Lib V1_3 and higher, the response is as follows in this case: The results ""Overflow (± infinite)"", ""Denormalized floating-point number"" or ""Invalid floating-point number (NaN)"" are:

- Either output at the output and can be processed further by subsequent F blocks
- Or signaled to special outputs. A substitute value is output if necessary.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

91

# Configuring the safety program

# 7.2 Creating the safety program

If the floating-point operation produces an invalid floating-point number (NaN) and no invalid floating-point number (NaN) existed as an address prior to this, the following diagnostics event will be entered in the F CPU's diagnostic buffer:

""Safety program: Invalid REAL number in DB"" (event ID 16#75D9)

You can use this entry in the diagnostic buffer to identify the F block with the invalid floating-point number (NaN).

If you are not able to prevent these events from occurring in your safety program, you will need to decide, on the basis of your application, whether you wish to respond to them in your safety program.

|AD?|nddie|101.o = 101.0_|10o.0|-10q|CUIL|5035|
|---|---|---|---|---|---|---|
|AD?|indoic|0b37 1.0e+3e|:Addle|0etz|3.0e-3e|10o.0|
| |100.0|3.0e-38| |CUIL|AD_|:itis|
|0837i|LIN_R|08371|#Addic|3402-32|c0m| |
| |ce-JE| |CUII|Sms|AD?|0BJ7i|
|Addue|J1o|~10O|02-J8|~100.0|CuTO|100.0=|
|DIV|LIK_R|:tris|100.0_| |100.-|CutQ|
|0.0|502S|SoRT|HXR|:Squo-|{AJi|hal|
|-10o.05|CVIQ|CUIL|5023_W| | | |

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.3 Configuring fail-safe AS-AS communication

You can use the F_LIM_R F block to check the result of a floating-point operation for overflow (± infinite) and invalid floating-point number (NaN).

- A limit violation is indicated by IN &gt; MAX or ""+ infinite"". ",What is an F-shutdown group in the context of the safety program described in the 'Compendium Part B - Process Safety (V9.0)'?,A5,The manual defines it as a cohesive safety program section with user logic and F-runtime groups for synchronized operation or cessation.,1.1875,1.2109375,3.078125,1.5078125,0.396484375
30,pcs7_compendium_part_b_en-US_en-US.txt,37,5dea5c3b1bc7a2a2d3707ace8a7d6e3ed157196366f8ee88ba630fadc3d36b0e,"Changes to the input parameters of F blocks with F data types can be made as follows:

- Offline with the assistance of the CFC editor
- Online using CFC test mode with safety mode deactivated

Note

Values of PAR_ID and COMPLEM must not be changed. If errors in the safety data format are detected during the execution of the safety program, an F-STOP is triggered.

# 7.2.4 Run sequence of F-blocks

# Defining the run sequence

You define the run sequence in the CFC editor in the same way as for a standard user program. Changing the run sequence also changes the collective signature.

# Correct run sequence of F-blocks

The sequence of the F-blocks within the F-shutdown group is relevant. The number of F-runtime groups the F-shutdown group has been split into is of no relevance. Essentially, the correct run sequence of the various F-block types is as follows:

1. Placed automatically:
- F module driver for F-signal modules with inputs or with inputs and outputs
- F-communications blocks and F-system blocks for receiving
- F blocks for data conversion from standard value to F-structure
- F modules with OS connection
2. F channel drivers for inputs
3. F blocks for user logic

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

1. F channel drivers for outputs
2. Placed automatically:
- F block F_PLK
- F block F_PSG_M
- F module driver for F-signal modules with outputs or with inputs and outputs
- F-communications blocks and F-system blocks for sending
- F block F_PLK_O
- F block F_DIAG (S7 F-Systems Lib V1_3 and higher)

The run sequence of the blocks listed under items 1 and 5 is adjusted automatically when the F-program is compiled.
As if S7 F Systems Lib V1_3, separate runtime groups are created for the F blocks listed under points 1 and 5 during the first compilation.
The IPO principle (input, process, output) must always be observed when placing F-channel drivers and F-blocks for user logic.
This ensures that all inputs are read first, the relevant processing steps are performed, and all outputs are then written.
Furthermore, F-runtime groups and F-monitoring blocks that are only visible following compilation are also added automatically.

Note

No changes may be made in the automatically added runtime groups with the exception of the scan cycle monitoring on ""F_CYC_CO"" blocks and the parameter assignment of the ""F_SHUTDN"" block.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.5 F-runtime groups

During the programming of the safety program, F-blocks cannot be inserted directly into tasks (cyclic interrupt OBs). When a new CFC chart is created in PCS 7, the system will automatically generate a runtime group of the same name, into which the F-blocks placed in the corresponding CFC chart can then be inserted. An F-runtime group only becomes an F-runtime group (identified by a yellow folder and ""F"") when F-blocks are called in it.

0B37 [Cyclic interrupt7] (300 ms)
@CPU_RTI@CPU_RT
@F_ShutDn_37 (300 ms)
@F_ShutDn (300 ms)
CycCo-QB37 (300 ms)
CycCo-OB3ZIF_CYC_CO-OB37
@F_CycCo-OB3ZIF_TEST
@F_CycCo-OB37IF_TESTC
@F_TestMode (300 ms)
@F_IN_37_0 (300 ms)
SFC_109_F (300 ms)
AI_F (300 ms)
HS104_F (300 ms)
@F_OUT_37_0 (300 ms)
@F_DbIniti (300 ms)
0B38 [Cycic interrupta] (10 ms)

# Runtime groups of an F-program

The F-program is divided into several runtime groups, as shown in the table below.

Note

xx = Number of the cyclic interrupt OB

y = Consecutive numbering if several shutdown groups exist in a single cyclic interrupt OB

|Chart|F blocks|
|---|---|
|@F_ShutDn_xx|Shutdown logic of cyclic interrupt OB The shutdown logic is created with RTGLOGIC and standard logic blocks.|
|@F_ShutDn|Shutdown block Where an F-program is present in several cyclic interrupt OBs, this runtime group is integrated into the cyclic interrupt OB with the shortest call time. The shutdown logic is created with F_SHUTDN, RTGLOGIC, and standard logic blocks.|
|@F_CycCo-OBxx|F_CYC_CO, F_TEST and F_TESTC (for tests)|
|@F_TestMode|F_TESTM for managing safety mode|
|@F_IN_xx_y|F blocks which supply input values for the F-program (F_QUITES, communication receive blocks, conversion blocks from standard to F-data types, drivers for F-input modules) Runtime groups with user logic, in the sequence in which they were created by the user|

Compendium Part B - Process Safety (V9.0)
Operating Manual, 04/2018, A5E43228905-AA

# 7.2 Creating the safety program

@F_OUT_xx_y Blocks which further process output values of F-blocks (communication send blocks, conversion blocks from F-to standard data types, drivers for F-output modules, F_PLK, F_PLK_O, and F_DIAG for program sequence control)

@F_DbInitxx DB_INIT function block required for the cold restart of an F-runtime group

All required error OBs are added to the block container in the SIMATIC Manager.

There should only be one @F_IN_xx_y runtime group before the first F-user runtime group and one @F_OUT_xx_y runtime group after the last F-user runtime group. If the safety program consists of several shutdown groups (see section 6.2.6 (Page 87)), there is the @F_IN_xx_y and @F_OUT_xx_y runtime group both before and after the F-user runtime group in the shutdown groups.

# Rules for F-runtime groups in the safety program

- We recommend that you proceed as follows in order to make the lengths of the F-cycles as uniform as possible:
If you mix F-and standard runtime groups in a cyclic interrupt OB, you must execute the F-runtime groups before the standard runtime groups.
- The following defaults are set for properties of an F-runtime group:
- Reduction ratio = 1
- Phase offset = 0
- Properties Runtime Group
- Task: 0B37
- Name: HS104
- Comment:
- Reduction ratio:
- Phase offset:
- Optimize run sequence
- Active:
- You are not permitted to move automatically generated F-runtime groups (identified by @).

Note: The feature: Optimize Run Sequence in CFC can lead to a change in the collective signature and impair the response times of the safety program, and therefore should not be used in F-runtime groups.

With PCS 7 V7.0 SP1 and higher, it is no longer possible to optimize the run sequence for cyclic interrupt OBs with F-runtime groups.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.6 F-shutdown groups

An F-shutdown group is a self-contained unit in your safety program. It contains user logic which is executed or shut down simultaneously. The F-shutdown group contains one or a number of F-runtime groups which are assigned to a common cyclic interrupt OB. You can choose whether an error during execution of the safety program causes a full shutdown or a partial shutdown of the safety program. With a partial shutdown, only the F-shutdown group in which the error occurred is shut down.

# Rules for F-shutdown groups in the safety program

You are not permitted to directly interconnect F-blocks in different F-shutdown groups. Data can only be exchanged between F-shutdown groups using special communication blocks (F_S_xx, F_R_xx for F_BOOL and F_REAL data structures). Therefore, all F-channel drivers in an F-signal module must be in the same F-shutdown group, together with the module driver of the F-signal module.

# Defining F-shutdown groups

As soon as you place F-blocks in the CFC editor for the first time, all of the F-runtime groups in a single cyclic interrupt OB will form an F-shutdown group. You can configure each F-runtime group as the last F-runtime group in an F-shutdown group by placing the F_PSG_M ""selection block"". The F-system then creates a new F-shutdown group for all subsequent F-runtime groups until another F_PSG_M block is found.

# Distribution/Combination by means of manual placing of F_PSG_M

If you add or delete one or a number of F_PSG_M blocks in your project, the order of your F-shutdown groups will change. If you make a change to the layout of your F-shutdown groups, you must make sure that the F-module drivers and all assigned F-channel drivers are integrated in the same F-shutdown group. You can split one F-shutdown group into two F-shutdown groups. To do this, in the CFC editor's runtime editor, place the F_PSG_M block in the last F-runtime group which is to be assigned to the first F-shutdown group. All subsequent F-runtime groups will then be assigned to the second F-shutdown group. The number of F-shutdown groups is limited to 110 in all cyclic interrupt OBs. The system restricts the number of F-runtime groups in an F-shutdown group. You have the option of combining two F-shutdown groups. To do this, in the runtime editor of the CFC editor, delete the F_PSG_M block between the F-shutdown groups. If you combine a number of F-shutdown groups which exchange data via F-communication blocks in a single F-shutdown group, you need to remove these F-communications blocks and replace them with direct interconnections.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# Programming data exchange between F-shutdown groups

If you wish to exchange data between two F-shutdown groups, you are not permitted to interconnect the inputs and outputs directly. You need to use the following F-system blocks for data exchange between F blocks in different F-shutdown groups:

|F block|Description|
|---|---|
|F_S_R/F_R_R|Safe transfer of 5 data of the F_REAL type|
|F_S_BO/F_R_BO|Safe transfer of 5 data of the F_BOOL type|

# Procedure for data exchange

1. In the F-shutdown group from which data is to be transferred, add an F_S_R or F_S_BO type F-block.
2. In the F-shutdown group to which data is to be transferred, add an F_R_R or F_R_BO type F-block.
3. Interconnect the SD_R_xx inputs of the F_S_R or the SD_BO_xx inputs of the F_S_BO with the data to be transferred.
4. Interconnect the RD_R_xx outputs of the F_R_R or the RD_BO_xx outputs of the F_R_BO with the inputs of the F-block for further processing of the data received.
5. Interconnect the S_DB output of the send block with the S_DB input of the associated receive block.
6. Configure the TIMEOUT inputs of the F_R_R and F_R_BO receive blocks with the F-monitoring time calculated.
7. Configure the receive block substitute values for the scenario of a shutdown of the sending shutdown group.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Extract from a chart for shutdown group 1 with send block:

|42617|7ail-|7133 Cor|CHLDEA F|1e-0- Ck_INE|
|---|---|---|---|---|
|JdEO|90_8o_|J0_EO|90_BO|JD_Bo_|
|11_112|J0_EO_07|32_80_08|7193 Coz|CHLDEA|
|Q_EAII|4212 bloel|PaJJ_CX|0_Kod|ubSime|
|4nu|Lou|JG RG|P3c >| |

The connection to shutdown group 2 is established by linking output S_DB of block F_S_BO_1 in shutdown group 1 with input S_DB on block F_R_BO_1 in shutdown group 2.

Extract from a chart for shutdown group 2 with receive block:

|Xbaeha|32430|netr|
|---|---|---|
|314 = doxr|3281p|REC_E?|
|Recei|ER EL|RD_BO_|
|RD_BO_|8088Q_01|RD_EQ|
|RD_E?|302ZD|RD_Lo|

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

89

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.7 Data exchange between the F user program and standard user program

The standard program and the F-program use different data formats. Accordingly, special conversion blocks have to be used for data exchange.

F-CPU
F-program
Conversion blocks
Standard program
Converting F-data types to standard data types

If you need the standard user program to process data from the F-program further (for monitoring on the PCS 7 OS, for example), a block for F_FDatatype_Datatype data conversion will have to be interconnected in the user program so that the F-data types can be converted into standard data types. This converter blocks must be called in the standard user program (standard runtime group).

Extract from a process tag chart; converting the ""QBAD"" signal from F_BOOL to BOOL:

Note

The figure is available in its original size as appendix to the manual in the ZIP download of the checklists.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Standard and F-blocks are in different runtime groups. As shown here, some F-blocks have outputs (depicted in gray), which can be directly interconnected with standard PCS 7 blocks. PCS 7 blocks such as MonAnL, MonDiL, EventMESSAGE and their associated faceplates and process symbols are used to visualize fail-safe analog values and status messages as well as system states and operating states. If parameters cannot be directly further interconnected due to the safety data format, the conversion blocks described above can be used.

# Converting standard data types into F-data types

If data from the standard user program is to be processed further in the F-program, it will need to be converted. The blocks for data conversion from standard data types to F-data types (F_datatype_Fdatatype) can only be used in the F-program (F-runtime group).

Extract from an F-chart, conversion from REAL to F_REAL:

|7_R_FR_CONv|R -B|CE 32|CB39|:RELL|Aulci|
|---|---|---|---|---|---|
|DAII ZROC3?|VALUE DiT| | | | |

Note: The conversion blocks only perform data conversion; in other words, you will need to program additional measures in the F-program for plausibility checking purposes (with F_LIM_R, for example), in order to ensure that only non-hazardous values are possible.

# 7.2.8 How F-blocks with floating-point operations respond to number range overflows

Within the context of analog value processing, number range overflows/underflows can occur during arithmetic calculations (with division by 0, root from a negative number or number range overflow). With S7 F Systems Lib V1_3 and higher, the response is as follows in this case: The results ""Overflow (± infinite)"", ""Denormalized floating-point number"" or ""Invalid floating-point number (NaN)"" are:

- Either output at the output and can be processed further by subsequent F blocks
- Or signaled to special outputs. A substitute value is output if necessary.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

91

# Configuring the safety program

# 7.2 Creating the safety program

If the floating-point operation produces an invalid floating-point number (NaN) and no invalid floating-point number (NaN) existed as an address prior to this, the following diagnostics event will be entered in the F CPU's diagnostic buffer:

""Safety program: Invalid REAL number in DB"" (event ID 16#75D9)

You can use this entry in the diagnostic buffer to identify the F block with the invalid floating-point number (NaN).

If you are not able to prevent these events from occurring in your safety program, you will need to decide, on the basis of your application, whether you wish to respond to them in your safety program.

|AD?|nddie|101.o = 101.0_|10o.0|-10q|CUIL|5035|
|---|---|---|---|---|---|---|
|AD?|indoic|0b37 1.0e+3e|:Addle|0etz|3.0e-3e|10o.0|
| |100.0|3.0e-38| |CUIL|AD_|:itis|
|0837i|LIN_R|08371|#Addic|3402-32|c0m| |
| |ce-JE| |CUII|Sms|AD?|0BJ7i|
|Addue|J1o|~10O|02-J8|~100.0|CuTO|100.0=|
|DIV|LIK_R|:tris|100.0_| |100.-|CutQ|
|0.0|502S|SoRT|HXR|:Squo-|{AJi|hal|
|-10o.05|CVIQ|CUIL|5023_W| | | |

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.3 Configuring fail-safe AS-AS communication

You can use the F_LIM_R F block to check the result of a floating-point operation for overflow (± infinite) and invalid floating-point number (NaN).

- A limit violation is indicated by IN &gt; MAX or ""+ infinite"". ",What is the correct run sequence of various F-block types as outlined in the 'Compendium Part B - Process Safety (V9.0)'?,A1,"1. Placed automatically: F module driver for F-signal modules with inputs or with inputs and outputs, F-communications blocks and F-system blocks for receiving, F blocks for data conversion from standard value to F-structure, F modules with OS connection. 2. F channel drivers for inputs. 3. F blocks for user logic.",1.4453125,1.359375,2.75,1.578125,0.43359375
31,pcs7_compendium_part_b_en-US_en-US.txt,37,5dea5c3b1bc7a2a2d3707ace8a7d6e3ed157196366f8ee88ba630fadc3d36b0e,"Changes to the input parameters of F blocks with F data types can be made as follows:

- Offline with the assistance of the CFC editor
- Online using CFC test mode with safety mode deactivated

Note

Values of PAR_ID and COMPLEM must not be changed. If errors in the safety data format are detected during the execution of the safety program, an F-STOP is triggered.

# 7.2.4 Run sequence of F-blocks

# Defining the run sequence

You define the run sequence in the CFC editor in the same way as for a standard user program. Changing the run sequence also changes the collective signature.

# Correct run sequence of F-blocks

The sequence of the F-blocks within the F-shutdown group is relevant. The number of F-runtime groups the F-shutdown group has been split into is of no relevance. Essentially, the correct run sequence of the various F-block types is as follows:

1. Placed automatically:
- F module driver for F-signal modules with inputs or with inputs and outputs
- F-communications blocks and F-system blocks for receiving
- F blocks for data conversion from standard value to F-structure
- F modules with OS connection
2. F channel drivers for inputs
3. F blocks for user logic

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

1. F channel drivers for outputs
2. Placed automatically:
- F block F_PLK
- F block F_PSG_M
- F module driver for F-signal modules with outputs or with inputs and outputs
- F-communications blocks and F-system blocks for sending
- F block F_PLK_O
- F block F_DIAG (S7 F-Systems Lib V1_3 and higher)

The run sequence of the blocks listed under items 1 and 5 is adjusted automatically when the F-program is compiled.
As if S7 F Systems Lib V1_3, separate runtime groups are created for the F blocks listed under points 1 and 5 during the first compilation.
The IPO principle (input, process, output) must always be observed when placing F-channel drivers and F-blocks for user logic.
This ensures that all inputs are read first, the relevant processing steps are performed, and all outputs are then written.
Furthermore, F-runtime groups and F-monitoring blocks that are only visible following compilation are also added automatically.

Note

No changes may be made in the automatically added runtime groups with the exception of the scan cycle monitoring on ""F_CYC_CO"" blocks and the parameter assignment of the ""F_SHUTDN"" block.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.5 F-runtime groups

During the programming of the safety program, F-blocks cannot be inserted directly into tasks (cyclic interrupt OBs). When a new CFC chart is created in PCS 7, the system will automatically generate a runtime group of the same name, into which the F-blocks placed in the corresponding CFC chart can then be inserted. An F-runtime group only becomes an F-runtime group (identified by a yellow folder and ""F"") when F-blocks are called in it.

0B37 [Cyclic interrupt7] (300 ms)
@CPU_RTI@CPU_RT
@F_ShutDn_37 (300 ms)
@F_ShutDn (300 ms)
CycCo-QB37 (300 ms)
CycCo-OB3ZIF_CYC_CO-OB37
@F_CycCo-OB3ZIF_TEST
@F_CycCo-OB37IF_TESTC
@F_TestMode (300 ms)
@F_IN_37_0 (300 ms)
SFC_109_F (300 ms)
AI_F (300 ms)
HS104_F (300 ms)
@F_OUT_37_0 (300 ms)
@F_DbIniti (300 ms)
0B38 [Cycic interrupta] (10 ms)

# Runtime groups of an F-program

The F-program is divided into several runtime groups, as shown in the table below.

Note

xx = Number of the cyclic interrupt OB

y = Consecutive numbering if several shutdown groups exist in a single cyclic interrupt OB

|Chart|F blocks|
|---|---|
|@F_ShutDn_xx|Shutdown logic of cyclic interrupt OB The shutdown logic is created with RTGLOGIC and standard logic blocks.|
|@F_ShutDn|Shutdown block Where an F-program is present in several cyclic interrupt OBs, this runtime group is integrated into the cyclic interrupt OB with the shortest call time. The shutdown logic is created with F_SHUTDN, RTGLOGIC, and standard logic blocks.|
|@F_CycCo-OBxx|F_CYC_CO, F_TEST and F_TESTC (for tests)|
|@F_TestMode|F_TESTM for managing safety mode|
|@F_IN_xx_y|F blocks which supply input values for the F-program (F_QUITES, communication receive blocks, conversion blocks from standard to F-data types, drivers for F-input modules) Runtime groups with user logic, in the sequence in which they were created by the user|

Compendium Part B - Process Safety (V9.0)
Operating Manual, 04/2018, A5E43228905-AA

# 7.2 Creating the safety program

@F_OUT_xx_y Blocks which further process output values of F-blocks (communication send blocks, conversion blocks from F-to standard data types, drivers for F-output modules, F_PLK, F_PLK_O, and F_DIAG for program sequence control)

@F_DbInitxx DB_INIT function block required for the cold restart of an F-runtime group

All required error OBs are added to the block container in the SIMATIC Manager.

There should only be one @F_IN_xx_y runtime group before the first F-user runtime group and one @F_OUT_xx_y runtime group after the last F-user runtime group. If the safety program consists of several shutdown groups (see section 6.2.6 (Page 87)), there is the @F_IN_xx_y and @F_OUT_xx_y runtime group both before and after the F-user runtime group in the shutdown groups.

# Rules for F-runtime groups in the safety program

- We recommend that you proceed as follows in order to make the lengths of the F-cycles as uniform as possible:
If you mix F-and standard runtime groups in a cyclic interrupt OB, you must execute the F-runtime groups before the standard runtime groups.
- The following defaults are set for properties of an F-runtime group:
- Reduction ratio = 1
- Phase offset = 0
- Properties Runtime Group
- Task: 0B37
- Name: HS104
- Comment:
- Reduction ratio:
- Phase offset:
- Optimize run sequence
- Active:
- You are not permitted to move automatically generated F-runtime groups (identified by @).

Note: The feature: Optimize Run Sequence in CFC can lead to a change in the collective signature and impair the response times of the safety program, and therefore should not be used in F-runtime groups.

With PCS 7 V7.0 SP1 and higher, it is no longer possible to optimize the run sequence for cyclic interrupt OBs with F-runtime groups.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.6 F-shutdown groups

An F-shutdown group is a self-contained unit in your safety program. It contains user logic which is executed or shut down simultaneously. The F-shutdown group contains one or a number of F-runtime groups which are assigned to a common cyclic interrupt OB. You can choose whether an error during execution of the safety program causes a full shutdown or a partial shutdown of the safety program. With a partial shutdown, only the F-shutdown group in which the error occurred is shut down.

# Rules for F-shutdown groups in the safety program

You are not permitted to directly interconnect F-blocks in different F-shutdown groups. Data can only be exchanged between F-shutdown groups using special communication blocks (F_S_xx, F_R_xx for F_BOOL and F_REAL data structures). Therefore, all F-channel drivers in an F-signal module must be in the same F-shutdown group, together with the module driver of the F-signal module.

# Defining F-shutdown groups

As soon as you place F-blocks in the CFC editor for the first time, all of the F-runtime groups in a single cyclic interrupt OB will form an F-shutdown group. You can configure each F-runtime group as the last F-runtime group in an F-shutdown group by placing the F_PSG_M ""selection block"". The F-system then creates a new F-shutdown group for all subsequent F-runtime groups until another F_PSG_M block is found.

# Distribution/Combination by means of manual placing of F_PSG_M

If you add or delete one or a number of F_PSG_M blocks in your project, the order of your F-shutdown groups will change. If you make a change to the layout of your F-shutdown groups, you must make sure that the F-module drivers and all assigned F-channel drivers are integrated in the same F-shutdown group. You can split one F-shutdown group into two F-shutdown groups. To do this, in the CFC editor's runtime editor, place the F_PSG_M block in the last F-runtime group which is to be assigned to the first F-shutdown group. All subsequent F-runtime groups will then be assigned to the second F-shutdown group. The number of F-shutdown groups is limited to 110 in all cyclic interrupt OBs. The system restricts the number of F-runtime groups in an F-shutdown group. You have the option of combining two F-shutdown groups. To do this, in the runtime editor of the CFC editor, delete the F_PSG_M block between the F-shutdown groups. If you combine a number of F-shutdown groups which exchange data via F-communication blocks in a single F-shutdown group, you need to remove these F-communications blocks and replace them with direct interconnections.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# Programming data exchange between F-shutdown groups

If you wish to exchange data between two F-shutdown groups, you are not permitted to interconnect the inputs and outputs directly. You need to use the following F-system blocks for data exchange between F blocks in different F-shutdown groups:

|F block|Description|
|---|---|
|F_S_R/F_R_R|Safe transfer of 5 data of the F_REAL type|
|F_S_BO/F_R_BO|Safe transfer of 5 data of the F_BOOL type|

# Procedure for data exchange

1. In the F-shutdown group from which data is to be transferred, add an F_S_R or F_S_BO type F-block.
2. In the F-shutdown group to which data is to be transferred, add an F_R_R or F_R_BO type F-block.
3. Interconnect the SD_R_xx inputs of the F_S_R or the SD_BO_xx inputs of the F_S_BO with the data to be transferred.
4. Interconnect the RD_R_xx outputs of the F_R_R or the RD_BO_xx outputs of the F_R_BO with the inputs of the F-block for further processing of the data received.
5. Interconnect the S_DB output of the send block with the S_DB input of the associated receive block.
6. Configure the TIMEOUT inputs of the F_R_R and F_R_BO receive blocks with the F-monitoring time calculated.
7. Configure the receive block substitute values for the scenario of a shutdown of the sending shutdown group.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Extract from a chart for shutdown group 1 with send block:

|42617|7ail-|7133 Cor|CHLDEA F|1e-0- Ck_INE|
|---|---|---|---|---|
|JdEO|90_8o_|J0_EO|90_BO|JD_Bo_|
|11_112|J0_EO_07|32_80_08|7193 Coz|CHLDEA|
|Q_EAII|4212 bloel|PaJJ_CX|0_Kod|ubSime|
|4nu|Lou|JG RG|P3c >| |

The connection to shutdown group 2 is established by linking output S_DB of block F_S_BO_1 in shutdown group 1 with input S_DB on block F_R_BO_1 in shutdown group 2.

Extract from a chart for shutdown group 2 with receive block:

|Xbaeha|32430|netr|
|---|---|---|
|314 = doxr|3281p|REC_E?|
|Recei|ER EL|RD_BO_|
|RD_BO_|8088Q_01|RD_EQ|
|RD_E?|302ZD|RD_Lo|

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

89

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.7 Data exchange between the F user program and standard user program

The standard program and the F-program use different data formats. Accordingly, special conversion blocks have to be used for data exchange.

F-CPU
F-program
Conversion blocks
Standard program
Converting F-data types to standard data types

If you need the standard user program to process data from the F-program further (for monitoring on the PCS 7 OS, for example), a block for F_FDatatype_Datatype data conversion will have to be interconnected in the user program so that the F-data types can be converted into standard data types. This converter blocks must be called in the standard user program (standard runtime group).

Extract from a process tag chart; converting the ""QBAD"" signal from F_BOOL to BOOL:

Note

The figure is available in its original size as appendix to the manual in the ZIP download of the checklists.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Standard and F-blocks are in different runtime groups. As shown here, some F-blocks have outputs (depicted in gray), which can be directly interconnected with standard PCS 7 blocks. PCS 7 blocks such as MonAnL, MonDiL, EventMESSAGE and their associated faceplates and process symbols are used to visualize fail-safe analog values and status messages as well as system states and operating states. If parameters cannot be directly further interconnected due to the safety data format, the conversion blocks described above can be used.

# Converting standard data types into F-data types

If data from the standard user program is to be processed further in the F-program, it will need to be converted. The blocks for data conversion from standard data types to F-data types (F_datatype_Fdatatype) can only be used in the F-program (F-runtime group).

Extract from an F-chart, conversion from REAL to F_REAL:

|7_R_FR_CONv|R -B|CE 32|CB39|:RELL|Aulci|
|---|---|---|---|---|---|
|DAII ZROC3?|VALUE DiT| | | | |

Note: The conversion blocks only perform data conversion; in other words, you will need to program additional measures in the F-program for plausibility checking purposes (with F_LIM_R, for example), in order to ensure that only non-hazardous values are possible.

# 7.2.8 How F-blocks with floating-point operations respond to number range overflows

Within the context of analog value processing, number range overflows/underflows can occur during arithmetic calculations (with division by 0, root from a negative number or number range overflow). With S7 F Systems Lib V1_3 and higher, the response is as follows in this case: The results ""Overflow (± infinite)"", ""Denormalized floating-point number"" or ""Invalid floating-point number (NaN)"" are:

- Either output at the output and can be processed further by subsequent F blocks
- Or signaled to special outputs. A substitute value is output if necessary.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

91

# Configuring the safety program

# 7.2 Creating the safety program

If the floating-point operation produces an invalid floating-point number (NaN) and no invalid floating-point number (NaN) existed as an address prior to this, the following diagnostics event will be entered in the F CPU's diagnostic buffer:

""Safety program: Invalid REAL number in DB"" (event ID 16#75D9)

You can use this entry in the diagnostic buffer to identify the F block with the invalid floating-point number (NaN).

If you are not able to prevent these events from occurring in your safety program, you will need to decide, on the basis of your application, whether you wish to respond to them in your safety program.

|AD?|nddie|101.o = 101.0_|10o.0|-10q|CUIL|5035|
|---|---|---|---|---|---|---|
|AD?|indoic|0b37 1.0e+3e|:Addle|0etz|3.0e-3e|10o.0|
| |100.0|3.0e-38| |CUIL|AD_|:itis|
|0837i|LIN_R|08371|#Addic|3402-32|c0m| |
| |ce-JE| |CUII|Sms|AD?|0BJ7i|
|Addue|J1o|~10O|02-J8|~100.0|CuTO|100.0=|
|DIV|LIK_R|:tris|100.0_| |100.-|CutQ|
|0.0|502S|SoRT|HXR|:Squo-|{AJi|hal|
|-10o.05|CVIQ|CUIL|5023_W| | | |

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.3 Configuring fail-safe AS-AS communication

You can use the F_LIM_R F block to check the result of a floating-point operation for overflow (± infinite) and invalid floating-point number (NaN).

- A limit violation is indicated by IN &gt; MAX or ""+ infinite"". ",What is the correct run sequence of various F-block types as outlined in the 'Compendium Part B - Process Safety (V9.0)'?,A2,"First, automatically placed blocks including F module drivers and communication blocks. Then, F channel drivers for inputs, followed by user logic F blocks.",1.359375,1.4375,3.09375,1.4296875,0.3125
32,pcs7_compendium_part_b_en-US_en-US.txt,37,5dea5c3b1bc7a2a2d3707ace8a7d6e3ed157196366f8ee88ba630fadc3d36b0e,"Changes to the input parameters of F blocks with F data types can be made as follows:

- Offline with the assistance of the CFC editor
- Online using CFC test mode with safety mode deactivated

Note

Values of PAR_ID and COMPLEM must not be changed. If errors in the safety data format are detected during the execution of the safety program, an F-STOP is triggered.

# 7.2.4 Run sequence of F-blocks

# Defining the run sequence

You define the run sequence in the CFC editor in the same way as for a standard user program. Changing the run sequence also changes the collective signature.

# Correct run sequence of F-blocks

The sequence of the F-blocks within the F-shutdown group is relevant. The number of F-runtime groups the F-shutdown group has been split into is of no relevance. Essentially, the correct run sequence of the various F-block types is as follows:

1. Placed automatically:
- F module driver for F-signal modules with inputs or with inputs and outputs
- F-communications blocks and F-system blocks for receiving
- F blocks for data conversion from standard value to F-structure
- F modules with OS connection
2. F channel drivers for inputs
3. F blocks for user logic

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

1. F channel drivers for outputs
2. Placed automatically:
- F block F_PLK
- F block F_PSG_M
- F module driver for F-signal modules with outputs or with inputs and outputs
- F-communications blocks and F-system blocks for sending
- F block F_PLK_O
- F block F_DIAG (S7 F-Systems Lib V1_3 and higher)

The run sequence of the blocks listed under items 1 and 5 is adjusted automatically when the F-program is compiled.
As if S7 F Systems Lib V1_3, separate runtime groups are created for the F blocks listed under points 1 and 5 during the first compilation.
The IPO principle (input, process, output) must always be observed when placing F-channel drivers and F-blocks for user logic.
This ensures that all inputs are read first, the relevant processing steps are performed, and all outputs are then written.
Furthermore, F-runtime groups and F-monitoring blocks that are only visible following compilation are also added automatically.

Note

No changes may be made in the automatically added runtime groups with the exception of the scan cycle monitoring on ""F_CYC_CO"" blocks and the parameter assignment of the ""F_SHUTDN"" block.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.5 F-runtime groups

During the programming of the safety program, F-blocks cannot be inserted directly into tasks (cyclic interrupt OBs). When a new CFC chart is created in PCS 7, the system will automatically generate a runtime group of the same name, into which the F-blocks placed in the corresponding CFC chart can then be inserted. An F-runtime group only becomes an F-runtime group (identified by a yellow folder and ""F"") when F-blocks are called in it.

0B37 [Cyclic interrupt7] (300 ms)
@CPU_RTI@CPU_RT
@F_ShutDn_37 (300 ms)
@F_ShutDn (300 ms)
CycCo-QB37 (300 ms)
CycCo-OB3ZIF_CYC_CO-OB37
@F_CycCo-OB3ZIF_TEST
@F_CycCo-OB37IF_TESTC
@F_TestMode (300 ms)
@F_IN_37_0 (300 ms)
SFC_109_F (300 ms)
AI_F (300 ms)
HS104_F (300 ms)
@F_OUT_37_0 (300 ms)
@F_DbIniti (300 ms)
0B38 [Cycic interrupta] (10 ms)

# Runtime groups of an F-program

The F-program is divided into several runtime groups, as shown in the table below.

Note

xx = Number of the cyclic interrupt OB

y = Consecutive numbering if several shutdown groups exist in a single cyclic interrupt OB

|Chart|F blocks|
|---|---|
|@F_ShutDn_xx|Shutdown logic of cyclic interrupt OB The shutdown logic is created with RTGLOGIC and standard logic blocks.|
|@F_ShutDn|Shutdown block Where an F-program is present in several cyclic interrupt OBs, this runtime group is integrated into the cyclic interrupt OB with the shortest call time. The shutdown logic is created with F_SHUTDN, RTGLOGIC, and standard logic blocks.|
|@F_CycCo-OBxx|F_CYC_CO, F_TEST and F_TESTC (for tests)|
|@F_TestMode|F_TESTM for managing safety mode|
|@F_IN_xx_y|F blocks which supply input values for the F-program (F_QUITES, communication receive blocks, conversion blocks from standard to F-data types, drivers for F-input modules) Runtime groups with user logic, in the sequence in which they were created by the user|

Compendium Part B - Process Safety (V9.0)
Operating Manual, 04/2018, A5E43228905-AA

# 7.2 Creating the safety program

@F_OUT_xx_y Blocks which further process output values of F-blocks (communication send blocks, conversion blocks from F-to standard data types, drivers for F-output modules, F_PLK, F_PLK_O, and F_DIAG for program sequence control)

@F_DbInitxx DB_INIT function block required for the cold restart of an F-runtime group

All required error OBs are added to the block container in the SIMATIC Manager.

There should only be one @F_IN_xx_y runtime group before the first F-user runtime group and one @F_OUT_xx_y runtime group after the last F-user runtime group. If the safety program consists of several shutdown groups (see section 6.2.6 (Page 87)), there is the @F_IN_xx_y and @F_OUT_xx_y runtime group both before and after the F-user runtime group in the shutdown groups.

# Rules for F-runtime groups in the safety program

- We recommend that you proceed as follows in order to make the lengths of the F-cycles as uniform as possible:
If you mix F-and standard runtime groups in a cyclic interrupt OB, you must execute the F-runtime groups before the standard runtime groups.
- The following defaults are set for properties of an F-runtime group:
- Reduction ratio = 1
- Phase offset = 0
- Properties Runtime Group
- Task: 0B37
- Name: HS104
- Comment:
- Reduction ratio:
- Phase offset:
- Optimize run sequence
- Active:
- You are not permitted to move automatically generated F-runtime groups (identified by @).

Note: The feature: Optimize Run Sequence in CFC can lead to a change in the collective signature and impair the response times of the safety program, and therefore should not be used in F-runtime groups.

With PCS 7 V7.0 SP1 and higher, it is no longer possible to optimize the run sequence for cyclic interrupt OBs with F-runtime groups.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.6 F-shutdown groups

An F-shutdown group is a self-contained unit in your safety program. It contains user logic which is executed or shut down simultaneously. The F-shutdown group contains one or a number of F-runtime groups which are assigned to a common cyclic interrupt OB. You can choose whether an error during execution of the safety program causes a full shutdown or a partial shutdown of the safety program. With a partial shutdown, only the F-shutdown group in which the error occurred is shut down.

# Rules for F-shutdown groups in the safety program

You are not permitted to directly interconnect F-blocks in different F-shutdown groups. Data can only be exchanged between F-shutdown groups using special communication blocks (F_S_xx, F_R_xx for F_BOOL and F_REAL data structures). Therefore, all F-channel drivers in an F-signal module must be in the same F-shutdown group, together with the module driver of the F-signal module.

# Defining F-shutdown groups

As soon as you place F-blocks in the CFC editor for the first time, all of the F-runtime groups in a single cyclic interrupt OB will form an F-shutdown group. You can configure each F-runtime group as the last F-runtime group in an F-shutdown group by placing the F_PSG_M ""selection block"". The F-system then creates a new F-shutdown group for all subsequent F-runtime groups until another F_PSG_M block is found.

# Distribution/Combination by means of manual placing of F_PSG_M

If you add or delete one or a number of F_PSG_M blocks in your project, the order of your F-shutdown groups will change. If you make a change to the layout of your F-shutdown groups, you must make sure that the F-module drivers and all assigned F-channel drivers are integrated in the same F-shutdown group. You can split one F-shutdown group into two F-shutdown groups. To do this, in the CFC editor's runtime editor, place the F_PSG_M block in the last F-runtime group which is to be assigned to the first F-shutdown group. All subsequent F-runtime groups will then be assigned to the second F-shutdown group. The number of F-shutdown groups is limited to 110 in all cyclic interrupt OBs. The system restricts the number of F-runtime groups in an F-shutdown group. You have the option of combining two F-shutdown groups. To do this, in the runtime editor of the CFC editor, delete the F_PSG_M block between the F-shutdown groups. If you combine a number of F-shutdown groups which exchange data via F-communication blocks in a single F-shutdown group, you need to remove these F-communications blocks and replace them with direct interconnections.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# Programming data exchange between F-shutdown groups

If you wish to exchange data between two F-shutdown groups, you are not permitted to interconnect the inputs and outputs directly. You need to use the following F-system blocks for data exchange between F blocks in different F-shutdown groups:

|F block|Description|
|---|---|
|F_S_R/F_R_R|Safe transfer of 5 data of the F_REAL type|
|F_S_BO/F_R_BO|Safe transfer of 5 data of the F_BOOL type|

# Procedure for data exchange

1. In the F-shutdown group from which data is to be transferred, add an F_S_R or F_S_BO type F-block.
2. In the F-shutdown group to which data is to be transferred, add an F_R_R or F_R_BO type F-block.
3. Interconnect the SD_R_xx inputs of the F_S_R or the SD_BO_xx inputs of the F_S_BO with the data to be transferred.
4. Interconnect the RD_R_xx outputs of the F_R_R or the RD_BO_xx outputs of the F_R_BO with the inputs of the F-block for further processing of the data received.
5. Interconnect the S_DB output of the send block with the S_DB input of the associated receive block.
6. Configure the TIMEOUT inputs of the F_R_R and F_R_BO receive blocks with the F-monitoring time calculated.
7. Configure the receive block substitute values for the scenario of a shutdown of the sending shutdown group.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Extract from a chart for shutdown group 1 with send block:

|42617|7ail-|7133 Cor|CHLDEA F|1e-0- Ck_INE|
|---|---|---|---|---|
|JdEO|90_8o_|J0_EO|90_BO|JD_Bo_|
|11_112|J0_EO_07|32_80_08|7193 Coz|CHLDEA|
|Q_EAII|4212 bloel|PaJJ_CX|0_Kod|ubSime|
|4nu|Lou|JG RG|P3c >| |

The connection to shutdown group 2 is established by linking output S_DB of block F_S_BO_1 in shutdown group 1 with input S_DB on block F_R_BO_1 in shutdown group 2.

Extract from a chart for shutdown group 2 with receive block:

|Xbaeha|32430|netr|
|---|---|---|
|314 = doxr|3281p|REC_E?|
|Recei|ER EL|RD_BO_|
|RD_BO_|8088Q_01|RD_EQ|
|RD_E?|302ZD|RD_Lo|

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

89

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.7 Data exchange between the F user program and standard user program

The standard program and the F-program use different data formats. Accordingly, special conversion blocks have to be used for data exchange.

F-CPU
F-program
Conversion blocks
Standard program
Converting F-data types to standard data types

If you need the standard user program to process data from the F-program further (for monitoring on the PCS 7 OS, for example), a block for F_FDatatype_Datatype data conversion will have to be interconnected in the user program so that the F-data types can be converted into standard data types. This converter blocks must be called in the standard user program (standard runtime group).

Extract from a process tag chart; converting the ""QBAD"" signal from F_BOOL to BOOL:

Note

The figure is available in its original size as appendix to the manual in the ZIP download of the checklists.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Standard and F-blocks are in different runtime groups. As shown here, some F-blocks have outputs (depicted in gray), which can be directly interconnected with standard PCS 7 blocks. PCS 7 blocks such as MonAnL, MonDiL, EventMESSAGE and their associated faceplates and process symbols are used to visualize fail-safe analog values and status messages as well as system states and operating states. If parameters cannot be directly further interconnected due to the safety data format, the conversion blocks described above can be used.

# Converting standard data types into F-data types

If data from the standard user program is to be processed further in the F-program, it will need to be converted. The blocks for data conversion from standard data types to F-data types (F_datatype_Fdatatype) can only be used in the F-program (F-runtime group).

Extract from an F-chart, conversion from REAL to F_REAL:

|7_R_FR_CONv|R -B|CE 32|CB39|:RELL|Aulci|
|---|---|---|---|---|---|
|DAII ZROC3?|VALUE DiT| | | | |

Note: The conversion blocks only perform data conversion; in other words, you will need to program additional measures in the F-program for plausibility checking purposes (with F_LIM_R, for example), in order to ensure that only non-hazardous values are possible.

# 7.2.8 How F-blocks with floating-point operations respond to number range overflows

Within the context of analog value processing, number range overflows/underflows can occur during arithmetic calculations (with division by 0, root from a negative number or number range overflow). With S7 F Systems Lib V1_3 and higher, the response is as follows in this case: The results ""Overflow (± infinite)"", ""Denormalized floating-point number"" or ""Invalid floating-point number (NaN)"" are:

- Either output at the output and can be processed further by subsequent F blocks
- Or signaled to special outputs. A substitute value is output if necessary.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

91

# Configuring the safety program

# 7.2 Creating the safety program

If the floating-point operation produces an invalid floating-point number (NaN) and no invalid floating-point number (NaN) existed as an address prior to this, the following diagnostics event will be entered in the F CPU's diagnostic buffer:

""Safety program: Invalid REAL number in DB"" (event ID 16#75D9)

You can use this entry in the diagnostic buffer to identify the F block with the invalid floating-point number (NaN).

If you are not able to prevent these events from occurring in your safety program, you will need to decide, on the basis of your application, whether you wish to respond to them in your safety program.

|AD?|nddie|101.o = 101.0_|10o.0|-10q|CUIL|5035|
|---|---|---|---|---|---|---|
|AD?|indoic|0b37 1.0e+3e|:Addle|0etz|3.0e-3e|10o.0|
| |100.0|3.0e-38| |CUIL|AD_|:itis|
|0837i|LIN_R|08371|#Addic|3402-32|c0m| |
| |ce-JE| |CUII|Sms|AD?|0BJ7i|
|Addue|J1o|~10O|02-J8|~100.0|CuTO|100.0=|
|DIV|LIK_R|:tris|100.0_| |100.-|CutQ|
|0.0|502S|SoRT|HXR|:Squo-|{AJi|hal|
|-10o.05|CVIQ|CUIL|5023_W| | | |

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.3 Configuring fail-safe AS-AS communication

You can use the F_LIM_R F block to check the result of a floating-point operation for overflow (± infinite) and invalid floating-point number (NaN).

- A limit violation is indicated by IN &gt; MAX or ""+ infinite"". ",What is the correct run sequence of various F-block types as outlined in the 'Compendium Part B - Process Safety (V9.0)'?,A3,"The sequence starts with automatically positioned blocks, then F channel drivers for inputs, and ends with F blocks for user logic.",1.1171875,1.2109375,3.140625,1.3125,0.423828125
33,pcs7_compendium_part_b_en-US_en-US.txt,37,5dea5c3b1bc7a2a2d3707ace8a7d6e3ed157196366f8ee88ba630fadc3d36b0e,"Changes to the input parameters of F blocks with F data types can be made as follows:

- Offline with the assistance of the CFC editor
- Online using CFC test mode with safety mode deactivated

Note

Values of PAR_ID and COMPLEM must not be changed. If errors in the safety data format are detected during the execution of the safety program, an F-STOP is triggered.

# 7.2.4 Run sequence of F-blocks

# Defining the run sequence

You define the run sequence in the CFC editor in the same way as for a standard user program. Changing the run sequence also changes the collective signature.

# Correct run sequence of F-blocks

The sequence of the F-blocks within the F-shutdown group is relevant. The number of F-runtime groups the F-shutdown group has been split into is of no relevance. Essentially, the correct run sequence of the various F-block types is as follows:

1. Placed automatically:
- F module driver for F-signal modules with inputs or with inputs and outputs
- F-communications blocks and F-system blocks for receiving
- F blocks for data conversion from standard value to F-structure
- F modules with OS connection
2. F channel drivers for inputs
3. F blocks for user logic

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

1. F channel drivers for outputs
2. Placed automatically:
- F block F_PLK
- F block F_PSG_M
- F module driver for F-signal modules with outputs or with inputs and outputs
- F-communications blocks and F-system blocks for sending
- F block F_PLK_O
- F block F_DIAG (S7 F-Systems Lib V1_3 and higher)

The run sequence of the blocks listed under items 1 and 5 is adjusted automatically when the F-program is compiled.
As if S7 F Systems Lib V1_3, separate runtime groups are created for the F blocks listed under points 1 and 5 during the first compilation.
The IPO principle (input, process, output) must always be observed when placing F-channel drivers and F-blocks for user logic.
This ensures that all inputs are read first, the relevant processing steps are performed, and all outputs are then written.
Furthermore, F-runtime groups and F-monitoring blocks that are only visible following compilation are also added automatically.

Note

No changes may be made in the automatically added runtime groups with the exception of the scan cycle monitoring on ""F_CYC_CO"" blocks and the parameter assignment of the ""F_SHUTDN"" block.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.5 F-runtime groups

During the programming of the safety program, F-blocks cannot be inserted directly into tasks (cyclic interrupt OBs). When a new CFC chart is created in PCS 7, the system will automatically generate a runtime group of the same name, into which the F-blocks placed in the corresponding CFC chart can then be inserted. An F-runtime group only becomes an F-runtime group (identified by a yellow folder and ""F"") when F-blocks are called in it.

0B37 [Cyclic interrupt7] (300 ms)
@CPU_RTI@CPU_RT
@F_ShutDn_37 (300 ms)
@F_ShutDn (300 ms)
CycCo-QB37 (300 ms)
CycCo-OB3ZIF_CYC_CO-OB37
@F_CycCo-OB3ZIF_TEST
@F_CycCo-OB37IF_TESTC
@F_TestMode (300 ms)
@F_IN_37_0 (300 ms)
SFC_109_F (300 ms)
AI_F (300 ms)
HS104_F (300 ms)
@F_OUT_37_0 (300 ms)
@F_DbIniti (300 ms)
0B38 [Cycic interrupta] (10 ms)

# Runtime groups of an F-program

The F-program is divided into several runtime groups, as shown in the table below.

Note

xx = Number of the cyclic interrupt OB

y = Consecutive numbering if several shutdown groups exist in a single cyclic interrupt OB

|Chart|F blocks|
|---|---|
|@F_ShutDn_xx|Shutdown logic of cyclic interrupt OB The shutdown logic is created with RTGLOGIC and standard logic blocks.|
|@F_ShutDn|Shutdown block Where an F-program is present in several cyclic interrupt OBs, this runtime group is integrated into the cyclic interrupt OB with the shortest call time. The shutdown logic is created with F_SHUTDN, RTGLOGIC, and standard logic blocks.|
|@F_CycCo-OBxx|F_CYC_CO, F_TEST and F_TESTC (for tests)|
|@F_TestMode|F_TESTM for managing safety mode|
|@F_IN_xx_y|F blocks which supply input values for the F-program (F_QUITES, communication receive blocks, conversion blocks from standard to F-data types, drivers for F-input modules) Runtime groups with user logic, in the sequence in which they were created by the user|

Compendium Part B - Process Safety (V9.0)
Operating Manual, 04/2018, A5E43228905-AA

# 7.2 Creating the safety program

@F_OUT_xx_y Blocks which further process output values of F-blocks (communication send blocks, conversion blocks from F-to standard data types, drivers for F-output modules, F_PLK, F_PLK_O, and F_DIAG for program sequence control)

@F_DbInitxx DB_INIT function block required for the cold restart of an F-runtime group

All required error OBs are added to the block container in the SIMATIC Manager.

There should only be one @F_IN_xx_y runtime group before the first F-user runtime group and one @F_OUT_xx_y runtime group after the last F-user runtime group. If the safety program consists of several shutdown groups (see section 6.2.6 (Page 87)), there is the @F_IN_xx_y and @F_OUT_xx_y runtime group both before and after the F-user runtime group in the shutdown groups.

# Rules for F-runtime groups in the safety program

- We recommend that you proceed as follows in order to make the lengths of the F-cycles as uniform as possible:
If you mix F-and standard runtime groups in a cyclic interrupt OB, you must execute the F-runtime groups before the standard runtime groups.
- The following defaults are set for properties of an F-runtime group:
- Reduction ratio = 1
- Phase offset = 0
- Properties Runtime Group
- Task: 0B37
- Name: HS104
- Comment:
- Reduction ratio:
- Phase offset:
- Optimize run sequence
- Active:
- You are not permitted to move automatically generated F-runtime groups (identified by @).

Note: The feature: Optimize Run Sequence in CFC can lead to a change in the collective signature and impair the response times of the safety program, and therefore should not be used in F-runtime groups.

With PCS 7 V7.0 SP1 and higher, it is no longer possible to optimize the run sequence for cyclic interrupt OBs with F-runtime groups.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.6 F-shutdown groups

An F-shutdown group is a self-contained unit in your safety program. It contains user logic which is executed or shut down simultaneously. The F-shutdown group contains one or a number of F-runtime groups which are assigned to a common cyclic interrupt OB. You can choose whether an error during execution of the safety program causes a full shutdown or a partial shutdown of the safety program. With a partial shutdown, only the F-shutdown group in which the error occurred is shut down.

# Rules for F-shutdown groups in the safety program

You are not permitted to directly interconnect F-blocks in different F-shutdown groups. Data can only be exchanged between F-shutdown groups using special communication blocks (F_S_xx, F_R_xx for F_BOOL and F_REAL data structures). Therefore, all F-channel drivers in an F-signal module must be in the same F-shutdown group, together with the module driver of the F-signal module.

# Defining F-shutdown groups

As soon as you place F-blocks in the CFC editor for the first time, all of the F-runtime groups in a single cyclic interrupt OB will form an F-shutdown group. You can configure each F-runtime group as the last F-runtime group in an F-shutdown group by placing the F_PSG_M ""selection block"". The F-system then creates a new F-shutdown group for all subsequent F-runtime groups until another F_PSG_M block is found.

# Distribution/Combination by means of manual placing of F_PSG_M

If you add or delete one or a number of F_PSG_M blocks in your project, the order of your F-shutdown groups will change. If you make a change to the layout of your F-shutdown groups, you must make sure that the F-module drivers and all assigned F-channel drivers are integrated in the same F-shutdown group. You can split one F-shutdown group into two F-shutdown groups. To do this, in the CFC editor's runtime editor, place the F_PSG_M block in the last F-runtime group which is to be assigned to the first F-shutdown group. All subsequent F-runtime groups will then be assigned to the second F-shutdown group. The number of F-shutdown groups is limited to 110 in all cyclic interrupt OBs. The system restricts the number of F-runtime groups in an F-shutdown group. You have the option of combining two F-shutdown groups. To do this, in the runtime editor of the CFC editor, delete the F_PSG_M block between the F-shutdown groups. If you combine a number of F-shutdown groups which exchange data via F-communication blocks in a single F-shutdown group, you need to remove these F-communications blocks and replace them with direct interconnections.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# Programming data exchange between F-shutdown groups

If you wish to exchange data between two F-shutdown groups, you are not permitted to interconnect the inputs and outputs directly. You need to use the following F-system blocks for data exchange between F blocks in different F-shutdown groups:

|F block|Description|
|---|---|
|F_S_R/F_R_R|Safe transfer of 5 data of the F_REAL type|
|F_S_BO/F_R_BO|Safe transfer of 5 data of the F_BOOL type|

# Procedure for data exchange

1. In the F-shutdown group from which data is to be transferred, add an F_S_R or F_S_BO type F-block.
2. In the F-shutdown group to which data is to be transferred, add an F_R_R or F_R_BO type F-block.
3. Interconnect the SD_R_xx inputs of the F_S_R or the SD_BO_xx inputs of the F_S_BO with the data to be transferred.
4. Interconnect the RD_R_xx outputs of the F_R_R or the RD_BO_xx outputs of the F_R_BO with the inputs of the F-block for further processing of the data received.
5. Interconnect the S_DB output of the send block with the S_DB input of the associated receive block.
6. Configure the TIMEOUT inputs of the F_R_R and F_R_BO receive blocks with the F-monitoring time calculated.
7. Configure the receive block substitute values for the scenario of a shutdown of the sending shutdown group.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Extract from a chart for shutdown group 1 with send block:

|42617|7ail-|7133 Cor|CHLDEA F|1e-0- Ck_INE|
|---|---|---|---|---|
|JdEO|90_8o_|J0_EO|90_BO|JD_Bo_|
|11_112|J0_EO_07|32_80_08|7193 Coz|CHLDEA|
|Q_EAII|4212 bloel|PaJJ_CX|0_Kod|ubSime|
|4nu|Lou|JG RG|P3c >| |

The connection to shutdown group 2 is established by linking output S_DB of block F_S_BO_1 in shutdown group 1 with input S_DB on block F_R_BO_1 in shutdown group 2.

Extract from a chart for shutdown group 2 with receive block:

|Xbaeha|32430|netr|
|---|---|---|
|314 = doxr|3281p|REC_E?|
|Recei|ER EL|RD_BO_|
|RD_BO_|8088Q_01|RD_EQ|
|RD_E?|302ZD|RD_Lo|

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

89

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.7 Data exchange between the F user program and standard user program

The standard program and the F-program use different data formats. Accordingly, special conversion blocks have to be used for data exchange.

F-CPU
F-program
Conversion blocks
Standard program
Converting F-data types to standard data types

If you need the standard user program to process data from the F-program further (for monitoring on the PCS 7 OS, for example), a block for F_FDatatype_Datatype data conversion will have to be interconnected in the user program so that the F-data types can be converted into standard data types. This converter blocks must be called in the standard user program (standard runtime group).

Extract from a process tag chart; converting the ""QBAD"" signal from F_BOOL to BOOL:

Note

The figure is available in its original size as appendix to the manual in the ZIP download of the checklists.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Standard and F-blocks are in different runtime groups. As shown here, some F-blocks have outputs (depicted in gray), which can be directly interconnected with standard PCS 7 blocks. PCS 7 blocks such as MonAnL, MonDiL, EventMESSAGE and their associated faceplates and process symbols are used to visualize fail-safe analog values and status messages as well as system states and operating states. If parameters cannot be directly further interconnected due to the safety data format, the conversion blocks described above can be used.

# Converting standard data types into F-data types

If data from the standard user program is to be processed further in the F-program, it will need to be converted. The blocks for data conversion from standard data types to F-data types (F_datatype_Fdatatype) can only be used in the F-program (F-runtime group).

Extract from an F-chart, conversion from REAL to F_REAL:

|7_R_FR_CONv|R -B|CE 32|CB39|:RELL|Aulci|
|---|---|---|---|---|---|
|DAII ZROC3?|VALUE DiT| | | | |

Note: The conversion blocks only perform data conversion; in other words, you will need to program additional measures in the F-program for plausibility checking purposes (with F_LIM_R, for example), in order to ensure that only non-hazardous values are possible.

# 7.2.8 How F-blocks with floating-point operations respond to number range overflows

Within the context of analog value processing, number range overflows/underflows can occur during arithmetic calculations (with division by 0, root from a negative number or number range overflow). With S7 F Systems Lib V1_3 and higher, the response is as follows in this case: The results ""Overflow (± infinite)"", ""Denormalized floating-point number"" or ""Invalid floating-point number (NaN)"" are:

- Either output at the output and can be processed further by subsequent F blocks
- Or signaled to special outputs. A substitute value is output if necessary.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

91

# Configuring the safety program

# 7.2 Creating the safety program

If the floating-point operation produces an invalid floating-point number (NaN) and no invalid floating-point number (NaN) existed as an address prior to this, the following diagnostics event will be entered in the F CPU's diagnostic buffer:

""Safety program: Invalid REAL number in DB"" (event ID 16#75D9)

You can use this entry in the diagnostic buffer to identify the F block with the invalid floating-point number (NaN).

If you are not able to prevent these events from occurring in your safety program, you will need to decide, on the basis of your application, whether you wish to respond to them in your safety program.

|AD?|nddie|101.o = 101.0_|10o.0|-10q|CUIL|5035|
|---|---|---|---|---|---|---|
|AD?|indoic|0b37 1.0e+3e|:Addle|0etz|3.0e-3e|10o.0|
| |100.0|3.0e-38| |CUIL|AD_|:itis|
|0837i|LIN_R|08371|#Addic|3402-32|c0m| |
| |ce-JE| |CUII|Sms|AD?|0BJ7i|
|Addue|J1o|~10O|02-J8|~100.0|CuTO|100.0=|
|DIV|LIK_R|:tris|100.0_| |100.-|CutQ|
|0.0|502S|SoRT|HXR|:Squo-|{AJi|hal|
|-10o.05|CVIQ|CUIL|5023_W| | | |

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.3 Configuring fail-safe AS-AS communication

You can use the F_LIM_R F block to check the result of a floating-point operation for overflow (± infinite) and invalid floating-point number (NaN).

- A limit violation is indicated by IN &gt; MAX or ""+ infinite"". ",What is the correct run sequence of various F-block types as outlined in the 'Compendium Part B - Process Safety (V9.0)'?,A4,"Automatically placed blocks come first, followed by input channel drivers, and finally user logic blocks.",0.9453125,1.171875,3.15625,1.0546875,0.361328125
34,pcs7_compendium_part_b_en-US_en-US.txt,37,5dea5c3b1bc7a2a2d3707ace8a7d6e3ed157196366f8ee88ba630fadc3d36b0e,"Changes to the input parameters of F blocks with F data types can be made as follows:

- Offline with the assistance of the CFC editor
- Online using CFC test mode with safety mode deactivated

Note

Values of PAR_ID and COMPLEM must not be changed. If errors in the safety data format are detected during the execution of the safety program, an F-STOP is triggered.

# 7.2.4 Run sequence of F-blocks

# Defining the run sequence

You define the run sequence in the CFC editor in the same way as for a standard user program. Changing the run sequence also changes the collective signature.

# Correct run sequence of F-blocks

The sequence of the F-blocks within the F-shutdown group is relevant. The number of F-runtime groups the F-shutdown group has been split into is of no relevance. Essentially, the correct run sequence of the various F-block types is as follows:

1. Placed automatically:
- F module driver for F-signal modules with inputs or with inputs and outputs
- F-communications blocks and F-system blocks for receiving
- F blocks for data conversion from standard value to F-structure
- F modules with OS connection
2. F channel drivers for inputs
3. F blocks for user logic

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

1. F channel drivers for outputs
2. Placed automatically:
- F block F_PLK
- F block F_PSG_M
- F module driver for F-signal modules with outputs or with inputs and outputs
- F-communications blocks and F-system blocks for sending
- F block F_PLK_O
- F block F_DIAG (S7 F-Systems Lib V1_3 and higher)

The run sequence of the blocks listed under items 1 and 5 is adjusted automatically when the F-program is compiled.
As if S7 F Systems Lib V1_3, separate runtime groups are created for the F blocks listed under points 1 and 5 during the first compilation.
The IPO principle (input, process, output) must always be observed when placing F-channel drivers and F-blocks for user logic.
This ensures that all inputs are read first, the relevant processing steps are performed, and all outputs are then written.
Furthermore, F-runtime groups and F-monitoring blocks that are only visible following compilation are also added automatically.

Note

No changes may be made in the automatically added runtime groups with the exception of the scan cycle monitoring on ""F_CYC_CO"" blocks and the parameter assignment of the ""F_SHUTDN"" block.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.5 F-runtime groups

During the programming of the safety program, F-blocks cannot be inserted directly into tasks (cyclic interrupt OBs). When a new CFC chart is created in PCS 7, the system will automatically generate a runtime group of the same name, into which the F-blocks placed in the corresponding CFC chart can then be inserted. An F-runtime group only becomes an F-runtime group (identified by a yellow folder and ""F"") when F-blocks are called in it.

0B37 [Cyclic interrupt7] (300 ms)
@CPU_RTI@CPU_RT
@F_ShutDn_37 (300 ms)
@F_ShutDn (300 ms)
CycCo-QB37 (300 ms)
CycCo-OB3ZIF_CYC_CO-OB37
@F_CycCo-OB3ZIF_TEST
@F_CycCo-OB37IF_TESTC
@F_TestMode (300 ms)
@F_IN_37_0 (300 ms)
SFC_109_F (300 ms)
AI_F (300 ms)
HS104_F (300 ms)
@F_OUT_37_0 (300 ms)
@F_DbIniti (300 ms)
0B38 [Cycic interrupta] (10 ms)

# Runtime groups of an F-program

The F-program is divided into several runtime groups, as shown in the table below.

Note

xx = Number of the cyclic interrupt OB

y = Consecutive numbering if several shutdown groups exist in a single cyclic interrupt OB

|Chart|F blocks|
|---|---|
|@F_ShutDn_xx|Shutdown logic of cyclic interrupt OB The shutdown logic is created with RTGLOGIC and standard logic blocks.|
|@F_ShutDn|Shutdown block Where an F-program is present in several cyclic interrupt OBs, this runtime group is integrated into the cyclic interrupt OB with the shortest call time. The shutdown logic is created with F_SHUTDN, RTGLOGIC, and standard logic blocks.|
|@F_CycCo-OBxx|F_CYC_CO, F_TEST and F_TESTC (for tests)|
|@F_TestMode|F_TESTM for managing safety mode|
|@F_IN_xx_y|F blocks which supply input values for the F-program (F_QUITES, communication receive blocks, conversion blocks from standard to F-data types, drivers for F-input modules) Runtime groups with user logic, in the sequence in which they were created by the user|

Compendium Part B - Process Safety (V9.0)
Operating Manual, 04/2018, A5E43228905-AA

# 7.2 Creating the safety program

@F_OUT_xx_y Blocks which further process output values of F-blocks (communication send blocks, conversion blocks from F-to standard data types, drivers for F-output modules, F_PLK, F_PLK_O, and F_DIAG for program sequence control)

@F_DbInitxx DB_INIT function block required for the cold restart of an F-runtime group

All required error OBs are added to the block container in the SIMATIC Manager.

There should only be one @F_IN_xx_y runtime group before the first F-user runtime group and one @F_OUT_xx_y runtime group after the last F-user runtime group. If the safety program consists of several shutdown groups (see section 6.2.6 (Page 87)), there is the @F_IN_xx_y and @F_OUT_xx_y runtime group both before and after the F-user runtime group in the shutdown groups.

# Rules for F-runtime groups in the safety program

- We recommend that you proceed as follows in order to make the lengths of the F-cycles as uniform as possible:
If you mix F-and standard runtime groups in a cyclic interrupt OB, you must execute the F-runtime groups before the standard runtime groups.
- The following defaults are set for properties of an F-runtime group:
- Reduction ratio = 1
- Phase offset = 0
- Properties Runtime Group
- Task: 0B37
- Name: HS104
- Comment:
- Reduction ratio:
- Phase offset:
- Optimize run sequence
- Active:
- You are not permitted to move automatically generated F-runtime groups (identified by @).

Note: The feature: Optimize Run Sequence in CFC can lead to a change in the collective signature and impair the response times of the safety program, and therefore should not be used in F-runtime groups.

With PCS 7 V7.0 SP1 and higher, it is no longer possible to optimize the run sequence for cyclic interrupt OBs with F-runtime groups.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.6 F-shutdown groups

An F-shutdown group is a self-contained unit in your safety program. It contains user logic which is executed or shut down simultaneously. The F-shutdown group contains one or a number of F-runtime groups which are assigned to a common cyclic interrupt OB. You can choose whether an error during execution of the safety program causes a full shutdown or a partial shutdown of the safety program. With a partial shutdown, only the F-shutdown group in which the error occurred is shut down.

# Rules for F-shutdown groups in the safety program

You are not permitted to directly interconnect F-blocks in different F-shutdown groups. Data can only be exchanged between F-shutdown groups using special communication blocks (F_S_xx, F_R_xx for F_BOOL and F_REAL data structures). Therefore, all F-channel drivers in an F-signal module must be in the same F-shutdown group, together with the module driver of the F-signal module.

# Defining F-shutdown groups

As soon as you place F-blocks in the CFC editor for the first time, all of the F-runtime groups in a single cyclic interrupt OB will form an F-shutdown group. You can configure each F-runtime group as the last F-runtime group in an F-shutdown group by placing the F_PSG_M ""selection block"". The F-system then creates a new F-shutdown group for all subsequent F-runtime groups until another F_PSG_M block is found.

# Distribution/Combination by means of manual placing of F_PSG_M

If you add or delete one or a number of F_PSG_M blocks in your project, the order of your F-shutdown groups will change. If you make a change to the layout of your F-shutdown groups, you must make sure that the F-module drivers and all assigned F-channel drivers are integrated in the same F-shutdown group. You can split one F-shutdown group into two F-shutdown groups. To do this, in the CFC editor's runtime editor, place the F_PSG_M block in the last F-runtime group which is to be assigned to the first F-shutdown group. All subsequent F-runtime groups will then be assigned to the second F-shutdown group. The number of F-shutdown groups is limited to 110 in all cyclic interrupt OBs. The system restricts the number of F-runtime groups in an F-shutdown group. You have the option of combining two F-shutdown groups. To do this, in the runtime editor of the CFC editor, delete the F_PSG_M block between the F-shutdown groups. If you combine a number of F-shutdown groups which exchange data via F-communication blocks in a single F-shutdown group, you need to remove these F-communications blocks and replace them with direct interconnections.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# Programming data exchange between F-shutdown groups

If you wish to exchange data between two F-shutdown groups, you are not permitted to interconnect the inputs and outputs directly. You need to use the following F-system blocks for data exchange between F blocks in different F-shutdown groups:

|F block|Description|
|---|---|
|F_S_R/F_R_R|Safe transfer of 5 data of the F_REAL type|
|F_S_BO/F_R_BO|Safe transfer of 5 data of the F_BOOL type|

# Procedure for data exchange

1. In the F-shutdown group from which data is to be transferred, add an F_S_R or F_S_BO type F-block.
2. In the F-shutdown group to which data is to be transferred, add an F_R_R or F_R_BO type F-block.
3. Interconnect the SD_R_xx inputs of the F_S_R or the SD_BO_xx inputs of the F_S_BO with the data to be transferred.
4. Interconnect the RD_R_xx outputs of the F_R_R or the RD_BO_xx outputs of the F_R_BO with the inputs of the F-block for further processing of the data received.
5. Interconnect the S_DB output of the send block with the S_DB input of the associated receive block.
6. Configure the TIMEOUT inputs of the F_R_R and F_R_BO receive blocks with the F-monitoring time calculated.
7. Configure the receive block substitute values for the scenario of a shutdown of the sending shutdown group.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Extract from a chart for shutdown group 1 with send block:

|42617|7ail-|7133 Cor|CHLDEA F|1e-0- Ck_INE|
|---|---|---|---|---|
|JdEO|90_8o_|J0_EO|90_BO|JD_Bo_|
|11_112|J0_EO_07|32_80_08|7193 Coz|CHLDEA|
|Q_EAII|4212 bloel|PaJJ_CX|0_Kod|ubSime|
|4nu|Lou|JG RG|P3c >| |

The connection to shutdown group 2 is established by linking output S_DB of block F_S_BO_1 in shutdown group 1 with input S_DB on block F_R_BO_1 in shutdown group 2.

Extract from a chart for shutdown group 2 with receive block:

|Xbaeha|32430|netr|
|---|---|---|
|314 = doxr|3281p|REC_E?|
|Recei|ER EL|RD_BO_|
|RD_BO_|8088Q_01|RD_EQ|
|RD_E?|302ZD|RD_Lo|

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

89

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.7 Data exchange between the F user program and standard user program

The standard program and the F-program use different data formats. Accordingly, special conversion blocks have to be used for data exchange.

F-CPU
F-program
Conversion blocks
Standard program
Converting F-data types to standard data types

If you need the standard user program to process data from the F-program further (for monitoring on the PCS 7 OS, for example), a block for F_FDatatype_Datatype data conversion will have to be interconnected in the user program so that the F-data types can be converted into standard data types. This converter blocks must be called in the standard user program (standard runtime group).

Extract from a process tag chart; converting the ""QBAD"" signal from F_BOOL to BOOL:

Note

The figure is available in its original size as appendix to the manual in the ZIP download of the checklists.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Standard and F-blocks are in different runtime groups. As shown here, some F-blocks have outputs (depicted in gray), which can be directly interconnected with standard PCS 7 blocks. PCS 7 blocks such as MonAnL, MonDiL, EventMESSAGE and their associated faceplates and process symbols are used to visualize fail-safe analog values and status messages as well as system states and operating states. If parameters cannot be directly further interconnected due to the safety data format, the conversion blocks described above can be used.

# Converting standard data types into F-data types

If data from the standard user program is to be processed further in the F-program, it will need to be converted. The blocks for data conversion from standard data types to F-data types (F_datatype_Fdatatype) can only be used in the F-program (F-runtime group).

Extract from an F-chart, conversion from REAL to F_REAL:

|7_R_FR_CONv|R -B|CE 32|CB39|:RELL|Aulci|
|---|---|---|---|---|---|
|DAII ZROC3?|VALUE DiT| | | | |

Note: The conversion blocks only perform data conversion; in other words, you will need to program additional measures in the F-program for plausibility checking purposes (with F_LIM_R, for example), in order to ensure that only non-hazardous values are possible.

# 7.2.8 How F-blocks with floating-point operations respond to number range overflows

Within the context of analog value processing, number range overflows/underflows can occur during arithmetic calculations (with division by 0, root from a negative number or number range overflow). With S7 F Systems Lib V1_3 and higher, the response is as follows in this case: The results ""Overflow (± infinite)"", ""Denormalized floating-point number"" or ""Invalid floating-point number (NaN)"" are:

- Either output at the output and can be processed further by subsequent F blocks
- Or signaled to special outputs. A substitute value is output if necessary.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

91

# Configuring the safety program

# 7.2 Creating the safety program

If the floating-point operation produces an invalid floating-point number (NaN) and no invalid floating-point number (NaN) existed as an address prior to this, the following diagnostics event will be entered in the F CPU's diagnostic buffer:

""Safety program: Invalid REAL number in DB"" (event ID 16#75D9)

You can use this entry in the diagnostic buffer to identify the F block with the invalid floating-point number (NaN).

If you are not able to prevent these events from occurring in your safety program, you will need to decide, on the basis of your application, whether you wish to respond to them in your safety program.

|AD?|nddie|101.o = 101.0_|10o.0|-10q|CUIL|5035|
|---|---|---|---|---|---|---|
|AD?|indoic|0b37 1.0e+3e|:Addle|0etz|3.0e-3e|10o.0|
| |100.0|3.0e-38| |CUIL|AD_|:itis|
|0837i|LIN_R|08371|#Addic|3402-32|c0m| |
| |ce-JE| |CUII|Sms|AD?|0BJ7i|
|Addue|J1o|~10O|02-J8|~100.0|CuTO|100.0=|
|DIV|LIK_R|:tris|100.0_| |100.-|CutQ|
|0.0|502S|SoRT|HXR|:Squo-|{AJi|hal|
|-10o.05|CVIQ|CUIL|5023_W| | | |

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.3 Configuring fail-safe AS-AS communication

You can use the F_LIM_R F block to check the result of a floating-point operation for overflow (± infinite) and invalid floating-point number (NaN).

- A limit violation is indicated by IN &gt; MAX or ""+ infinite"". ",What is the correct run sequence of various F-block types as outlined in the 'Compendium Part B - Process Safety (V9.0)'?,A5,"The manual specifies an initial automatic placement of certain blocks, then input channel drivers, and lastly, user logic blocks.",1.1015625,1.265625,3.171875,1.25,0.34765625
35,pcs7_compendium_part_b_en-US_en-US.txt,37,5dea5c3b1bc7a2a2d3707ace8a7d6e3ed157196366f8ee88ba630fadc3d36b0e,"Changes to the input parameters of F blocks with F data types can be made as follows:

- Offline with the assistance of the CFC editor
- Online using CFC test mode with safety mode deactivated

Note

Values of PAR_ID and COMPLEM must not be changed. If errors in the safety data format are detected during the execution of the safety program, an F-STOP is triggered.

# 7.2.4 Run sequence of F-blocks

# Defining the run sequence

You define the run sequence in the CFC editor in the same way as for a standard user program. Changing the run sequence also changes the collective signature.

# Correct run sequence of F-blocks

The sequence of the F-blocks within the F-shutdown group is relevant. The number of F-runtime groups the F-shutdown group has been split into is of no relevance. Essentially, the correct run sequence of the various F-block types is as follows:

1. Placed automatically:
- F module driver for F-signal modules with inputs or with inputs and outputs
- F-communications blocks and F-system blocks for receiving
- F blocks for data conversion from standard value to F-structure
- F modules with OS connection
2. F channel drivers for inputs
3. F blocks for user logic

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

1. F channel drivers for outputs
2. Placed automatically:
- F block F_PLK
- F block F_PSG_M
- F module driver for F-signal modules with outputs or with inputs and outputs
- F-communications blocks and F-system blocks for sending
- F block F_PLK_O
- F block F_DIAG (S7 F-Systems Lib V1_3 and higher)

The run sequence of the blocks listed under items 1 and 5 is adjusted automatically when the F-program is compiled.
As if S7 F Systems Lib V1_3, separate runtime groups are created for the F blocks listed under points 1 and 5 during the first compilation.
The IPO principle (input, process, output) must always be observed when placing F-channel drivers and F-blocks for user logic.
This ensures that all inputs are read first, the relevant processing steps are performed, and all outputs are then written.
Furthermore, F-runtime groups and F-monitoring blocks that are only visible following compilation are also added automatically.

Note

No changes may be made in the automatically added runtime groups with the exception of the scan cycle monitoring on ""F_CYC_CO"" blocks and the parameter assignment of the ""F_SHUTDN"" block.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.5 F-runtime groups

During the programming of the safety program, F-blocks cannot be inserted directly into tasks (cyclic interrupt OBs). When a new CFC chart is created in PCS 7, the system will automatically generate a runtime group of the same name, into which the F-blocks placed in the corresponding CFC chart can then be inserted. An F-runtime group only becomes an F-runtime group (identified by a yellow folder and ""F"") when F-blocks are called in it.

0B37 [Cyclic interrupt7] (300 ms)
@CPU_RTI@CPU_RT
@F_ShutDn_37 (300 ms)
@F_ShutDn (300 ms)
CycCo-QB37 (300 ms)
CycCo-OB3ZIF_CYC_CO-OB37
@F_CycCo-OB3ZIF_TEST
@F_CycCo-OB37IF_TESTC
@F_TestMode (300 ms)
@F_IN_37_0 (300 ms)
SFC_109_F (300 ms)
AI_F (300 ms)
HS104_F (300 ms)
@F_OUT_37_0 (300 ms)
@F_DbIniti (300 ms)
0B38 [Cycic interrupta] (10 ms)

# Runtime groups of an F-program

The F-program is divided into several runtime groups, as shown in the table below.

Note

xx = Number of the cyclic interrupt OB

y = Consecutive numbering if several shutdown groups exist in a single cyclic interrupt OB

|Chart|F blocks|
|---|---|
|@F_ShutDn_xx|Shutdown logic of cyclic interrupt OB The shutdown logic is created with RTGLOGIC and standard logic blocks.|
|@F_ShutDn|Shutdown block Where an F-program is present in several cyclic interrupt OBs, this runtime group is integrated into the cyclic interrupt OB with the shortest call time. The shutdown logic is created with F_SHUTDN, RTGLOGIC, and standard logic blocks.|
|@F_CycCo-OBxx|F_CYC_CO, F_TEST and F_TESTC (for tests)|
|@F_TestMode|F_TESTM for managing safety mode|
|@F_IN_xx_y|F blocks which supply input values for the F-program (F_QUITES, communication receive blocks, conversion blocks from standard to F-data types, drivers for F-input modules) Runtime groups with user logic, in the sequence in which they were created by the user|

Compendium Part B - Process Safety (V9.0)
Operating Manual, 04/2018, A5E43228905-AA

# 7.2 Creating the safety program

@F_OUT_xx_y Blocks which further process output values of F-blocks (communication send blocks, conversion blocks from F-to standard data types, drivers for F-output modules, F_PLK, F_PLK_O, and F_DIAG for program sequence control)

@F_DbInitxx DB_INIT function block required for the cold restart of an F-runtime group

All required error OBs are added to the block container in the SIMATIC Manager.

There should only be one @F_IN_xx_y runtime group before the first F-user runtime group and one @F_OUT_xx_y runtime group after the last F-user runtime group. If the safety program consists of several shutdown groups (see section 6.2.6 (Page 87)), there is the @F_IN_xx_y and @F_OUT_xx_y runtime group both before and after the F-user runtime group in the shutdown groups.

# Rules for F-runtime groups in the safety program

- We recommend that you proceed as follows in order to make the lengths of the F-cycles as uniform as possible:
If you mix F-and standard runtime groups in a cyclic interrupt OB, you must execute the F-runtime groups before the standard runtime groups.
- The following defaults are set for properties of an F-runtime group:
- Reduction ratio = 1
- Phase offset = 0
- Properties Runtime Group
- Task: 0B37
- Name: HS104
- Comment:
- Reduction ratio:
- Phase offset:
- Optimize run sequence
- Active:
- You are not permitted to move automatically generated F-runtime groups (identified by @).

Note: The feature: Optimize Run Sequence in CFC can lead to a change in the collective signature and impair the response times of the safety program, and therefore should not be used in F-runtime groups.

With PCS 7 V7.0 SP1 and higher, it is no longer possible to optimize the run sequence for cyclic interrupt OBs with F-runtime groups.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.6 F-shutdown groups

An F-shutdown group is a self-contained unit in your safety program. It contains user logic which is executed or shut down simultaneously. The F-shutdown group contains one or a number of F-runtime groups which are assigned to a common cyclic interrupt OB. You can choose whether an error during execution of the safety program causes a full shutdown or a partial shutdown of the safety program. With a partial shutdown, only the F-shutdown group in which the error occurred is shut down.

# Rules for F-shutdown groups in the safety program

You are not permitted to directly interconnect F-blocks in different F-shutdown groups. Data can only be exchanged between F-shutdown groups using special communication blocks (F_S_xx, F_R_xx for F_BOOL and F_REAL data structures). Therefore, all F-channel drivers in an F-signal module must be in the same F-shutdown group, together with the module driver of the F-signal module.

# Defining F-shutdown groups

As soon as you place F-blocks in the CFC editor for the first time, all of the F-runtime groups in a single cyclic interrupt OB will form an F-shutdown group. You can configure each F-runtime group as the last F-runtime group in an F-shutdown group by placing the F_PSG_M ""selection block"". The F-system then creates a new F-shutdown group for all subsequent F-runtime groups until another F_PSG_M block is found.

# Distribution/Combination by means of manual placing of F_PSG_M

If you add or delete one or a number of F_PSG_M blocks in your project, the order of your F-shutdown groups will change. If you make a change to the layout of your F-shutdown groups, you must make sure that the F-module drivers and all assigned F-channel drivers are integrated in the same F-shutdown group. You can split one F-shutdown group into two F-shutdown groups. To do this, in the CFC editor's runtime editor, place the F_PSG_M block in the last F-runtime group which is to be assigned to the first F-shutdown group. All subsequent F-runtime groups will then be assigned to the second F-shutdown group. The number of F-shutdown groups is limited to 110 in all cyclic interrupt OBs. The system restricts the number of F-runtime groups in an F-shutdown group. You have the option of combining two F-shutdown groups. To do this, in the runtime editor of the CFC editor, delete the F_PSG_M block between the F-shutdown groups. If you combine a number of F-shutdown groups which exchange data via F-communication blocks in a single F-shutdown group, you need to remove these F-communications blocks and replace them with direct interconnections.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# Programming data exchange between F-shutdown groups

If you wish to exchange data between two F-shutdown groups, you are not permitted to interconnect the inputs and outputs directly. You need to use the following F-system blocks for data exchange between F blocks in different F-shutdown groups:

|F block|Description|
|---|---|
|F_S_R/F_R_R|Safe transfer of 5 data of the F_REAL type|
|F_S_BO/F_R_BO|Safe transfer of 5 data of the F_BOOL type|

# Procedure for data exchange

1. In the F-shutdown group from which data is to be transferred, add an F_S_R or F_S_BO type F-block.
2. In the F-shutdown group to which data is to be transferred, add an F_R_R or F_R_BO type F-block.
3. Interconnect the SD_R_xx inputs of the F_S_R or the SD_BO_xx inputs of the F_S_BO with the data to be transferred.
4. Interconnect the RD_R_xx outputs of the F_R_R or the RD_BO_xx outputs of the F_R_BO with the inputs of the F-block for further processing of the data received.
5. Interconnect the S_DB output of the send block with the S_DB input of the associated receive block.
6. Configure the TIMEOUT inputs of the F_R_R and F_R_BO receive blocks with the F-monitoring time calculated.
7. Configure the receive block substitute values for the scenario of a shutdown of the sending shutdown group.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Extract from a chart for shutdown group 1 with send block:

|42617|7ail-|7133 Cor|CHLDEA F|1e-0- Ck_INE|
|---|---|---|---|---|
|JdEO|90_8o_|J0_EO|90_BO|JD_Bo_|
|11_112|J0_EO_07|32_80_08|7193 Coz|CHLDEA|
|Q_EAII|4212 bloel|PaJJ_CX|0_Kod|ubSime|
|4nu|Lou|JG RG|P3c >| |

The connection to shutdown group 2 is established by linking output S_DB of block F_S_BO_1 in shutdown group 1 with input S_DB on block F_R_BO_1 in shutdown group 2.

Extract from a chart for shutdown group 2 with receive block:

|Xbaeha|32430|netr|
|---|---|---|
|314 = doxr|3281p|REC_E?|
|Recei|ER EL|RD_BO_|
|RD_BO_|8088Q_01|RD_EQ|
|RD_E?|302ZD|RD_Lo|

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

89

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.7 Data exchange between the F user program and standard user program

The standard program and the F-program use different data formats. Accordingly, special conversion blocks have to be used for data exchange.

F-CPU
F-program
Conversion blocks
Standard program
Converting F-data types to standard data types

If you need the standard user program to process data from the F-program further (for monitoring on the PCS 7 OS, for example), a block for F_FDatatype_Datatype data conversion will have to be interconnected in the user program so that the F-data types can be converted into standard data types. This converter blocks must be called in the standard user program (standard runtime group).

Extract from a process tag chart; converting the ""QBAD"" signal from F_BOOL to BOOL:

Note

The figure is available in its original size as appendix to the manual in the ZIP download of the checklists.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Standard and F-blocks are in different runtime groups. As shown here, some F-blocks have outputs (depicted in gray), which can be directly interconnected with standard PCS 7 blocks. PCS 7 blocks such as MonAnL, MonDiL, EventMESSAGE and their associated faceplates and process symbols are used to visualize fail-safe analog values and status messages as well as system states and operating states. If parameters cannot be directly further interconnected due to the safety data format, the conversion blocks described above can be used.

# Converting standard data types into F-data types

If data from the standard user program is to be processed further in the F-program, it will need to be converted. The blocks for data conversion from standard data types to F-data types (F_datatype_Fdatatype) can only be used in the F-program (F-runtime group).

Extract from an F-chart, conversion from REAL to F_REAL:

|7_R_FR_CONv|R -B|CE 32|CB39|:RELL|Aulci|
|---|---|---|---|---|---|
|DAII ZROC3?|VALUE DiT| | | | |

Note: The conversion blocks only perform data conversion; in other words, you will need to program additional measures in the F-program for plausibility checking purposes (with F_LIM_R, for example), in order to ensure that only non-hazardous values are possible.

# 7.2.8 How F-blocks with floating-point operations respond to number range overflows

Within the context of analog value processing, number range overflows/underflows can occur during arithmetic calculations (with division by 0, root from a negative number or number range overflow). With S7 F Systems Lib V1_3 and higher, the response is as follows in this case: The results ""Overflow (± infinite)"", ""Denormalized floating-point number"" or ""Invalid floating-point number (NaN)"" are:

- Either output at the output and can be processed further by subsequent F blocks
- Or signaled to special outputs. A substitute value is output if necessary.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

91

# Configuring the safety program

# 7.2 Creating the safety program

If the floating-point operation produces an invalid floating-point number (NaN) and no invalid floating-point number (NaN) existed as an address prior to this, the following diagnostics event will be entered in the F CPU's diagnostic buffer:

""Safety program: Invalid REAL number in DB"" (event ID 16#75D9)

You can use this entry in the diagnostic buffer to identify the F block with the invalid floating-point number (NaN).

If you are not able to prevent these events from occurring in your safety program, you will need to decide, on the basis of your application, whether you wish to respond to them in your safety program.

|AD?|nddie|101.o = 101.0_|10o.0|-10q|CUIL|5035|
|---|---|---|---|---|---|---|
|AD?|indoic|0b37 1.0e+3e|:Addle|0etz|3.0e-3e|10o.0|
| |100.0|3.0e-38| |CUIL|AD_|:itis|
|0837i|LIN_R|08371|#Addic|3402-32|c0m| |
| |ce-JE| |CUII|Sms|AD?|0BJ7i|
|Addue|J1o|~10O|02-J8|~100.0|CuTO|100.0=|
|DIV|LIK_R|:tris|100.0_| |100.-|CutQ|
|0.0|502S|SoRT|HXR|:Squo-|{AJi|hal|
|-10o.05|CVIQ|CUIL|5023_W| | | |

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.3 Configuring fail-safe AS-AS communication

You can use the F_LIM_R F block to check the result of a floating-point operation for overflow (± infinite) and invalid floating-point number (NaN).

- A limit violation is indicated by IN &gt; MAX or ""+ infinite"". ",What principle must always be observed when placing F-channel drivers and F-blocks for user logic in the safety program?,A1,"The IPO principle (input, process, output) must always be observed.",1.953125,2.015625,3.53125,1.1953125,0.1650390625
36,pcs7_compendium_part_b_en-US_en-US.txt,37,5dea5c3b1bc7a2a2d3707ace8a7d6e3ed157196366f8ee88ba630fadc3d36b0e,"Changes to the input parameters of F blocks with F data types can be made as follows:

- Offline with the assistance of the CFC editor
- Online using CFC test mode with safety mode deactivated

Note

Values of PAR_ID and COMPLEM must not be changed. If errors in the safety data format are detected during the execution of the safety program, an F-STOP is triggered.

# 7.2.4 Run sequence of F-blocks

# Defining the run sequence

You define the run sequence in the CFC editor in the same way as for a standard user program. Changing the run sequence also changes the collective signature.

# Correct run sequence of F-blocks

The sequence of the F-blocks within the F-shutdown group is relevant. The number of F-runtime groups the F-shutdown group has been split into is of no relevance. Essentially, the correct run sequence of the various F-block types is as follows:

1. Placed automatically:
- F module driver for F-signal modules with inputs or with inputs and outputs
- F-communications blocks and F-system blocks for receiving
- F blocks for data conversion from standard value to F-structure
- F modules with OS connection
2. F channel drivers for inputs
3. F blocks for user logic

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

1. F channel drivers for outputs
2. Placed automatically:
- F block F_PLK
- F block F_PSG_M
- F module driver for F-signal modules with outputs or with inputs and outputs
- F-communications blocks and F-system blocks for sending
- F block F_PLK_O
- F block F_DIAG (S7 F-Systems Lib V1_3 and higher)

The run sequence of the blocks listed under items 1 and 5 is adjusted automatically when the F-program is compiled.
As if S7 F Systems Lib V1_3, separate runtime groups are created for the F blocks listed under points 1 and 5 during the first compilation.
The IPO principle (input, process, output) must always be observed when placing F-channel drivers and F-blocks for user logic.
This ensures that all inputs are read first, the relevant processing steps are performed, and all outputs are then written.
Furthermore, F-runtime groups and F-monitoring blocks that are only visible following compilation are also added automatically.

Note

No changes may be made in the automatically added runtime groups with the exception of the scan cycle monitoring on ""F_CYC_CO"" blocks and the parameter assignment of the ""F_SHUTDN"" block.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.5 F-runtime groups

During the programming of the safety program, F-blocks cannot be inserted directly into tasks (cyclic interrupt OBs). When a new CFC chart is created in PCS 7, the system will automatically generate a runtime group of the same name, into which the F-blocks placed in the corresponding CFC chart can then be inserted. An F-runtime group only becomes an F-runtime group (identified by a yellow folder and ""F"") when F-blocks are called in it.

0B37 [Cyclic interrupt7] (300 ms)
@CPU_RTI@CPU_RT
@F_ShutDn_37 (300 ms)
@F_ShutDn (300 ms)
CycCo-QB37 (300 ms)
CycCo-OB3ZIF_CYC_CO-OB37
@F_CycCo-OB3ZIF_TEST
@F_CycCo-OB37IF_TESTC
@F_TestMode (300 ms)
@F_IN_37_0 (300 ms)
SFC_109_F (300 ms)
AI_F (300 ms)
HS104_F (300 ms)
@F_OUT_37_0 (300 ms)
@F_DbIniti (300 ms)
0B38 [Cycic interrupta] (10 ms)

# Runtime groups of an F-program

The F-program is divided into several runtime groups, as shown in the table below.

Note

xx = Number of the cyclic interrupt OB

y = Consecutive numbering if several shutdown groups exist in a single cyclic interrupt OB

|Chart|F blocks|
|---|---|
|@F_ShutDn_xx|Shutdown logic of cyclic interrupt OB The shutdown logic is created with RTGLOGIC and standard logic blocks.|
|@F_ShutDn|Shutdown block Where an F-program is present in several cyclic interrupt OBs, this runtime group is integrated into the cyclic interrupt OB with the shortest call time. The shutdown logic is created with F_SHUTDN, RTGLOGIC, and standard logic blocks.|
|@F_CycCo-OBxx|F_CYC_CO, F_TEST and F_TESTC (for tests)|
|@F_TestMode|F_TESTM for managing safety mode|
|@F_IN_xx_y|F blocks which supply input values for the F-program (F_QUITES, communication receive blocks, conversion blocks from standard to F-data types, drivers for F-input modules) Runtime groups with user logic, in the sequence in which they were created by the user|

Compendium Part B - Process Safety (V9.0)
Operating Manual, 04/2018, A5E43228905-AA

# 7.2 Creating the safety program

@F_OUT_xx_y Blocks which further process output values of F-blocks (communication send blocks, conversion blocks from F-to standard data types, drivers for F-output modules, F_PLK, F_PLK_O, and F_DIAG for program sequence control)

@F_DbInitxx DB_INIT function block required for the cold restart of an F-runtime group

All required error OBs are added to the block container in the SIMATIC Manager.

There should only be one @F_IN_xx_y runtime group before the first F-user runtime group and one @F_OUT_xx_y runtime group after the last F-user runtime group. If the safety program consists of several shutdown groups (see section 6.2.6 (Page 87)), there is the @F_IN_xx_y and @F_OUT_xx_y runtime group both before and after the F-user runtime group in the shutdown groups.

# Rules for F-runtime groups in the safety program

- We recommend that you proceed as follows in order to make the lengths of the F-cycles as uniform as possible:
If you mix F-and standard runtime groups in a cyclic interrupt OB, you must execute the F-runtime groups before the standard runtime groups.
- The following defaults are set for properties of an F-runtime group:
- Reduction ratio = 1
- Phase offset = 0
- Properties Runtime Group
- Task: 0B37
- Name: HS104
- Comment:
- Reduction ratio:
- Phase offset:
- Optimize run sequence
- Active:
- You are not permitted to move automatically generated F-runtime groups (identified by @).

Note: The feature: Optimize Run Sequence in CFC can lead to a change in the collective signature and impair the response times of the safety program, and therefore should not be used in F-runtime groups.

With PCS 7 V7.0 SP1 and higher, it is no longer possible to optimize the run sequence for cyclic interrupt OBs with F-runtime groups.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.6 F-shutdown groups

An F-shutdown group is a self-contained unit in your safety program. It contains user logic which is executed or shut down simultaneously. The F-shutdown group contains one or a number of F-runtime groups which are assigned to a common cyclic interrupt OB. You can choose whether an error during execution of the safety program causes a full shutdown or a partial shutdown of the safety program. With a partial shutdown, only the F-shutdown group in which the error occurred is shut down.

# Rules for F-shutdown groups in the safety program

You are not permitted to directly interconnect F-blocks in different F-shutdown groups. Data can only be exchanged between F-shutdown groups using special communication blocks (F_S_xx, F_R_xx for F_BOOL and F_REAL data structures). Therefore, all F-channel drivers in an F-signal module must be in the same F-shutdown group, together with the module driver of the F-signal module.

# Defining F-shutdown groups

As soon as you place F-blocks in the CFC editor for the first time, all of the F-runtime groups in a single cyclic interrupt OB will form an F-shutdown group. You can configure each F-runtime group as the last F-runtime group in an F-shutdown group by placing the F_PSG_M ""selection block"". The F-system then creates a new F-shutdown group for all subsequent F-runtime groups until another F_PSG_M block is found.

# Distribution/Combination by means of manual placing of F_PSG_M

If you add or delete one or a number of F_PSG_M blocks in your project, the order of your F-shutdown groups will change. If you make a change to the layout of your F-shutdown groups, you must make sure that the F-module drivers and all assigned F-channel drivers are integrated in the same F-shutdown group. You can split one F-shutdown group into two F-shutdown groups. To do this, in the CFC editor's runtime editor, place the F_PSG_M block in the last F-runtime group which is to be assigned to the first F-shutdown group. All subsequent F-runtime groups will then be assigned to the second F-shutdown group. The number of F-shutdown groups is limited to 110 in all cyclic interrupt OBs. The system restricts the number of F-runtime groups in an F-shutdown group. You have the option of combining two F-shutdown groups. To do this, in the runtime editor of the CFC editor, delete the F_PSG_M block between the F-shutdown groups. If you combine a number of F-shutdown groups which exchange data via F-communication blocks in a single F-shutdown group, you need to remove these F-communications blocks and replace them with direct interconnections.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# Programming data exchange between F-shutdown groups

If you wish to exchange data between two F-shutdown groups, you are not permitted to interconnect the inputs and outputs directly. You need to use the following F-system blocks for data exchange between F blocks in different F-shutdown groups:

|F block|Description|
|---|---|
|F_S_R/F_R_R|Safe transfer of 5 data of the F_REAL type|
|F_S_BO/F_R_BO|Safe transfer of 5 data of the F_BOOL type|

# Procedure for data exchange

1. In the F-shutdown group from which data is to be transferred, add an F_S_R or F_S_BO type F-block.
2. In the F-shutdown group to which data is to be transferred, add an F_R_R or F_R_BO type F-block.
3. Interconnect the SD_R_xx inputs of the F_S_R or the SD_BO_xx inputs of the F_S_BO with the data to be transferred.
4. Interconnect the RD_R_xx outputs of the F_R_R or the RD_BO_xx outputs of the F_R_BO with the inputs of the F-block for further processing of the data received.
5. Interconnect the S_DB output of the send block with the S_DB input of the associated receive block.
6. Configure the TIMEOUT inputs of the F_R_R and F_R_BO receive blocks with the F-monitoring time calculated.
7. Configure the receive block substitute values for the scenario of a shutdown of the sending shutdown group.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Extract from a chart for shutdown group 1 with send block:

|42617|7ail-|7133 Cor|CHLDEA F|1e-0- Ck_INE|
|---|---|---|---|---|
|JdEO|90_8o_|J0_EO|90_BO|JD_Bo_|
|11_112|J0_EO_07|32_80_08|7193 Coz|CHLDEA|
|Q_EAII|4212 bloel|PaJJ_CX|0_Kod|ubSime|
|4nu|Lou|JG RG|P3c >| |

The connection to shutdown group 2 is established by linking output S_DB of block F_S_BO_1 in shutdown group 1 with input S_DB on block F_R_BO_1 in shutdown group 2.

Extract from a chart for shutdown group 2 with receive block:

|Xbaeha|32430|netr|
|---|---|---|
|314 = doxr|3281p|REC_E?|
|Recei|ER EL|RD_BO_|
|RD_BO_|8088Q_01|RD_EQ|
|RD_E?|302ZD|RD_Lo|

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

89

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.7 Data exchange between the F user program and standard user program

The standard program and the F-program use different data formats. Accordingly, special conversion blocks have to be used for data exchange.

F-CPU
F-program
Conversion blocks
Standard program
Converting F-data types to standard data types

If you need the standard user program to process data from the F-program further (for monitoring on the PCS 7 OS, for example), a block for F_FDatatype_Datatype data conversion will have to be interconnected in the user program so that the F-data types can be converted into standard data types. This converter blocks must be called in the standard user program (standard runtime group).

Extract from a process tag chart; converting the ""QBAD"" signal from F_BOOL to BOOL:

Note

The figure is available in its original size as appendix to the manual in the ZIP download of the checklists.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Standard and F-blocks are in different runtime groups. As shown here, some F-blocks have outputs (depicted in gray), which can be directly interconnected with standard PCS 7 blocks. PCS 7 blocks such as MonAnL, MonDiL, EventMESSAGE and their associated faceplates and process symbols are used to visualize fail-safe analog values and status messages as well as system states and operating states. If parameters cannot be directly further interconnected due to the safety data format, the conversion blocks described above can be used.

# Converting standard data types into F-data types

If data from the standard user program is to be processed further in the F-program, it will need to be converted. The blocks for data conversion from standard data types to F-data types (F_datatype_Fdatatype) can only be used in the F-program (F-runtime group).

Extract from an F-chart, conversion from REAL to F_REAL:

|7_R_FR_CONv|R -B|CE 32|CB39|:RELL|Aulci|
|---|---|---|---|---|---|
|DAII ZROC3?|VALUE DiT| | | | |

Note: The conversion blocks only perform data conversion; in other words, you will need to program additional measures in the F-program for plausibility checking purposes (with F_LIM_R, for example), in order to ensure that only non-hazardous values are possible.

# 7.2.8 How F-blocks with floating-point operations respond to number range overflows

Within the context of analog value processing, number range overflows/underflows can occur during arithmetic calculations (with division by 0, root from a negative number or number range overflow). With S7 F Systems Lib V1_3 and higher, the response is as follows in this case: The results ""Overflow (± infinite)"", ""Denormalized floating-point number"" or ""Invalid floating-point number (NaN)"" are:

- Either output at the output and can be processed further by subsequent F blocks
- Or signaled to special outputs. A substitute value is output if necessary.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

91

# Configuring the safety program

# 7.2 Creating the safety program

If the floating-point operation produces an invalid floating-point number (NaN) and no invalid floating-point number (NaN) existed as an address prior to this, the following diagnostics event will be entered in the F CPU's diagnostic buffer:

""Safety program: Invalid REAL number in DB"" (event ID 16#75D9)

You can use this entry in the diagnostic buffer to identify the F block with the invalid floating-point number (NaN).

If you are not able to prevent these events from occurring in your safety program, you will need to decide, on the basis of your application, whether you wish to respond to them in your safety program.

|AD?|nddie|101.o = 101.0_|10o.0|-10q|CUIL|5035|
|---|---|---|---|---|---|---|
|AD?|indoic|0b37 1.0e+3e|:Addle|0etz|3.0e-3e|10o.0|
| |100.0|3.0e-38| |CUIL|AD_|:itis|
|0837i|LIN_R|08371|#Addic|3402-32|c0m| |
| |ce-JE| |CUII|Sms|AD?|0BJ7i|
|Addue|J1o|~10O|02-J8|~100.0|CuTO|100.0=|
|DIV|LIK_R|:tris|100.0_| |100.-|CutQ|
|0.0|502S|SoRT|HXR|:Squo-|{AJi|hal|
|-10o.05|CVIQ|CUIL|5023_W| | | |

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.3 Configuring fail-safe AS-AS communication

You can use the F_LIM_R F block to check the result of a floating-point operation for overflow (± infinite) and invalid floating-point number (NaN).

- A limit violation is indicated by IN &gt; MAX or ""+ infinite"". ",What principle must always be observed when placing F-channel drivers and F-blocks for user logic in the safety program?,A2,"Observing the IPO principle (input, process, output) is mandatory.",1.9140625,1.9296875,3.40625,1.2421875,0.3203125
37,pcs7_compendium_part_b_en-US_en-US.txt,37,5dea5c3b1bc7a2a2d3707ace8a7d6e3ed157196366f8ee88ba630fadc3d36b0e,"Changes to the input parameters of F blocks with F data types can be made as follows:

- Offline with the assistance of the CFC editor
- Online using CFC test mode with safety mode deactivated

Note

Values of PAR_ID and COMPLEM must not be changed. If errors in the safety data format are detected during the execution of the safety program, an F-STOP is triggered.

# 7.2.4 Run sequence of F-blocks

# Defining the run sequence

You define the run sequence in the CFC editor in the same way as for a standard user program. Changing the run sequence also changes the collective signature.

# Correct run sequence of F-blocks

The sequence of the F-blocks within the F-shutdown group is relevant. The number of F-runtime groups the F-shutdown group has been split into is of no relevance. Essentially, the correct run sequence of the various F-block types is as follows:

1. Placed automatically:
- F module driver for F-signal modules with inputs or with inputs and outputs
- F-communications blocks and F-system blocks for receiving
- F blocks for data conversion from standard value to F-structure
- F modules with OS connection
2. F channel drivers for inputs
3. F blocks for user logic

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

1. F channel drivers for outputs
2. Placed automatically:
- F block F_PLK
- F block F_PSG_M
- F module driver for F-signal modules with outputs or with inputs and outputs
- F-communications blocks and F-system blocks for sending
- F block F_PLK_O
- F block F_DIAG (S7 F-Systems Lib V1_3 and higher)

The run sequence of the blocks listed under items 1 and 5 is adjusted automatically when the F-program is compiled.
As if S7 F Systems Lib V1_3, separate runtime groups are created for the F blocks listed under points 1 and 5 during the first compilation.
The IPO principle (input, process, output) must always be observed when placing F-channel drivers and F-blocks for user logic.
This ensures that all inputs are read first, the relevant processing steps are performed, and all outputs are then written.
Furthermore, F-runtime groups and F-monitoring blocks that are only visible following compilation are also added automatically.

Note

No changes may be made in the automatically added runtime groups with the exception of the scan cycle monitoring on ""F_CYC_CO"" blocks and the parameter assignment of the ""F_SHUTDN"" block.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.5 F-runtime groups

During the programming of the safety program, F-blocks cannot be inserted directly into tasks (cyclic interrupt OBs). When a new CFC chart is created in PCS 7, the system will automatically generate a runtime group of the same name, into which the F-blocks placed in the corresponding CFC chart can then be inserted. An F-runtime group only becomes an F-runtime group (identified by a yellow folder and ""F"") when F-blocks are called in it.

0B37 [Cyclic interrupt7] (300 ms)
@CPU_RTI@CPU_RT
@F_ShutDn_37 (300 ms)
@F_ShutDn (300 ms)
CycCo-QB37 (300 ms)
CycCo-OB3ZIF_CYC_CO-OB37
@F_CycCo-OB3ZIF_TEST
@F_CycCo-OB37IF_TESTC
@F_TestMode (300 ms)
@F_IN_37_0 (300 ms)
SFC_109_F (300 ms)
AI_F (300 ms)
HS104_F (300 ms)
@F_OUT_37_0 (300 ms)
@F_DbIniti (300 ms)
0B38 [Cycic interrupta] (10 ms)

# Runtime groups of an F-program

The F-program is divided into several runtime groups, as shown in the table below.

Note

xx = Number of the cyclic interrupt OB

y = Consecutive numbering if several shutdown groups exist in a single cyclic interrupt OB

|Chart|F blocks|
|---|---|
|@F_ShutDn_xx|Shutdown logic of cyclic interrupt OB The shutdown logic is created with RTGLOGIC and standard logic blocks.|
|@F_ShutDn|Shutdown block Where an F-program is present in several cyclic interrupt OBs, this runtime group is integrated into the cyclic interrupt OB with the shortest call time. The shutdown logic is created with F_SHUTDN, RTGLOGIC, and standard logic blocks.|
|@F_CycCo-OBxx|F_CYC_CO, F_TEST and F_TESTC (for tests)|
|@F_TestMode|F_TESTM for managing safety mode|
|@F_IN_xx_y|F blocks which supply input values for the F-program (F_QUITES, communication receive blocks, conversion blocks from standard to F-data types, drivers for F-input modules) Runtime groups with user logic, in the sequence in which they were created by the user|

Compendium Part B - Process Safety (V9.0)
Operating Manual, 04/2018, A5E43228905-AA

# 7.2 Creating the safety program

@F_OUT_xx_y Blocks which further process output values of F-blocks (communication send blocks, conversion blocks from F-to standard data types, drivers for F-output modules, F_PLK, F_PLK_O, and F_DIAG for program sequence control)

@F_DbInitxx DB_INIT function block required for the cold restart of an F-runtime group

All required error OBs are added to the block container in the SIMATIC Manager.

There should only be one @F_IN_xx_y runtime group before the first F-user runtime group and one @F_OUT_xx_y runtime group after the last F-user runtime group. If the safety program consists of several shutdown groups (see section 6.2.6 (Page 87)), there is the @F_IN_xx_y and @F_OUT_xx_y runtime group both before and after the F-user runtime group in the shutdown groups.

# Rules for F-runtime groups in the safety program

- We recommend that you proceed as follows in order to make the lengths of the F-cycles as uniform as possible:
If you mix F-and standard runtime groups in a cyclic interrupt OB, you must execute the F-runtime groups before the standard runtime groups.
- The following defaults are set for properties of an F-runtime group:
- Reduction ratio = 1
- Phase offset = 0
- Properties Runtime Group
- Task: 0B37
- Name: HS104
- Comment:
- Reduction ratio:
- Phase offset:
- Optimize run sequence
- Active:
- You are not permitted to move automatically generated F-runtime groups (identified by @).

Note: The feature: Optimize Run Sequence in CFC can lead to a change in the collective signature and impair the response times of the safety program, and therefore should not be used in F-runtime groups.

With PCS 7 V7.0 SP1 and higher, it is no longer possible to optimize the run sequence for cyclic interrupt OBs with F-runtime groups.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.6 F-shutdown groups

An F-shutdown group is a self-contained unit in your safety program. It contains user logic which is executed or shut down simultaneously. The F-shutdown group contains one or a number of F-runtime groups which are assigned to a common cyclic interrupt OB. You can choose whether an error during execution of the safety program causes a full shutdown or a partial shutdown of the safety program. With a partial shutdown, only the F-shutdown group in which the error occurred is shut down.

# Rules for F-shutdown groups in the safety program

You are not permitted to directly interconnect F-blocks in different F-shutdown groups. Data can only be exchanged between F-shutdown groups using special communication blocks (F_S_xx, F_R_xx for F_BOOL and F_REAL data structures). Therefore, all F-channel drivers in an F-signal module must be in the same F-shutdown group, together with the module driver of the F-signal module.

# Defining F-shutdown groups

As soon as you place F-blocks in the CFC editor for the first time, all of the F-runtime groups in a single cyclic interrupt OB will form an F-shutdown group. You can configure each F-runtime group as the last F-runtime group in an F-shutdown group by placing the F_PSG_M ""selection block"". The F-system then creates a new F-shutdown group for all subsequent F-runtime groups until another F_PSG_M block is found.

# Distribution/Combination by means of manual placing of F_PSG_M

If you add or delete one or a number of F_PSG_M blocks in your project, the order of your F-shutdown groups will change. If you make a change to the layout of your F-shutdown groups, you must make sure that the F-module drivers and all assigned F-channel drivers are integrated in the same F-shutdown group. You can split one F-shutdown group into two F-shutdown groups. To do this, in the CFC editor's runtime editor, place the F_PSG_M block in the last F-runtime group which is to be assigned to the first F-shutdown group. All subsequent F-runtime groups will then be assigned to the second F-shutdown group. The number of F-shutdown groups is limited to 110 in all cyclic interrupt OBs. The system restricts the number of F-runtime groups in an F-shutdown group. You have the option of combining two F-shutdown groups. To do this, in the runtime editor of the CFC editor, delete the F_PSG_M block between the F-shutdown groups. If you combine a number of F-shutdown groups which exchange data via F-communication blocks in a single F-shutdown group, you need to remove these F-communications blocks and replace them with direct interconnections.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# Programming data exchange between F-shutdown groups

If you wish to exchange data between two F-shutdown groups, you are not permitted to interconnect the inputs and outputs directly. You need to use the following F-system blocks for data exchange between F blocks in different F-shutdown groups:

|F block|Description|
|---|---|
|F_S_R/F_R_R|Safe transfer of 5 data of the F_REAL type|
|F_S_BO/F_R_BO|Safe transfer of 5 data of the F_BOOL type|

# Procedure for data exchange

1. In the F-shutdown group from which data is to be transferred, add an F_S_R or F_S_BO type F-block.
2. In the F-shutdown group to which data is to be transferred, add an F_R_R or F_R_BO type F-block.
3. Interconnect the SD_R_xx inputs of the F_S_R or the SD_BO_xx inputs of the F_S_BO with the data to be transferred.
4. Interconnect the RD_R_xx outputs of the F_R_R or the RD_BO_xx outputs of the F_R_BO with the inputs of the F-block for further processing of the data received.
5. Interconnect the S_DB output of the send block with the S_DB input of the associated receive block.
6. Configure the TIMEOUT inputs of the F_R_R and F_R_BO receive blocks with the F-monitoring time calculated.
7. Configure the receive block substitute values for the scenario of a shutdown of the sending shutdown group.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Extract from a chart for shutdown group 1 with send block:

|42617|7ail-|7133 Cor|CHLDEA F|1e-0- Ck_INE|
|---|---|---|---|---|
|JdEO|90_8o_|J0_EO|90_BO|JD_Bo_|
|11_112|J0_EO_07|32_80_08|7193 Coz|CHLDEA|
|Q_EAII|4212 bloel|PaJJ_CX|0_Kod|ubSime|
|4nu|Lou|JG RG|P3c >| |

The connection to shutdown group 2 is established by linking output S_DB of block F_S_BO_1 in shutdown group 1 with input S_DB on block F_R_BO_1 in shutdown group 2.

Extract from a chart for shutdown group 2 with receive block:

|Xbaeha|32430|netr|
|---|---|---|
|314 = doxr|3281p|REC_E?|
|Recei|ER EL|RD_BO_|
|RD_BO_|8088Q_01|RD_EQ|
|RD_E?|302ZD|RD_Lo|

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

89

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.7 Data exchange between the F user program and standard user program

The standard program and the F-program use different data formats. Accordingly, special conversion blocks have to be used for data exchange.

F-CPU
F-program
Conversion blocks
Standard program
Converting F-data types to standard data types

If you need the standard user program to process data from the F-program further (for monitoring on the PCS 7 OS, for example), a block for F_FDatatype_Datatype data conversion will have to be interconnected in the user program so that the F-data types can be converted into standard data types. This converter blocks must be called in the standard user program (standard runtime group).

Extract from a process tag chart; converting the ""QBAD"" signal from F_BOOL to BOOL:

Note

The figure is available in its original size as appendix to the manual in the ZIP download of the checklists.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Standard and F-blocks are in different runtime groups. As shown here, some F-blocks have outputs (depicted in gray), which can be directly interconnected with standard PCS 7 blocks. PCS 7 blocks such as MonAnL, MonDiL, EventMESSAGE and their associated faceplates and process symbols are used to visualize fail-safe analog values and status messages as well as system states and operating states. If parameters cannot be directly further interconnected due to the safety data format, the conversion blocks described above can be used.

# Converting standard data types into F-data types

If data from the standard user program is to be processed further in the F-program, it will need to be converted. The blocks for data conversion from standard data types to F-data types (F_datatype_Fdatatype) can only be used in the F-program (F-runtime group).

Extract from an F-chart, conversion from REAL to F_REAL:

|7_R_FR_CONv|R -B|CE 32|CB39|:RELL|Aulci|
|---|---|---|---|---|---|
|DAII ZROC3?|VALUE DiT| | | | |

Note: The conversion blocks only perform data conversion; in other words, you will need to program additional measures in the F-program for plausibility checking purposes (with F_LIM_R, for example), in order to ensure that only non-hazardous values are possible.

# 7.2.8 How F-blocks with floating-point operations respond to number range overflows

Within the context of analog value processing, number range overflows/underflows can occur during arithmetic calculations (with division by 0, root from a negative number or number range overflow). With S7 F Systems Lib V1_3 and higher, the response is as follows in this case: The results ""Overflow (± infinite)"", ""Denormalized floating-point number"" or ""Invalid floating-point number (NaN)"" are:

- Either output at the output and can be processed further by subsequent F blocks
- Or signaled to special outputs. A substitute value is output if necessary.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

91

# Configuring the safety program

# 7.2 Creating the safety program

If the floating-point operation produces an invalid floating-point number (NaN) and no invalid floating-point number (NaN) existed as an address prior to this, the following diagnostics event will be entered in the F CPU's diagnostic buffer:

""Safety program: Invalid REAL number in DB"" (event ID 16#75D9)

You can use this entry in the diagnostic buffer to identify the F block with the invalid floating-point number (NaN).

If you are not able to prevent these events from occurring in your safety program, you will need to decide, on the basis of your application, whether you wish to respond to them in your safety program.

|AD?|nddie|101.o = 101.0_|10o.0|-10q|CUIL|5035|
|---|---|---|---|---|---|---|
|AD?|indoic|0b37 1.0e+3e|:Addle|0etz|3.0e-3e|10o.0|
| |100.0|3.0e-38| |CUIL|AD_|:itis|
|0837i|LIN_R|08371|#Addic|3402-32|c0m| |
| |ce-JE| |CUII|Sms|AD?|0BJ7i|
|Addue|J1o|~10O|02-J8|~100.0|CuTO|100.0=|
|DIV|LIK_R|:tris|100.0_| |100.-|CutQ|
|0.0|502S|SoRT|HXR|:Squo-|{AJi|hal|
|-10o.05|CVIQ|CUIL|5023_W| | | |

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.3 Configuring fail-safe AS-AS communication

You can use the F_LIM_R F block to check the result of a floating-point operation for overflow (± infinite) and invalid floating-point number (NaN).

- A limit violation is indicated by IN &gt; MAX or ""+ infinite"". ",What principle must always be observed when placing F-channel drivers and F-blocks for user logic in the safety program?,A3,"The IPO principle, covering input, process, and output, must be followed.",1.921875,1.9765625,3.515625,1.2734375,0.291015625
38,pcs7_compendium_part_b_en-US_en-US.txt,37,5dea5c3b1bc7a2a2d3707ace8a7d6e3ed157196366f8ee88ba630fadc3d36b0e,"Changes to the input parameters of F blocks with F data types can be made as follows:

- Offline with the assistance of the CFC editor
- Online using CFC test mode with safety mode deactivated

Note

Values of PAR_ID and COMPLEM must not be changed. If errors in the safety data format are detected during the execution of the safety program, an F-STOP is triggered.

# 7.2.4 Run sequence of F-blocks

# Defining the run sequence

You define the run sequence in the CFC editor in the same way as for a standard user program. Changing the run sequence also changes the collective signature.

# Correct run sequence of F-blocks

The sequence of the F-blocks within the F-shutdown group is relevant. The number of F-runtime groups the F-shutdown group has been split into is of no relevance. Essentially, the correct run sequence of the various F-block types is as follows:

1. Placed automatically:
- F module driver for F-signal modules with inputs or with inputs and outputs
- F-communications blocks and F-system blocks for receiving
- F blocks for data conversion from standard value to F-structure
- F modules with OS connection
2. F channel drivers for inputs
3. F blocks for user logic

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

1. F channel drivers for outputs
2. Placed automatically:
- F block F_PLK
- F block F_PSG_M
- F module driver for F-signal modules with outputs or with inputs and outputs
- F-communications blocks and F-system blocks for sending
- F block F_PLK_O
- F block F_DIAG (S7 F-Systems Lib V1_3 and higher)

The run sequence of the blocks listed under items 1 and 5 is adjusted automatically when the F-program is compiled.
As if S7 F Systems Lib V1_3, separate runtime groups are created for the F blocks listed under points 1 and 5 during the first compilation.
The IPO principle (input, process, output) must always be observed when placing F-channel drivers and F-blocks for user logic.
This ensures that all inputs are read first, the relevant processing steps are performed, and all outputs are then written.
Furthermore, F-runtime groups and F-monitoring blocks that are only visible following compilation are also added automatically.

Note

No changes may be made in the automatically added runtime groups with the exception of the scan cycle monitoring on ""F_CYC_CO"" blocks and the parameter assignment of the ""F_SHUTDN"" block.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.5 F-runtime groups

During the programming of the safety program, F-blocks cannot be inserted directly into tasks (cyclic interrupt OBs). When a new CFC chart is created in PCS 7, the system will automatically generate a runtime group of the same name, into which the F-blocks placed in the corresponding CFC chart can then be inserted. An F-runtime group only becomes an F-runtime group (identified by a yellow folder and ""F"") when F-blocks are called in it.

0B37 [Cyclic interrupt7] (300 ms)
@CPU_RTI@CPU_RT
@F_ShutDn_37 (300 ms)
@F_ShutDn (300 ms)
CycCo-QB37 (300 ms)
CycCo-OB3ZIF_CYC_CO-OB37
@F_CycCo-OB3ZIF_TEST
@F_CycCo-OB37IF_TESTC
@F_TestMode (300 ms)
@F_IN_37_0 (300 ms)
SFC_109_F (300 ms)
AI_F (300 ms)
HS104_F (300 ms)
@F_OUT_37_0 (300 ms)
@F_DbIniti (300 ms)
0B38 [Cycic interrupta] (10 ms)

# Runtime groups of an F-program

The F-program is divided into several runtime groups, as shown in the table below.

Note

xx = Number of the cyclic interrupt OB

y = Consecutive numbering if several shutdown groups exist in a single cyclic interrupt OB

|Chart|F blocks|
|---|---|
|@F_ShutDn_xx|Shutdown logic of cyclic interrupt OB The shutdown logic is created with RTGLOGIC and standard logic blocks.|
|@F_ShutDn|Shutdown block Where an F-program is present in several cyclic interrupt OBs, this runtime group is integrated into the cyclic interrupt OB with the shortest call time. The shutdown logic is created with F_SHUTDN, RTGLOGIC, and standard logic blocks.|
|@F_CycCo-OBxx|F_CYC_CO, F_TEST and F_TESTC (for tests)|
|@F_TestMode|F_TESTM for managing safety mode|
|@F_IN_xx_y|F blocks which supply input values for the F-program (F_QUITES, communication receive blocks, conversion blocks from standard to F-data types, drivers for F-input modules) Runtime groups with user logic, in the sequence in which they were created by the user|

Compendium Part B - Process Safety (V9.0)
Operating Manual, 04/2018, A5E43228905-AA

# 7.2 Creating the safety program

@F_OUT_xx_y Blocks which further process output values of F-blocks (communication send blocks, conversion blocks from F-to standard data types, drivers for F-output modules, F_PLK, F_PLK_O, and F_DIAG for program sequence control)

@F_DbInitxx DB_INIT function block required for the cold restart of an F-runtime group

All required error OBs are added to the block container in the SIMATIC Manager.

There should only be one @F_IN_xx_y runtime group before the first F-user runtime group and one @F_OUT_xx_y runtime group after the last F-user runtime group. If the safety program consists of several shutdown groups (see section 6.2.6 (Page 87)), there is the @F_IN_xx_y and @F_OUT_xx_y runtime group both before and after the F-user runtime group in the shutdown groups.

# Rules for F-runtime groups in the safety program

- We recommend that you proceed as follows in order to make the lengths of the F-cycles as uniform as possible:
If you mix F-and standard runtime groups in a cyclic interrupt OB, you must execute the F-runtime groups before the standard runtime groups.
- The following defaults are set for properties of an F-runtime group:
- Reduction ratio = 1
- Phase offset = 0
- Properties Runtime Group
- Task: 0B37
- Name: HS104
- Comment:
- Reduction ratio:
- Phase offset:
- Optimize run sequence
- Active:
- You are not permitted to move automatically generated F-runtime groups (identified by @).

Note: The feature: Optimize Run Sequence in CFC can lead to a change in the collective signature and impair the response times of the safety program, and therefore should not be used in F-runtime groups.

With PCS 7 V7.0 SP1 and higher, it is no longer possible to optimize the run sequence for cyclic interrupt OBs with F-runtime groups.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.6 F-shutdown groups

An F-shutdown group is a self-contained unit in your safety program. It contains user logic which is executed or shut down simultaneously. The F-shutdown group contains one or a number of F-runtime groups which are assigned to a common cyclic interrupt OB. You can choose whether an error during execution of the safety program causes a full shutdown or a partial shutdown of the safety program. With a partial shutdown, only the F-shutdown group in which the error occurred is shut down.

# Rules for F-shutdown groups in the safety program

You are not permitted to directly interconnect F-blocks in different F-shutdown groups. Data can only be exchanged between F-shutdown groups using special communication blocks (F_S_xx, F_R_xx for F_BOOL and F_REAL data structures). Therefore, all F-channel drivers in an F-signal module must be in the same F-shutdown group, together with the module driver of the F-signal module.

# Defining F-shutdown groups

As soon as you place F-blocks in the CFC editor for the first time, all of the F-runtime groups in a single cyclic interrupt OB will form an F-shutdown group. You can configure each F-runtime group as the last F-runtime group in an F-shutdown group by placing the F_PSG_M ""selection block"". The F-system then creates a new F-shutdown group for all subsequent F-runtime groups until another F_PSG_M block is found.

# Distribution/Combination by means of manual placing of F_PSG_M

If you add or delete one or a number of F_PSG_M blocks in your project, the order of your F-shutdown groups will change. If you make a change to the layout of your F-shutdown groups, you must make sure that the F-module drivers and all assigned F-channel drivers are integrated in the same F-shutdown group. You can split one F-shutdown group into two F-shutdown groups. To do this, in the CFC editor's runtime editor, place the F_PSG_M block in the last F-runtime group which is to be assigned to the first F-shutdown group. All subsequent F-runtime groups will then be assigned to the second F-shutdown group. The number of F-shutdown groups is limited to 110 in all cyclic interrupt OBs. The system restricts the number of F-runtime groups in an F-shutdown group. You have the option of combining two F-shutdown groups. To do this, in the runtime editor of the CFC editor, delete the F_PSG_M block between the F-shutdown groups. If you combine a number of F-shutdown groups which exchange data via F-communication blocks in a single F-shutdown group, you need to remove these F-communications blocks and replace them with direct interconnections.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# Programming data exchange between F-shutdown groups

If you wish to exchange data between two F-shutdown groups, you are not permitted to interconnect the inputs and outputs directly. You need to use the following F-system blocks for data exchange between F blocks in different F-shutdown groups:

|F block|Description|
|---|---|
|F_S_R/F_R_R|Safe transfer of 5 data of the F_REAL type|
|F_S_BO/F_R_BO|Safe transfer of 5 data of the F_BOOL type|

# Procedure for data exchange

1. In the F-shutdown group from which data is to be transferred, add an F_S_R or F_S_BO type F-block.
2. In the F-shutdown group to which data is to be transferred, add an F_R_R or F_R_BO type F-block.
3. Interconnect the SD_R_xx inputs of the F_S_R or the SD_BO_xx inputs of the F_S_BO with the data to be transferred.
4. Interconnect the RD_R_xx outputs of the F_R_R or the RD_BO_xx outputs of the F_R_BO with the inputs of the F-block for further processing of the data received.
5. Interconnect the S_DB output of the send block with the S_DB input of the associated receive block.
6. Configure the TIMEOUT inputs of the F_R_R and F_R_BO receive blocks with the F-monitoring time calculated.
7. Configure the receive block substitute values for the scenario of a shutdown of the sending shutdown group.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Extract from a chart for shutdown group 1 with send block:

|42617|7ail-|7133 Cor|CHLDEA F|1e-0- Ck_INE|
|---|---|---|---|---|
|JdEO|90_8o_|J0_EO|90_BO|JD_Bo_|
|11_112|J0_EO_07|32_80_08|7193 Coz|CHLDEA|
|Q_EAII|4212 bloel|PaJJ_CX|0_Kod|ubSime|
|4nu|Lou|JG RG|P3c >| |

The connection to shutdown group 2 is established by linking output S_DB of block F_S_BO_1 in shutdown group 1 with input S_DB on block F_R_BO_1 in shutdown group 2.

Extract from a chart for shutdown group 2 with receive block:

|Xbaeha|32430|netr|
|---|---|---|
|314 = doxr|3281p|REC_E?|
|Recei|ER EL|RD_BO_|
|RD_BO_|8088Q_01|RD_EQ|
|RD_E?|302ZD|RD_Lo|

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

89

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.7 Data exchange between the F user program and standard user program

The standard program and the F-program use different data formats. Accordingly, special conversion blocks have to be used for data exchange.

F-CPU
F-program
Conversion blocks
Standard program
Converting F-data types to standard data types

If you need the standard user program to process data from the F-program further (for monitoring on the PCS 7 OS, for example), a block for F_FDatatype_Datatype data conversion will have to be interconnected in the user program so that the F-data types can be converted into standard data types. This converter blocks must be called in the standard user program (standard runtime group).

Extract from a process tag chart; converting the ""QBAD"" signal from F_BOOL to BOOL:

Note

The figure is available in its original size as appendix to the manual in the ZIP download of the checklists.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Standard and F-blocks are in different runtime groups. As shown here, some F-blocks have outputs (depicted in gray), which can be directly interconnected with standard PCS 7 blocks. PCS 7 blocks such as MonAnL, MonDiL, EventMESSAGE and their associated faceplates and process symbols are used to visualize fail-safe analog values and status messages as well as system states and operating states. If parameters cannot be directly further interconnected due to the safety data format, the conversion blocks described above can be used.

# Converting standard data types into F-data types

If data from the standard user program is to be processed further in the F-program, it will need to be converted. The blocks for data conversion from standard data types to F-data types (F_datatype_Fdatatype) can only be used in the F-program (F-runtime group).

Extract from an F-chart, conversion from REAL to F_REAL:

|7_R_FR_CONv|R -B|CE 32|CB39|:RELL|Aulci|
|---|---|---|---|---|---|
|DAII ZROC3?|VALUE DiT| | | | |

Note: The conversion blocks only perform data conversion; in other words, you will need to program additional measures in the F-program for plausibility checking purposes (with F_LIM_R, for example), in order to ensure that only non-hazardous values are possible.

# 7.2.8 How F-blocks with floating-point operations respond to number range overflows

Within the context of analog value processing, number range overflows/underflows can occur during arithmetic calculations (with division by 0, root from a negative number or number range overflow). With S7 F Systems Lib V1_3 and higher, the response is as follows in this case: The results ""Overflow (± infinite)"", ""Denormalized floating-point number"" or ""Invalid floating-point number (NaN)"" are:

- Either output at the output and can be processed further by subsequent F blocks
- Or signaled to special outputs. A substitute value is output if necessary.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

91

# Configuring the safety program

# 7.2 Creating the safety program

If the floating-point operation produces an invalid floating-point number (NaN) and no invalid floating-point number (NaN) existed as an address prior to this, the following diagnostics event will be entered in the F CPU's diagnostic buffer:

""Safety program: Invalid REAL number in DB"" (event ID 16#75D9)

You can use this entry in the diagnostic buffer to identify the F block with the invalid floating-point number (NaN).

If you are not able to prevent these events from occurring in your safety program, you will need to decide, on the basis of your application, whether you wish to respond to them in your safety program.

|AD?|nddie|101.o = 101.0_|10o.0|-10q|CUIL|5035|
|---|---|---|---|---|---|---|
|AD?|indoic|0b37 1.0e+3e|:Addle|0etz|3.0e-3e|10o.0|
| |100.0|3.0e-38| |CUIL|AD_|:itis|
|0837i|LIN_R|08371|#Addic|3402-32|c0m| |
| |ce-JE| |CUII|Sms|AD?|0BJ7i|
|Addue|J1o|~10O|02-J8|~100.0|CuTO|100.0=|
|DIV|LIK_R|:tris|100.0_| |100.-|CutQ|
|0.0|502S|SoRT|HXR|:Squo-|{AJi|hal|
|-10o.05|CVIQ|CUIL|5023_W| | | |

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.3 Configuring fail-safe AS-AS communication

You can use the F_LIM_R F block to check the result of a floating-point operation for overflow (± infinite) and invalid floating-point number (NaN).

- A limit violation is indicated by IN &gt; MAX or ""+ infinite"". ",What principle must always be observed when placing F-channel drivers and F-blocks for user logic in the safety program?,A4,"It's essential to adhere to the IPO principle: input, process, output.",1.1953125,1.2734375,3.265625,1.1484375,0.1943359375
39,pcs7_compendium_part_b_en-US_en-US.txt,37,5dea5c3b1bc7a2a2d3707ace8a7d6e3ed157196366f8ee88ba630fadc3d36b0e,"Changes to the input parameters of F blocks with F data types can be made as follows:

- Offline with the assistance of the CFC editor
- Online using CFC test mode with safety mode deactivated

Note

Values of PAR_ID and COMPLEM must not be changed. If errors in the safety data format are detected during the execution of the safety program, an F-STOP is triggered.

# 7.2.4 Run sequence of F-blocks

# Defining the run sequence

You define the run sequence in the CFC editor in the same way as for a standard user program. Changing the run sequence also changes the collective signature.

# Correct run sequence of F-blocks

The sequence of the F-blocks within the F-shutdown group is relevant. The number of F-runtime groups the F-shutdown group has been split into is of no relevance. Essentially, the correct run sequence of the various F-block types is as follows:

1. Placed automatically:
- F module driver for F-signal modules with inputs or with inputs and outputs
- F-communications blocks and F-system blocks for receiving
- F blocks for data conversion from standard value to F-structure
- F modules with OS connection
2. F channel drivers for inputs
3. F blocks for user logic

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

1. F channel drivers for outputs
2. Placed automatically:
- F block F_PLK
- F block F_PSG_M
- F module driver for F-signal modules with outputs or with inputs and outputs
- F-communications blocks and F-system blocks for sending
- F block F_PLK_O
- F block F_DIAG (S7 F-Systems Lib V1_3 and higher)

The run sequence of the blocks listed under items 1 and 5 is adjusted automatically when the F-program is compiled.
As if S7 F Systems Lib V1_3, separate runtime groups are created for the F blocks listed under points 1 and 5 during the first compilation.
The IPO principle (input, process, output) must always be observed when placing F-channel drivers and F-blocks for user logic.
This ensures that all inputs are read first, the relevant processing steps are performed, and all outputs are then written.
Furthermore, F-runtime groups and F-monitoring blocks that are only visible following compilation are also added automatically.

Note

No changes may be made in the automatically added runtime groups with the exception of the scan cycle monitoring on ""F_CYC_CO"" blocks and the parameter assignment of the ""F_SHUTDN"" block.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.5 F-runtime groups

During the programming of the safety program, F-blocks cannot be inserted directly into tasks (cyclic interrupt OBs). When a new CFC chart is created in PCS 7, the system will automatically generate a runtime group of the same name, into which the F-blocks placed in the corresponding CFC chart can then be inserted. An F-runtime group only becomes an F-runtime group (identified by a yellow folder and ""F"") when F-blocks are called in it.

0B37 [Cyclic interrupt7] (300 ms)
@CPU_RTI@CPU_RT
@F_ShutDn_37 (300 ms)
@F_ShutDn (300 ms)
CycCo-QB37 (300 ms)
CycCo-OB3ZIF_CYC_CO-OB37
@F_CycCo-OB3ZIF_TEST
@F_CycCo-OB37IF_TESTC
@F_TestMode (300 ms)
@F_IN_37_0 (300 ms)
SFC_109_F (300 ms)
AI_F (300 ms)
HS104_F (300 ms)
@F_OUT_37_0 (300 ms)
@F_DbIniti (300 ms)
0B38 [Cycic interrupta] (10 ms)

# Runtime groups of an F-program

The F-program is divided into several runtime groups, as shown in the table below.

Note

xx = Number of the cyclic interrupt OB

y = Consecutive numbering if several shutdown groups exist in a single cyclic interrupt OB

|Chart|F blocks|
|---|---|
|@F_ShutDn_xx|Shutdown logic of cyclic interrupt OB The shutdown logic is created with RTGLOGIC and standard logic blocks.|
|@F_ShutDn|Shutdown block Where an F-program is present in several cyclic interrupt OBs, this runtime group is integrated into the cyclic interrupt OB with the shortest call time. The shutdown logic is created with F_SHUTDN, RTGLOGIC, and standard logic blocks.|
|@F_CycCo-OBxx|F_CYC_CO, F_TEST and F_TESTC (for tests)|
|@F_TestMode|F_TESTM for managing safety mode|
|@F_IN_xx_y|F blocks which supply input values for the F-program (F_QUITES, communication receive blocks, conversion blocks from standard to F-data types, drivers for F-input modules) Runtime groups with user logic, in the sequence in which they were created by the user|

Compendium Part B - Process Safety (V9.0)
Operating Manual, 04/2018, A5E43228905-AA

# 7.2 Creating the safety program

@F_OUT_xx_y Blocks which further process output values of F-blocks (communication send blocks, conversion blocks from F-to standard data types, drivers for F-output modules, F_PLK, F_PLK_O, and F_DIAG for program sequence control)

@F_DbInitxx DB_INIT function block required for the cold restart of an F-runtime group

All required error OBs are added to the block container in the SIMATIC Manager.

There should only be one @F_IN_xx_y runtime group before the first F-user runtime group and one @F_OUT_xx_y runtime group after the last F-user runtime group. If the safety program consists of several shutdown groups (see section 6.2.6 (Page 87)), there is the @F_IN_xx_y and @F_OUT_xx_y runtime group both before and after the F-user runtime group in the shutdown groups.

# Rules for F-runtime groups in the safety program

- We recommend that you proceed as follows in order to make the lengths of the F-cycles as uniform as possible:
If you mix F-and standard runtime groups in a cyclic interrupt OB, you must execute the F-runtime groups before the standard runtime groups.
- The following defaults are set for properties of an F-runtime group:
- Reduction ratio = 1
- Phase offset = 0
- Properties Runtime Group
- Task: 0B37
- Name: HS104
- Comment:
- Reduction ratio:
- Phase offset:
- Optimize run sequence
- Active:
- You are not permitted to move automatically generated F-runtime groups (identified by @).

Note: The feature: Optimize Run Sequence in CFC can lead to a change in the collective signature and impair the response times of the safety program, and therefore should not be used in F-runtime groups.

With PCS 7 V7.0 SP1 and higher, it is no longer possible to optimize the run sequence for cyclic interrupt OBs with F-runtime groups.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.6 F-shutdown groups

An F-shutdown group is a self-contained unit in your safety program. It contains user logic which is executed or shut down simultaneously. The F-shutdown group contains one or a number of F-runtime groups which are assigned to a common cyclic interrupt OB. You can choose whether an error during execution of the safety program causes a full shutdown or a partial shutdown of the safety program. With a partial shutdown, only the F-shutdown group in which the error occurred is shut down.

# Rules for F-shutdown groups in the safety program

You are not permitted to directly interconnect F-blocks in different F-shutdown groups. Data can only be exchanged between F-shutdown groups using special communication blocks (F_S_xx, F_R_xx for F_BOOL and F_REAL data structures). Therefore, all F-channel drivers in an F-signal module must be in the same F-shutdown group, together with the module driver of the F-signal module.

# Defining F-shutdown groups

As soon as you place F-blocks in the CFC editor for the first time, all of the F-runtime groups in a single cyclic interrupt OB will form an F-shutdown group. You can configure each F-runtime group as the last F-runtime group in an F-shutdown group by placing the F_PSG_M ""selection block"". The F-system then creates a new F-shutdown group for all subsequent F-runtime groups until another F_PSG_M block is found.

# Distribution/Combination by means of manual placing of F_PSG_M

If you add or delete one or a number of F_PSG_M blocks in your project, the order of your F-shutdown groups will change. If you make a change to the layout of your F-shutdown groups, you must make sure that the F-module drivers and all assigned F-channel drivers are integrated in the same F-shutdown group. You can split one F-shutdown group into two F-shutdown groups. To do this, in the CFC editor's runtime editor, place the F_PSG_M block in the last F-runtime group which is to be assigned to the first F-shutdown group. All subsequent F-runtime groups will then be assigned to the second F-shutdown group. The number of F-shutdown groups is limited to 110 in all cyclic interrupt OBs. The system restricts the number of F-runtime groups in an F-shutdown group. You have the option of combining two F-shutdown groups. To do this, in the runtime editor of the CFC editor, delete the F_PSG_M block between the F-shutdown groups. If you combine a number of F-shutdown groups which exchange data via F-communication blocks in a single F-shutdown group, you need to remove these F-communications blocks and replace them with direct interconnections.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# Programming data exchange between F-shutdown groups

If you wish to exchange data between two F-shutdown groups, you are not permitted to interconnect the inputs and outputs directly. You need to use the following F-system blocks for data exchange between F blocks in different F-shutdown groups:

|F block|Description|
|---|---|
|F_S_R/F_R_R|Safe transfer of 5 data of the F_REAL type|
|F_S_BO/F_R_BO|Safe transfer of 5 data of the F_BOOL type|

# Procedure for data exchange

1. In the F-shutdown group from which data is to be transferred, add an F_S_R or F_S_BO type F-block.
2. In the F-shutdown group to which data is to be transferred, add an F_R_R or F_R_BO type F-block.
3. Interconnect the SD_R_xx inputs of the F_S_R or the SD_BO_xx inputs of the F_S_BO with the data to be transferred.
4. Interconnect the RD_R_xx outputs of the F_R_R or the RD_BO_xx outputs of the F_R_BO with the inputs of the F-block for further processing of the data received.
5. Interconnect the S_DB output of the send block with the S_DB input of the associated receive block.
6. Configure the TIMEOUT inputs of the F_R_R and F_R_BO receive blocks with the F-monitoring time calculated.
7. Configure the receive block substitute values for the scenario of a shutdown of the sending shutdown group.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Extract from a chart for shutdown group 1 with send block:

|42617|7ail-|7133 Cor|CHLDEA F|1e-0- Ck_INE|
|---|---|---|---|---|
|JdEO|90_8o_|J0_EO|90_BO|JD_Bo_|
|11_112|J0_EO_07|32_80_08|7193 Coz|CHLDEA|
|Q_EAII|4212 bloel|PaJJ_CX|0_Kod|ubSime|
|4nu|Lou|JG RG|P3c >| |

The connection to shutdown group 2 is established by linking output S_DB of block F_S_BO_1 in shutdown group 1 with input S_DB on block F_R_BO_1 in shutdown group 2.

Extract from a chart for shutdown group 2 with receive block:

|Xbaeha|32430|netr|
|---|---|---|
|314 = doxr|3281p|REC_E?|
|Recei|ER EL|RD_BO_|
|RD_BO_|8088Q_01|RD_EQ|
|RD_E?|302ZD|RD_Lo|

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

89

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.7 Data exchange between the F user program and standard user program

The standard program and the F-program use different data formats. Accordingly, special conversion blocks have to be used for data exchange.

F-CPU
F-program
Conversion blocks
Standard program
Converting F-data types to standard data types

If you need the standard user program to process data from the F-program further (for monitoring on the PCS 7 OS, for example), a block for F_FDatatype_Datatype data conversion will have to be interconnected in the user program so that the F-data types can be converted into standard data types. This converter blocks must be called in the standard user program (standard runtime group).

Extract from a process tag chart; converting the ""QBAD"" signal from F_BOOL to BOOL:

Note

The figure is available in its original size as appendix to the manual in the ZIP download of the checklists.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Standard and F-blocks are in different runtime groups. As shown here, some F-blocks have outputs (depicted in gray), which can be directly interconnected with standard PCS 7 blocks. PCS 7 blocks such as MonAnL, MonDiL, EventMESSAGE and their associated faceplates and process symbols are used to visualize fail-safe analog values and status messages as well as system states and operating states. If parameters cannot be directly further interconnected due to the safety data format, the conversion blocks described above can be used.

# Converting standard data types into F-data types

If data from the standard user program is to be processed further in the F-program, it will need to be converted. The blocks for data conversion from standard data types to F-data types (F_datatype_Fdatatype) can only be used in the F-program (F-runtime group).

Extract from an F-chart, conversion from REAL to F_REAL:

|7_R_FR_CONv|R -B|CE 32|CB39|:RELL|Aulci|
|---|---|---|---|---|---|
|DAII ZROC3?|VALUE DiT| | | | |

Note: The conversion blocks only perform data conversion; in other words, you will need to program additional measures in the F-program for plausibility checking purposes (with F_LIM_R, for example), in order to ensure that only non-hazardous values are possible.

# 7.2.8 How F-blocks with floating-point operations respond to number range overflows

Within the context of analog value processing, number range overflows/underflows can occur during arithmetic calculations (with division by 0, root from a negative number or number range overflow). With S7 F Systems Lib V1_3 and higher, the response is as follows in this case: The results ""Overflow (± infinite)"", ""Denormalized floating-point number"" or ""Invalid floating-point number (NaN)"" are:

- Either output at the output and can be processed further by subsequent F blocks
- Or signaled to special outputs. A substitute value is output if necessary.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

91

# Configuring the safety program

# 7.2 Creating the safety program

If the floating-point operation produces an invalid floating-point number (NaN) and no invalid floating-point number (NaN) existed as an address prior to this, the following diagnostics event will be entered in the F CPU's diagnostic buffer:

""Safety program: Invalid REAL number in DB"" (event ID 16#75D9)

You can use this entry in the diagnostic buffer to identify the F block with the invalid floating-point number (NaN).

If you are not able to prevent these events from occurring in your safety program, you will need to decide, on the basis of your application, whether you wish to respond to them in your safety program.

|AD?|nddie|101.o = 101.0_|10o.0|-10q|CUIL|5035|
|---|---|---|---|---|---|---|
|AD?|indoic|0b37 1.0e+3e|:Addle|0etz|3.0e-3e|10o.0|
| |100.0|3.0e-38| |CUIL|AD_|:itis|
|0837i|LIN_R|08371|#Addic|3402-32|c0m| |
| |ce-JE| |CUII|Sms|AD?|0BJ7i|
|Addue|J1o|~10O|02-J8|~100.0|CuTO|100.0=|
|DIV|LIK_R|:tris|100.0_| |100.-|CutQ|
|0.0|502S|SoRT|HXR|:Squo-|{AJi|hal|
|-10o.05|CVIQ|CUIL|5023_W| | | |

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.3 Configuring fail-safe AS-AS communication

You can use the F_LIM_R F block to check the result of a floating-point operation for overflow (± infinite) and invalid floating-point number (NaN).

- A limit violation is indicated by IN &gt; MAX or ""+ infinite"". ",What principle must always be observed when placing F-channel drivers and F-blocks for user logic in the safety program?,A5,The manual emphasizes the importance of the IPO principle in placement.,1.4375,1.2109375,3.109375,1.0625,0.216796875
40,pcs7_compendium_part_b_en-US_en-US.txt,37,5dea5c3b1bc7a2a2d3707ace8a7d6e3ed157196366f8ee88ba630fadc3d36b0e,"Changes to the input parameters of F blocks with F data types can be made as follows:

- Offline with the assistance of the CFC editor
- Online using CFC test mode with safety mode deactivated

Note

Values of PAR_ID and COMPLEM must not be changed. If errors in the safety data format are detected during the execution of the safety program, an F-STOP is triggered.

# 7.2.4 Run sequence of F-blocks

# Defining the run sequence

You define the run sequence in the CFC editor in the same way as for a standard user program. Changing the run sequence also changes the collective signature.

# Correct run sequence of F-blocks

The sequence of the F-blocks within the F-shutdown group is relevant. The number of F-runtime groups the F-shutdown group has been split into is of no relevance. Essentially, the correct run sequence of the various F-block types is as follows:

1. Placed automatically:
- F module driver for F-signal modules with inputs or with inputs and outputs
- F-communications blocks and F-system blocks for receiving
- F blocks for data conversion from standard value to F-structure
- F modules with OS connection
2. F channel drivers for inputs
3. F blocks for user logic

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

1. F channel drivers for outputs
2. Placed automatically:
- F block F_PLK
- F block F_PSG_M
- F module driver for F-signal modules with outputs or with inputs and outputs
- F-communications blocks and F-system blocks for sending
- F block F_PLK_O
- F block F_DIAG (S7 F-Systems Lib V1_3 and higher)

The run sequence of the blocks listed under items 1 and 5 is adjusted automatically when the F-program is compiled.
As if S7 F Systems Lib V1_3, separate runtime groups are created for the F blocks listed under points 1 and 5 during the first compilation.
The IPO principle (input, process, output) must always be observed when placing F-channel drivers and F-blocks for user logic.
This ensures that all inputs are read first, the relevant processing steps are performed, and all outputs are then written.
Furthermore, F-runtime groups and F-monitoring blocks that are only visible following compilation are also added automatically.

Note

No changes may be made in the automatically added runtime groups with the exception of the scan cycle monitoring on ""F_CYC_CO"" blocks and the parameter assignment of the ""F_SHUTDN"" block.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.5 F-runtime groups

During the programming of the safety program, F-blocks cannot be inserted directly into tasks (cyclic interrupt OBs). When a new CFC chart is created in PCS 7, the system will automatically generate a runtime group of the same name, into which the F-blocks placed in the corresponding CFC chart can then be inserted. An F-runtime group only becomes an F-runtime group (identified by a yellow folder and ""F"") when F-blocks are called in it.

0B37 [Cyclic interrupt7] (300 ms)
@CPU_RTI@CPU_RT
@F_ShutDn_37 (300 ms)
@F_ShutDn (300 ms)
CycCo-QB37 (300 ms)
CycCo-OB3ZIF_CYC_CO-OB37
@F_CycCo-OB3ZIF_TEST
@F_CycCo-OB37IF_TESTC
@F_TestMode (300 ms)
@F_IN_37_0 (300 ms)
SFC_109_F (300 ms)
AI_F (300 ms)
HS104_F (300 ms)
@F_OUT_37_0 (300 ms)
@F_DbIniti (300 ms)
0B38 [Cycic interrupta] (10 ms)

# Runtime groups of an F-program

The F-program is divided into several runtime groups, as shown in the table below.

Note

xx = Number of the cyclic interrupt OB

y = Consecutive numbering if several shutdown groups exist in a single cyclic interrupt OB

|Chart|F blocks|
|---|---|
|@F_ShutDn_xx|Shutdown logic of cyclic interrupt OB The shutdown logic is created with RTGLOGIC and standard logic blocks.|
|@F_ShutDn|Shutdown block Where an F-program is present in several cyclic interrupt OBs, this runtime group is integrated into the cyclic interrupt OB with the shortest call time. The shutdown logic is created with F_SHUTDN, RTGLOGIC, and standard logic blocks.|
|@F_CycCo-OBxx|F_CYC_CO, F_TEST and F_TESTC (for tests)|
|@F_TestMode|F_TESTM for managing safety mode|
|@F_IN_xx_y|F blocks which supply input values for the F-program (F_QUITES, communication receive blocks, conversion blocks from standard to F-data types, drivers for F-input modules) Runtime groups with user logic, in the sequence in which they were created by the user|

Compendium Part B - Process Safety (V9.0)
Operating Manual, 04/2018, A5E43228905-AA

# 7.2 Creating the safety program

@F_OUT_xx_y Blocks which further process output values of F-blocks (communication send blocks, conversion blocks from F-to standard data types, drivers for F-output modules, F_PLK, F_PLK_O, and F_DIAG for program sequence control)

@F_DbInitxx DB_INIT function block required for the cold restart of an F-runtime group

All required error OBs are added to the block container in the SIMATIC Manager.

There should only be one @F_IN_xx_y runtime group before the first F-user runtime group and one @F_OUT_xx_y runtime group after the last F-user runtime group. If the safety program consists of several shutdown groups (see section 6.2.6 (Page 87)), there is the @F_IN_xx_y and @F_OUT_xx_y runtime group both before and after the F-user runtime group in the shutdown groups.

# Rules for F-runtime groups in the safety program

- We recommend that you proceed as follows in order to make the lengths of the F-cycles as uniform as possible:
If you mix F-and standard runtime groups in a cyclic interrupt OB, you must execute the F-runtime groups before the standard runtime groups.
- The following defaults are set for properties of an F-runtime group:
- Reduction ratio = 1
- Phase offset = 0
- Properties Runtime Group
- Task: 0B37
- Name: HS104
- Comment:
- Reduction ratio:
- Phase offset:
- Optimize run sequence
- Active:
- You are not permitted to move automatically generated F-runtime groups (identified by @).

Note: The feature: Optimize Run Sequence in CFC can lead to a change in the collective signature and impair the response times of the safety program, and therefore should not be used in F-runtime groups.

With PCS 7 V7.0 SP1 and higher, it is no longer possible to optimize the run sequence for cyclic interrupt OBs with F-runtime groups.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.6 F-shutdown groups

An F-shutdown group is a self-contained unit in your safety program. It contains user logic which is executed or shut down simultaneously. The F-shutdown group contains one or a number of F-runtime groups which are assigned to a common cyclic interrupt OB. You can choose whether an error during execution of the safety program causes a full shutdown or a partial shutdown of the safety program. With a partial shutdown, only the F-shutdown group in which the error occurred is shut down.

# Rules for F-shutdown groups in the safety program

You are not permitted to directly interconnect F-blocks in different F-shutdown groups. Data can only be exchanged between F-shutdown groups using special communication blocks (F_S_xx, F_R_xx for F_BOOL and F_REAL data structures). Therefore, all F-channel drivers in an F-signal module must be in the same F-shutdown group, together with the module driver of the F-signal module.

# Defining F-shutdown groups

As soon as you place F-blocks in the CFC editor for the first time, all of the F-runtime groups in a single cyclic interrupt OB will form an F-shutdown group. You can configure each F-runtime group as the last F-runtime group in an F-shutdown group by placing the F_PSG_M ""selection block"". The F-system then creates a new F-shutdown group for all subsequent F-runtime groups until another F_PSG_M block is found.

# Distribution/Combination by means of manual placing of F_PSG_M

If you add or delete one or a number of F_PSG_M blocks in your project, the order of your F-shutdown groups will change. If you make a change to the layout of your F-shutdown groups, you must make sure that the F-module drivers and all assigned F-channel drivers are integrated in the same F-shutdown group. You can split one F-shutdown group into two F-shutdown groups. To do this, in the CFC editor's runtime editor, place the F_PSG_M block in the last F-runtime group which is to be assigned to the first F-shutdown group. All subsequent F-runtime groups will then be assigned to the second F-shutdown group. The number of F-shutdown groups is limited to 110 in all cyclic interrupt OBs. The system restricts the number of F-runtime groups in an F-shutdown group. You have the option of combining two F-shutdown groups. To do this, in the runtime editor of the CFC editor, delete the F_PSG_M block between the F-shutdown groups. If you combine a number of F-shutdown groups which exchange data via F-communication blocks in a single F-shutdown group, you need to remove these F-communications blocks and replace them with direct interconnections.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# Programming data exchange between F-shutdown groups

If you wish to exchange data between two F-shutdown groups, you are not permitted to interconnect the inputs and outputs directly. You need to use the following F-system blocks for data exchange between F blocks in different F-shutdown groups:

|F block|Description|
|---|---|
|F_S_R/F_R_R|Safe transfer of 5 data of the F_REAL type|
|F_S_BO/F_R_BO|Safe transfer of 5 data of the F_BOOL type|

# Procedure for data exchange

1. In the F-shutdown group from which data is to be transferred, add an F_S_R or F_S_BO type F-block.
2. In the F-shutdown group to which data is to be transferred, add an F_R_R or F_R_BO type F-block.
3. Interconnect the SD_R_xx inputs of the F_S_R or the SD_BO_xx inputs of the F_S_BO with the data to be transferred.
4. Interconnect the RD_R_xx outputs of the F_R_R or the RD_BO_xx outputs of the F_R_BO with the inputs of the F-block for further processing of the data received.
5. Interconnect the S_DB output of the send block with the S_DB input of the associated receive block.
6. Configure the TIMEOUT inputs of the F_R_R and F_R_BO receive blocks with the F-monitoring time calculated.
7. Configure the receive block substitute values for the scenario of a shutdown of the sending shutdown group.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Extract from a chart for shutdown group 1 with send block:

|42617|7ail-|7133 Cor|CHLDEA F|1e-0- Ck_INE|
|---|---|---|---|---|
|JdEO|90_8o_|J0_EO|90_BO|JD_Bo_|
|11_112|J0_EO_07|32_80_08|7193 Coz|CHLDEA|
|Q_EAII|4212 bloel|PaJJ_CX|0_Kod|ubSime|
|4nu|Lou|JG RG|P3c >| |

The connection to shutdown group 2 is established by linking output S_DB of block F_S_BO_1 in shutdown group 1 with input S_DB on block F_R_BO_1 in shutdown group 2.

Extract from a chart for shutdown group 2 with receive block:

|Xbaeha|32430|netr|
|---|---|---|
|314 = doxr|3281p|REC_E?|
|Recei|ER EL|RD_BO_|
|RD_BO_|8088Q_01|RD_EQ|
|RD_E?|302ZD|RD_Lo|

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

89

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.7 Data exchange between the F user program and standard user program

The standard program and the F-program use different data formats. Accordingly, special conversion blocks have to be used for data exchange.

F-CPU
F-program
Conversion blocks
Standard program
Converting F-data types to standard data types

If you need the standard user program to process data from the F-program further (for monitoring on the PCS 7 OS, for example), a block for F_FDatatype_Datatype data conversion will have to be interconnected in the user program so that the F-data types can be converted into standard data types. This converter blocks must be called in the standard user program (standard runtime group).

Extract from a process tag chart; converting the ""QBAD"" signal from F_BOOL to BOOL:

Note

The figure is available in its original size as appendix to the manual in the ZIP download of the checklists.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Standard and F-blocks are in different runtime groups. As shown here, some F-blocks have outputs (depicted in gray), which can be directly interconnected with standard PCS 7 blocks. PCS 7 blocks such as MonAnL, MonDiL, EventMESSAGE and their associated faceplates and process symbols are used to visualize fail-safe analog values and status messages as well as system states and operating states. If parameters cannot be directly further interconnected due to the safety data format, the conversion blocks described above can be used.

# Converting standard data types into F-data types

If data from the standard user program is to be processed further in the F-program, it will need to be converted. The blocks for data conversion from standard data types to F-data types (F_datatype_Fdatatype) can only be used in the F-program (F-runtime group).

Extract from an F-chart, conversion from REAL to F_REAL:

|7_R_FR_CONv|R -B|CE 32|CB39|:RELL|Aulci|
|---|---|---|---|---|---|
|DAII ZROC3?|VALUE DiT| | | | |

Note: The conversion blocks only perform data conversion; in other words, you will need to program additional measures in the F-program for plausibility checking purposes (with F_LIM_R, for example), in order to ensure that only non-hazardous values are possible.

# 7.2.8 How F-blocks with floating-point operations respond to number range overflows

Within the context of analog value processing, number range overflows/underflows can occur during arithmetic calculations (with division by 0, root from a negative number or number range overflow). With S7 F Systems Lib V1_3 and higher, the response is as follows in this case: The results ""Overflow (± infinite)"", ""Denormalized floating-point number"" or ""Invalid floating-point number (NaN)"" are:

- Either output at the output and can be processed further by subsequent F blocks
- Or signaled to special outputs. A substitute value is output if necessary.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

91

# Configuring the safety program

# 7.2 Creating the safety program

If the floating-point operation produces an invalid floating-point number (NaN) and no invalid floating-point number (NaN) existed as an address prior to this, the following diagnostics event will be entered in the F CPU's diagnostic buffer:

""Safety program: Invalid REAL number in DB"" (event ID 16#75D9)

You can use this entry in the diagnostic buffer to identify the F block with the invalid floating-point number (NaN).

If you are not able to prevent these events from occurring in your safety program, you will need to decide, on the basis of your application, whether you wish to respond to them in your safety program.

|AD?|nddie|101.o = 101.0_|10o.0|-10q|CUIL|5035|
|---|---|---|---|---|---|---|
|AD?|indoic|0b37 1.0e+3e|:Addle|0etz|3.0e-3e|10o.0|
| |100.0|3.0e-38| |CUIL|AD_|:itis|
|0837i|LIN_R|08371|#Addic|3402-32|c0m| |
| |ce-JE| |CUII|Sms|AD?|0BJ7i|
|Addue|J1o|~10O|02-J8|~100.0|CuTO|100.0=|
|DIV|LIK_R|:tris|100.0_| |100.-|CutQ|
|0.0|502S|SoRT|HXR|:Squo-|{AJi|hal|
|-10o.05|CVIQ|CUIL|5023_W| | | |

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.3 Configuring fail-safe AS-AS communication

You can use the F_LIM_R F block to check the result of a floating-point operation for overflow (± infinite) and invalid floating-point number (NaN).

- A limit violation is indicated by IN &gt; MAX or ""+ infinite"". ",What triggers an F-STOP in the safety program?,A1,An F-STOP is triggered if errors in the safety data format are detected during the execution of the safety program.,2.53125,2.59375,3.59375,1.234375,0.478515625
41,pcs7_compendium_part_b_en-US_en-US.txt,37,5dea5c3b1bc7a2a2d3707ace8a7d6e3ed157196366f8ee88ba630fadc3d36b0e,"Changes to the input parameters of F blocks with F data types can be made as follows:

- Offline with the assistance of the CFC editor
- Online using CFC test mode with safety mode deactivated

Note

Values of PAR_ID and COMPLEM must not be changed. If errors in the safety data format are detected during the execution of the safety program, an F-STOP is triggered.

# 7.2.4 Run sequence of F-blocks

# Defining the run sequence

You define the run sequence in the CFC editor in the same way as for a standard user program. Changing the run sequence also changes the collective signature.

# Correct run sequence of F-blocks

The sequence of the F-blocks within the F-shutdown group is relevant. The number of F-runtime groups the F-shutdown group has been split into is of no relevance. Essentially, the correct run sequence of the various F-block types is as follows:

1. Placed automatically:
- F module driver for F-signal modules with inputs or with inputs and outputs
- F-communications blocks and F-system blocks for receiving
- F blocks for data conversion from standard value to F-structure
- F modules with OS connection
2. F channel drivers for inputs
3. F blocks for user logic

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

1. F channel drivers for outputs
2. Placed automatically:
- F block F_PLK
- F block F_PSG_M
- F module driver for F-signal modules with outputs or with inputs and outputs
- F-communications blocks and F-system blocks for sending
- F block F_PLK_O
- F block F_DIAG (S7 F-Systems Lib V1_3 and higher)

The run sequence of the blocks listed under items 1 and 5 is adjusted automatically when the F-program is compiled.
As if S7 F Systems Lib V1_3, separate runtime groups are created for the F blocks listed under points 1 and 5 during the first compilation.
The IPO principle (input, process, output) must always be observed when placing F-channel drivers and F-blocks for user logic.
This ensures that all inputs are read first, the relevant processing steps are performed, and all outputs are then written.
Furthermore, F-runtime groups and F-monitoring blocks that are only visible following compilation are also added automatically.

Note

No changes may be made in the automatically added runtime groups with the exception of the scan cycle monitoring on ""F_CYC_CO"" blocks and the parameter assignment of the ""F_SHUTDN"" block.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.5 F-runtime groups

During the programming of the safety program, F-blocks cannot be inserted directly into tasks (cyclic interrupt OBs). When a new CFC chart is created in PCS 7, the system will automatically generate a runtime group of the same name, into which the F-blocks placed in the corresponding CFC chart can then be inserted. An F-runtime group only becomes an F-runtime group (identified by a yellow folder and ""F"") when F-blocks are called in it.

0B37 [Cyclic interrupt7] (300 ms)
@CPU_RTI@CPU_RT
@F_ShutDn_37 (300 ms)
@F_ShutDn (300 ms)
CycCo-QB37 (300 ms)
CycCo-OB3ZIF_CYC_CO-OB37
@F_CycCo-OB3ZIF_TEST
@F_CycCo-OB37IF_TESTC
@F_TestMode (300 ms)
@F_IN_37_0 (300 ms)
SFC_109_F (300 ms)
AI_F (300 ms)
HS104_F (300 ms)
@F_OUT_37_0 (300 ms)
@F_DbIniti (300 ms)
0B38 [Cycic interrupta] (10 ms)

# Runtime groups of an F-program

The F-program is divided into several runtime groups, as shown in the table below.

Note

xx = Number of the cyclic interrupt OB

y = Consecutive numbering if several shutdown groups exist in a single cyclic interrupt OB

|Chart|F blocks|
|---|---|
|@F_ShutDn_xx|Shutdown logic of cyclic interrupt OB The shutdown logic is created with RTGLOGIC and standard logic blocks.|
|@F_ShutDn|Shutdown block Where an F-program is present in several cyclic interrupt OBs, this runtime group is integrated into the cyclic interrupt OB with the shortest call time. The shutdown logic is created with F_SHUTDN, RTGLOGIC, and standard logic blocks.|
|@F_CycCo-OBxx|F_CYC_CO, F_TEST and F_TESTC (for tests)|
|@F_TestMode|F_TESTM for managing safety mode|
|@F_IN_xx_y|F blocks which supply input values for the F-program (F_QUITES, communication receive blocks, conversion blocks from standard to F-data types, drivers for F-input modules) Runtime groups with user logic, in the sequence in which they were created by the user|

Compendium Part B - Process Safety (V9.0)
Operating Manual, 04/2018, A5E43228905-AA

# 7.2 Creating the safety program

@F_OUT_xx_y Blocks which further process output values of F-blocks (communication send blocks, conversion blocks from F-to standard data types, drivers for F-output modules, F_PLK, F_PLK_O, and F_DIAG for program sequence control)

@F_DbInitxx DB_INIT function block required for the cold restart of an F-runtime group

All required error OBs are added to the block container in the SIMATIC Manager.

There should only be one @F_IN_xx_y runtime group before the first F-user runtime group and one @F_OUT_xx_y runtime group after the last F-user runtime group. If the safety program consists of several shutdown groups (see section 6.2.6 (Page 87)), there is the @F_IN_xx_y and @F_OUT_xx_y runtime group both before and after the F-user runtime group in the shutdown groups.

# Rules for F-runtime groups in the safety program

- We recommend that you proceed as follows in order to make the lengths of the F-cycles as uniform as possible:
If you mix F-and standard runtime groups in a cyclic interrupt OB, you must execute the F-runtime groups before the standard runtime groups.
- The following defaults are set for properties of an F-runtime group:
- Reduction ratio = 1
- Phase offset = 0
- Properties Runtime Group
- Task: 0B37
- Name: HS104
- Comment:
- Reduction ratio:
- Phase offset:
- Optimize run sequence
- Active:
- You are not permitted to move automatically generated F-runtime groups (identified by @).

Note: The feature: Optimize Run Sequence in CFC can lead to a change in the collective signature and impair the response times of the safety program, and therefore should not be used in F-runtime groups.

With PCS 7 V7.0 SP1 and higher, it is no longer possible to optimize the run sequence for cyclic interrupt OBs with F-runtime groups.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.6 F-shutdown groups

An F-shutdown group is a self-contained unit in your safety program. It contains user logic which is executed or shut down simultaneously. The F-shutdown group contains one or a number of F-runtime groups which are assigned to a common cyclic interrupt OB. You can choose whether an error during execution of the safety program causes a full shutdown or a partial shutdown of the safety program. With a partial shutdown, only the F-shutdown group in which the error occurred is shut down.

# Rules for F-shutdown groups in the safety program

You are not permitted to directly interconnect F-blocks in different F-shutdown groups. Data can only be exchanged between F-shutdown groups using special communication blocks (F_S_xx, F_R_xx for F_BOOL and F_REAL data structures). Therefore, all F-channel drivers in an F-signal module must be in the same F-shutdown group, together with the module driver of the F-signal module.

# Defining F-shutdown groups

As soon as you place F-blocks in the CFC editor for the first time, all of the F-runtime groups in a single cyclic interrupt OB will form an F-shutdown group. You can configure each F-runtime group as the last F-runtime group in an F-shutdown group by placing the F_PSG_M ""selection block"". The F-system then creates a new F-shutdown group for all subsequent F-runtime groups until another F_PSG_M block is found.

# Distribution/Combination by means of manual placing of F_PSG_M

If you add or delete one or a number of F_PSG_M blocks in your project, the order of your F-shutdown groups will change. If you make a change to the layout of your F-shutdown groups, you must make sure that the F-module drivers and all assigned F-channel drivers are integrated in the same F-shutdown group. You can split one F-shutdown group into two F-shutdown groups. To do this, in the CFC editor's runtime editor, place the F_PSG_M block in the last F-runtime group which is to be assigned to the first F-shutdown group. All subsequent F-runtime groups will then be assigned to the second F-shutdown group. The number of F-shutdown groups is limited to 110 in all cyclic interrupt OBs. The system restricts the number of F-runtime groups in an F-shutdown group. You have the option of combining two F-shutdown groups. To do this, in the runtime editor of the CFC editor, delete the F_PSG_M block between the F-shutdown groups. If you combine a number of F-shutdown groups which exchange data via F-communication blocks in a single F-shutdown group, you need to remove these F-communications blocks and replace them with direct interconnections.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# Programming data exchange between F-shutdown groups

If you wish to exchange data between two F-shutdown groups, you are not permitted to interconnect the inputs and outputs directly. You need to use the following F-system blocks for data exchange between F blocks in different F-shutdown groups:

|F block|Description|
|---|---|
|F_S_R/F_R_R|Safe transfer of 5 data of the F_REAL type|
|F_S_BO/F_R_BO|Safe transfer of 5 data of the F_BOOL type|

# Procedure for data exchange

1. In the F-shutdown group from which data is to be transferred, add an F_S_R or F_S_BO type F-block.
2. In the F-shutdown group to which data is to be transferred, add an F_R_R or F_R_BO type F-block.
3. Interconnect the SD_R_xx inputs of the F_S_R or the SD_BO_xx inputs of the F_S_BO with the data to be transferred.
4. Interconnect the RD_R_xx outputs of the F_R_R or the RD_BO_xx outputs of the F_R_BO with the inputs of the F-block for further processing of the data received.
5. Interconnect the S_DB output of the send block with the S_DB input of the associated receive block.
6. Configure the TIMEOUT inputs of the F_R_R and F_R_BO receive blocks with the F-monitoring time calculated.
7. Configure the receive block substitute values for the scenario of a shutdown of the sending shutdown group.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Extract from a chart for shutdown group 1 with send block:

|42617|7ail-|7133 Cor|CHLDEA F|1e-0- Ck_INE|
|---|---|---|---|---|
|JdEO|90_8o_|J0_EO|90_BO|JD_Bo_|
|11_112|J0_EO_07|32_80_08|7193 Coz|CHLDEA|
|Q_EAII|4212 bloel|PaJJ_CX|0_Kod|ubSime|
|4nu|Lou|JG RG|P3c >| |

The connection to shutdown group 2 is established by linking output S_DB of block F_S_BO_1 in shutdown group 1 with input S_DB on block F_R_BO_1 in shutdown group 2.

Extract from a chart for shutdown group 2 with receive block:

|Xbaeha|32430|netr|
|---|---|---|
|314 = doxr|3281p|REC_E?|
|Recei|ER EL|RD_BO_|
|RD_BO_|8088Q_01|RD_EQ|
|RD_E?|302ZD|RD_Lo|

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

89

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.7 Data exchange between the F user program and standard user program

The standard program and the F-program use different data formats. Accordingly, special conversion blocks have to be used for data exchange.

F-CPU
F-program
Conversion blocks
Standard program
Converting F-data types to standard data types

If you need the standard user program to process data from the F-program further (for monitoring on the PCS 7 OS, for example), a block for F_FDatatype_Datatype data conversion will have to be interconnected in the user program so that the F-data types can be converted into standard data types. This converter blocks must be called in the standard user program (standard runtime group).

Extract from a process tag chart; converting the ""QBAD"" signal from F_BOOL to BOOL:

Note

The figure is available in its original size as appendix to the manual in the ZIP download of the checklists.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Standard and F-blocks are in different runtime groups. As shown here, some F-blocks have outputs (depicted in gray), which can be directly interconnected with standard PCS 7 blocks. PCS 7 blocks such as MonAnL, MonDiL, EventMESSAGE and their associated faceplates and process symbols are used to visualize fail-safe analog values and status messages as well as system states and operating states. If parameters cannot be directly further interconnected due to the safety data format, the conversion blocks described above can be used.

# Converting standard data types into F-data types

If data from the standard user program is to be processed further in the F-program, it will need to be converted. The blocks for data conversion from standard data types to F-data types (F_datatype_Fdatatype) can only be used in the F-program (F-runtime group).

Extract from an F-chart, conversion from REAL to F_REAL:

|7_R_FR_CONv|R -B|CE 32|CB39|:RELL|Aulci|
|---|---|---|---|---|---|
|DAII ZROC3?|VALUE DiT| | | | |

Note: The conversion blocks only perform data conversion; in other words, you will need to program additional measures in the F-program for plausibility checking purposes (with F_LIM_R, for example), in order to ensure that only non-hazardous values are possible.

# 7.2.8 How F-blocks with floating-point operations respond to number range overflows

Within the context of analog value processing, number range overflows/underflows can occur during arithmetic calculations (with division by 0, root from a negative number or number range overflow). With S7 F Systems Lib V1_3 and higher, the response is as follows in this case: The results ""Overflow (± infinite)"", ""Denormalized floating-point number"" or ""Invalid floating-point number (NaN)"" are:

- Either output at the output and can be processed further by subsequent F blocks
- Or signaled to special outputs. A substitute value is output if necessary.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

91

# Configuring the safety program

# 7.2 Creating the safety program

If the floating-point operation produces an invalid floating-point number (NaN) and no invalid floating-point number (NaN) existed as an address prior to this, the following diagnostics event will be entered in the F CPU's diagnostic buffer:

""Safety program: Invalid REAL number in DB"" (event ID 16#75D9)

You can use this entry in the diagnostic buffer to identify the F block with the invalid floating-point number (NaN).

If you are not able to prevent these events from occurring in your safety program, you will need to decide, on the basis of your application, whether you wish to respond to them in your safety program.

|AD?|nddie|101.o = 101.0_|10o.0|-10q|CUIL|5035|
|---|---|---|---|---|---|---|
|AD?|indoic|0b37 1.0e+3e|:Addle|0etz|3.0e-3e|10o.0|
| |100.0|3.0e-38| |CUIL|AD_|:itis|
|0837i|LIN_R|08371|#Addic|3402-32|c0m| |
| |ce-JE| |CUII|Sms|AD?|0BJ7i|
|Addue|J1o|~10O|02-J8|~100.0|CuTO|100.0=|
|DIV|LIK_R|:tris|100.0_| |100.-|CutQ|
|0.0|502S|SoRT|HXR|:Squo-|{AJi|hal|
|-10o.05|CVIQ|CUIL|5023_W| | | |

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.3 Configuring fail-safe AS-AS communication

You can use the F_LIM_R F block to check the result of a floating-point operation for overflow (± infinite) and invalid floating-point number (NaN).

- A limit violation is indicated by IN &gt; MAX or ""+ infinite"". ",What triggers an F-STOP in the safety program?,A2,Detection of safety data format errors during the safety program's execution causes an F-STOP.,1.8515625,2.015625,3.203125,1.2265625,0.421875
42,pcs7_compendium_part_b_en-US_en-US.txt,37,5dea5c3b1bc7a2a2d3707ace8a7d6e3ed157196366f8ee88ba630fadc3d36b0e,"Changes to the input parameters of F blocks with F data types can be made as follows:

- Offline with the assistance of the CFC editor
- Online using CFC test mode with safety mode deactivated

Note

Values of PAR_ID and COMPLEM must not be changed. If errors in the safety data format are detected during the execution of the safety program, an F-STOP is triggered.

# 7.2.4 Run sequence of F-blocks

# Defining the run sequence

You define the run sequence in the CFC editor in the same way as for a standard user program. Changing the run sequence also changes the collective signature.

# Correct run sequence of F-blocks

The sequence of the F-blocks within the F-shutdown group is relevant. The number of F-runtime groups the F-shutdown group has been split into is of no relevance. Essentially, the correct run sequence of the various F-block types is as follows:

1. Placed automatically:
- F module driver for F-signal modules with inputs or with inputs and outputs
- F-communications blocks and F-system blocks for receiving
- F blocks for data conversion from standard value to F-structure
- F modules with OS connection
2. F channel drivers for inputs
3. F blocks for user logic

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

1. F channel drivers for outputs
2. Placed automatically:
- F block F_PLK
- F block F_PSG_M
- F module driver for F-signal modules with outputs or with inputs and outputs
- F-communications blocks and F-system blocks for sending
- F block F_PLK_O
- F block F_DIAG (S7 F-Systems Lib V1_3 and higher)

The run sequence of the blocks listed under items 1 and 5 is adjusted automatically when the F-program is compiled.
As if S7 F Systems Lib V1_3, separate runtime groups are created for the F blocks listed under points 1 and 5 during the first compilation.
The IPO principle (input, process, output) must always be observed when placing F-channel drivers and F-blocks for user logic.
This ensures that all inputs are read first, the relevant processing steps are performed, and all outputs are then written.
Furthermore, F-runtime groups and F-monitoring blocks that are only visible following compilation are also added automatically.

Note

No changes may be made in the automatically added runtime groups with the exception of the scan cycle monitoring on ""F_CYC_CO"" blocks and the parameter assignment of the ""F_SHUTDN"" block.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.5 F-runtime groups

During the programming of the safety program, F-blocks cannot be inserted directly into tasks (cyclic interrupt OBs). When a new CFC chart is created in PCS 7, the system will automatically generate a runtime group of the same name, into which the F-blocks placed in the corresponding CFC chart can then be inserted. An F-runtime group only becomes an F-runtime group (identified by a yellow folder and ""F"") when F-blocks are called in it.

0B37 [Cyclic interrupt7] (300 ms)
@CPU_RTI@CPU_RT
@F_ShutDn_37 (300 ms)
@F_ShutDn (300 ms)
CycCo-QB37 (300 ms)
CycCo-OB3ZIF_CYC_CO-OB37
@F_CycCo-OB3ZIF_TEST
@F_CycCo-OB37IF_TESTC
@F_TestMode (300 ms)
@F_IN_37_0 (300 ms)
SFC_109_F (300 ms)
AI_F (300 ms)
HS104_F (300 ms)
@F_OUT_37_0 (300 ms)
@F_DbIniti (300 ms)
0B38 [Cycic interrupta] (10 ms)

# Runtime groups of an F-program

The F-program is divided into several runtime groups, as shown in the table below.

Note

xx = Number of the cyclic interrupt OB

y = Consecutive numbering if several shutdown groups exist in a single cyclic interrupt OB

|Chart|F blocks|
|---|---|
|@F_ShutDn_xx|Shutdown logic of cyclic interrupt OB The shutdown logic is created with RTGLOGIC and standard logic blocks.|
|@F_ShutDn|Shutdown block Where an F-program is present in several cyclic interrupt OBs, this runtime group is integrated into the cyclic interrupt OB with the shortest call time. The shutdown logic is created with F_SHUTDN, RTGLOGIC, and standard logic blocks.|
|@F_CycCo-OBxx|F_CYC_CO, F_TEST and F_TESTC (for tests)|
|@F_TestMode|F_TESTM for managing safety mode|
|@F_IN_xx_y|F blocks which supply input values for the F-program (F_QUITES, communication receive blocks, conversion blocks from standard to F-data types, drivers for F-input modules) Runtime groups with user logic, in the sequence in which they were created by the user|

Compendium Part B - Process Safety (V9.0)
Operating Manual, 04/2018, A5E43228905-AA

# 7.2 Creating the safety program

@F_OUT_xx_y Blocks which further process output values of F-blocks (communication send blocks, conversion blocks from F-to standard data types, drivers for F-output modules, F_PLK, F_PLK_O, and F_DIAG for program sequence control)

@F_DbInitxx DB_INIT function block required for the cold restart of an F-runtime group

All required error OBs are added to the block container in the SIMATIC Manager.

There should only be one @F_IN_xx_y runtime group before the first F-user runtime group and one @F_OUT_xx_y runtime group after the last F-user runtime group. If the safety program consists of several shutdown groups (see section 6.2.6 (Page 87)), there is the @F_IN_xx_y and @F_OUT_xx_y runtime group both before and after the F-user runtime group in the shutdown groups.

# Rules for F-runtime groups in the safety program

- We recommend that you proceed as follows in order to make the lengths of the F-cycles as uniform as possible:
If you mix F-and standard runtime groups in a cyclic interrupt OB, you must execute the F-runtime groups before the standard runtime groups.
- The following defaults are set for properties of an F-runtime group:
- Reduction ratio = 1
- Phase offset = 0
- Properties Runtime Group
- Task: 0B37
- Name: HS104
- Comment:
- Reduction ratio:
- Phase offset:
- Optimize run sequence
- Active:
- You are not permitted to move automatically generated F-runtime groups (identified by @).

Note: The feature: Optimize Run Sequence in CFC can lead to a change in the collective signature and impair the response times of the safety program, and therefore should not be used in F-runtime groups.

With PCS 7 V7.0 SP1 and higher, it is no longer possible to optimize the run sequence for cyclic interrupt OBs with F-runtime groups.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.6 F-shutdown groups

An F-shutdown group is a self-contained unit in your safety program. It contains user logic which is executed or shut down simultaneously. The F-shutdown group contains one or a number of F-runtime groups which are assigned to a common cyclic interrupt OB. You can choose whether an error during execution of the safety program causes a full shutdown or a partial shutdown of the safety program. With a partial shutdown, only the F-shutdown group in which the error occurred is shut down.

# Rules for F-shutdown groups in the safety program

You are not permitted to directly interconnect F-blocks in different F-shutdown groups. Data can only be exchanged between F-shutdown groups using special communication blocks (F_S_xx, F_R_xx for F_BOOL and F_REAL data structures). Therefore, all F-channel drivers in an F-signal module must be in the same F-shutdown group, together with the module driver of the F-signal module.

# Defining F-shutdown groups

As soon as you place F-blocks in the CFC editor for the first time, all of the F-runtime groups in a single cyclic interrupt OB will form an F-shutdown group. You can configure each F-runtime group as the last F-runtime group in an F-shutdown group by placing the F_PSG_M ""selection block"". The F-system then creates a new F-shutdown group for all subsequent F-runtime groups until another F_PSG_M block is found.

# Distribution/Combination by means of manual placing of F_PSG_M

If you add or delete one or a number of F_PSG_M blocks in your project, the order of your F-shutdown groups will change. If you make a change to the layout of your F-shutdown groups, you must make sure that the F-module drivers and all assigned F-channel drivers are integrated in the same F-shutdown group. You can split one F-shutdown group into two F-shutdown groups. To do this, in the CFC editor's runtime editor, place the F_PSG_M block in the last F-runtime group which is to be assigned to the first F-shutdown group. All subsequent F-runtime groups will then be assigned to the second F-shutdown group. The number of F-shutdown groups is limited to 110 in all cyclic interrupt OBs. The system restricts the number of F-runtime groups in an F-shutdown group. You have the option of combining two F-shutdown groups. To do this, in the runtime editor of the CFC editor, delete the F_PSG_M block between the F-shutdown groups. If you combine a number of F-shutdown groups which exchange data via F-communication blocks in a single F-shutdown group, you need to remove these F-communications blocks and replace them with direct interconnections.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# Programming data exchange between F-shutdown groups

If you wish to exchange data between two F-shutdown groups, you are not permitted to interconnect the inputs and outputs directly. You need to use the following F-system blocks for data exchange between F blocks in different F-shutdown groups:

|F block|Description|
|---|---|
|F_S_R/F_R_R|Safe transfer of 5 data of the F_REAL type|
|F_S_BO/F_R_BO|Safe transfer of 5 data of the F_BOOL type|

# Procedure for data exchange

1. In the F-shutdown group from which data is to be transferred, add an F_S_R or F_S_BO type F-block.
2. In the F-shutdown group to which data is to be transferred, add an F_R_R or F_R_BO type F-block.
3. Interconnect the SD_R_xx inputs of the F_S_R or the SD_BO_xx inputs of the F_S_BO with the data to be transferred.
4. Interconnect the RD_R_xx outputs of the F_R_R or the RD_BO_xx outputs of the F_R_BO with the inputs of the F-block for further processing of the data received.
5. Interconnect the S_DB output of the send block with the S_DB input of the associated receive block.
6. Configure the TIMEOUT inputs of the F_R_R and F_R_BO receive blocks with the F-monitoring time calculated.
7. Configure the receive block substitute values for the scenario of a shutdown of the sending shutdown group.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Extract from a chart for shutdown group 1 with send block:

|42617|7ail-|7133 Cor|CHLDEA F|1e-0- Ck_INE|
|---|---|---|---|---|
|JdEO|90_8o_|J0_EO|90_BO|JD_Bo_|
|11_112|J0_EO_07|32_80_08|7193 Coz|CHLDEA|
|Q_EAII|4212 bloel|PaJJ_CX|0_Kod|ubSime|
|4nu|Lou|JG RG|P3c >| |

The connection to shutdown group 2 is established by linking output S_DB of block F_S_BO_1 in shutdown group 1 with input S_DB on block F_R_BO_1 in shutdown group 2.

Extract from a chart for shutdown group 2 with receive block:

|Xbaeha|32430|netr|
|---|---|---|
|314 = doxr|3281p|REC_E?|
|Recei|ER EL|RD_BO_|
|RD_BO_|8088Q_01|RD_EQ|
|RD_E?|302ZD|RD_Lo|

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

89

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.7 Data exchange between the F user program and standard user program

The standard program and the F-program use different data formats. Accordingly, special conversion blocks have to be used for data exchange.

F-CPU
F-program
Conversion blocks
Standard program
Converting F-data types to standard data types

If you need the standard user program to process data from the F-program further (for monitoring on the PCS 7 OS, for example), a block for F_FDatatype_Datatype data conversion will have to be interconnected in the user program so that the F-data types can be converted into standard data types. This converter blocks must be called in the standard user program (standard runtime group).

Extract from a process tag chart; converting the ""QBAD"" signal from F_BOOL to BOOL:

Note

The figure is available in its original size as appendix to the manual in the ZIP download of the checklists.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Standard and F-blocks are in different runtime groups. As shown here, some F-blocks have outputs (depicted in gray), which can be directly interconnected with standard PCS 7 blocks. PCS 7 blocks such as MonAnL, MonDiL, EventMESSAGE and their associated faceplates and process symbols are used to visualize fail-safe analog values and status messages as well as system states and operating states. If parameters cannot be directly further interconnected due to the safety data format, the conversion blocks described above can be used.

# Converting standard data types into F-data types

If data from the standard user program is to be processed further in the F-program, it will need to be converted. The blocks for data conversion from standard data types to F-data types (F_datatype_Fdatatype) can only be used in the F-program (F-runtime group).

Extract from an F-chart, conversion from REAL to F_REAL:

|7_R_FR_CONv|R -B|CE 32|CB39|:RELL|Aulci|
|---|---|---|---|---|---|
|DAII ZROC3?|VALUE DiT| | | | |

Note: The conversion blocks only perform data conversion; in other words, you will need to program additional measures in the F-program for plausibility checking purposes (with F_LIM_R, for example), in order to ensure that only non-hazardous values are possible.

# 7.2.8 How F-blocks with floating-point operations respond to number range overflows

Within the context of analog value processing, number range overflows/underflows can occur during arithmetic calculations (with division by 0, root from a negative number or number range overflow). With S7 F Systems Lib V1_3 and higher, the response is as follows in this case: The results ""Overflow (± infinite)"", ""Denormalized floating-point number"" or ""Invalid floating-point number (NaN)"" are:

- Either output at the output and can be processed further by subsequent F blocks
- Or signaled to special outputs. A substitute value is output if necessary.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

91

# Configuring the safety program

# 7.2 Creating the safety program

If the floating-point operation produces an invalid floating-point number (NaN) and no invalid floating-point number (NaN) existed as an address prior to this, the following diagnostics event will be entered in the F CPU's diagnostic buffer:

""Safety program: Invalid REAL number in DB"" (event ID 16#75D9)

You can use this entry in the diagnostic buffer to identify the F block with the invalid floating-point number (NaN).

If you are not able to prevent these events from occurring in your safety program, you will need to decide, on the basis of your application, whether you wish to respond to them in your safety program.

|AD?|nddie|101.o = 101.0_|10o.0|-10q|CUIL|5035|
|---|---|---|---|---|---|---|
|AD?|indoic|0b37 1.0e+3e|:Addle|0etz|3.0e-3e|10o.0|
| |100.0|3.0e-38| |CUIL|AD_|:itis|
|0837i|LIN_R|08371|#Addic|3402-32|c0m| |
| |ce-JE| |CUII|Sms|AD?|0BJ7i|
|Addue|J1o|~10O|02-J8|~100.0|CuTO|100.0=|
|DIV|LIK_R|:tris|100.0_| |100.-|CutQ|
|0.0|502S|SoRT|HXR|:Squo-|{AJi|hal|
|-10o.05|CVIQ|CUIL|5023_W| | | |

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.3 Configuring fail-safe AS-AS communication

You can use the F_LIM_R F block to check the result of a floating-point operation for overflow (± infinite) and invalid floating-point number (NaN).

- A limit violation is indicated by IN &gt; MAX or ""+ infinite"". ",What triggers an F-STOP in the safety program?,A3,Errors found in the safety data format while running the safety program will initiate an F-STOP.,2.140625,2.203125,3.359375,1.3515625,0.44140625
43,pcs7_compendium_part_b_en-US_en-US.txt,37,5dea5c3b1bc7a2a2d3707ace8a7d6e3ed157196366f8ee88ba630fadc3d36b0e,"Changes to the input parameters of F blocks with F data types can be made as follows:

- Offline with the assistance of the CFC editor
- Online using CFC test mode with safety mode deactivated

Note

Values of PAR_ID and COMPLEM must not be changed. If errors in the safety data format are detected during the execution of the safety program, an F-STOP is triggered.

# 7.2.4 Run sequence of F-blocks

# Defining the run sequence

You define the run sequence in the CFC editor in the same way as for a standard user program. Changing the run sequence also changes the collective signature.

# Correct run sequence of F-blocks

The sequence of the F-blocks within the F-shutdown group is relevant. The number of F-runtime groups the F-shutdown group has been split into is of no relevance. Essentially, the correct run sequence of the various F-block types is as follows:

1. Placed automatically:
- F module driver for F-signal modules with inputs or with inputs and outputs
- F-communications blocks and F-system blocks for receiving
- F blocks for data conversion from standard value to F-structure
- F modules with OS connection
2. F channel drivers for inputs
3. F blocks for user logic

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

1. F channel drivers for outputs
2. Placed automatically:
- F block F_PLK
- F block F_PSG_M
- F module driver for F-signal modules with outputs or with inputs and outputs
- F-communications blocks and F-system blocks for sending
- F block F_PLK_O
- F block F_DIAG (S7 F-Systems Lib V1_3 and higher)

The run sequence of the blocks listed under items 1 and 5 is adjusted automatically when the F-program is compiled.
As if S7 F Systems Lib V1_3, separate runtime groups are created for the F blocks listed under points 1 and 5 during the first compilation.
The IPO principle (input, process, output) must always be observed when placing F-channel drivers and F-blocks for user logic.
This ensures that all inputs are read first, the relevant processing steps are performed, and all outputs are then written.
Furthermore, F-runtime groups and F-monitoring blocks that are only visible following compilation are also added automatically.

Note

No changes may be made in the automatically added runtime groups with the exception of the scan cycle monitoring on ""F_CYC_CO"" blocks and the parameter assignment of the ""F_SHUTDN"" block.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.5 F-runtime groups

During the programming of the safety program, F-blocks cannot be inserted directly into tasks (cyclic interrupt OBs). When a new CFC chart is created in PCS 7, the system will automatically generate a runtime group of the same name, into which the F-blocks placed in the corresponding CFC chart can then be inserted. An F-runtime group only becomes an F-runtime group (identified by a yellow folder and ""F"") when F-blocks are called in it.

0B37 [Cyclic interrupt7] (300 ms)
@CPU_RTI@CPU_RT
@F_ShutDn_37 (300 ms)
@F_ShutDn (300 ms)
CycCo-QB37 (300 ms)
CycCo-OB3ZIF_CYC_CO-OB37
@F_CycCo-OB3ZIF_TEST
@F_CycCo-OB37IF_TESTC
@F_TestMode (300 ms)
@F_IN_37_0 (300 ms)
SFC_109_F (300 ms)
AI_F (300 ms)
HS104_F (300 ms)
@F_OUT_37_0 (300 ms)
@F_DbIniti (300 ms)
0B38 [Cycic interrupta] (10 ms)

# Runtime groups of an F-program

The F-program is divided into several runtime groups, as shown in the table below.

Note

xx = Number of the cyclic interrupt OB

y = Consecutive numbering if several shutdown groups exist in a single cyclic interrupt OB

|Chart|F blocks|
|---|---|
|@F_ShutDn_xx|Shutdown logic of cyclic interrupt OB The shutdown logic is created with RTGLOGIC and standard logic blocks.|
|@F_ShutDn|Shutdown block Where an F-program is present in several cyclic interrupt OBs, this runtime group is integrated into the cyclic interrupt OB with the shortest call time. The shutdown logic is created with F_SHUTDN, RTGLOGIC, and standard logic blocks.|
|@F_CycCo-OBxx|F_CYC_CO, F_TEST and F_TESTC (for tests)|
|@F_TestMode|F_TESTM for managing safety mode|
|@F_IN_xx_y|F blocks which supply input values for the F-program (F_QUITES, communication receive blocks, conversion blocks from standard to F-data types, drivers for F-input modules) Runtime groups with user logic, in the sequence in which they were created by the user|

Compendium Part B - Process Safety (V9.0)
Operating Manual, 04/2018, A5E43228905-AA

# 7.2 Creating the safety program

@F_OUT_xx_y Blocks which further process output values of F-blocks (communication send blocks, conversion blocks from F-to standard data types, drivers for F-output modules, F_PLK, F_PLK_O, and F_DIAG for program sequence control)

@F_DbInitxx DB_INIT function block required for the cold restart of an F-runtime group

All required error OBs are added to the block container in the SIMATIC Manager.

There should only be one @F_IN_xx_y runtime group before the first F-user runtime group and one @F_OUT_xx_y runtime group after the last F-user runtime group. If the safety program consists of several shutdown groups (see section 6.2.6 (Page 87)), there is the @F_IN_xx_y and @F_OUT_xx_y runtime group both before and after the F-user runtime group in the shutdown groups.

# Rules for F-runtime groups in the safety program

- We recommend that you proceed as follows in order to make the lengths of the F-cycles as uniform as possible:
If you mix F-and standard runtime groups in a cyclic interrupt OB, you must execute the F-runtime groups before the standard runtime groups.
- The following defaults are set for properties of an F-runtime group:
- Reduction ratio = 1
- Phase offset = 0
- Properties Runtime Group
- Task: 0B37
- Name: HS104
- Comment:
- Reduction ratio:
- Phase offset:
- Optimize run sequence
- Active:
- You are not permitted to move automatically generated F-runtime groups (identified by @).

Note: The feature: Optimize Run Sequence in CFC can lead to a change in the collective signature and impair the response times of the safety program, and therefore should not be used in F-runtime groups.

With PCS 7 V7.0 SP1 and higher, it is no longer possible to optimize the run sequence for cyclic interrupt OBs with F-runtime groups.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.6 F-shutdown groups

An F-shutdown group is a self-contained unit in your safety program. It contains user logic which is executed or shut down simultaneously. The F-shutdown group contains one or a number of F-runtime groups which are assigned to a common cyclic interrupt OB. You can choose whether an error during execution of the safety program causes a full shutdown or a partial shutdown of the safety program. With a partial shutdown, only the F-shutdown group in which the error occurred is shut down.

# Rules for F-shutdown groups in the safety program

You are not permitted to directly interconnect F-blocks in different F-shutdown groups. Data can only be exchanged between F-shutdown groups using special communication blocks (F_S_xx, F_R_xx for F_BOOL and F_REAL data structures). Therefore, all F-channel drivers in an F-signal module must be in the same F-shutdown group, together with the module driver of the F-signal module.

# Defining F-shutdown groups

As soon as you place F-blocks in the CFC editor for the first time, all of the F-runtime groups in a single cyclic interrupt OB will form an F-shutdown group. You can configure each F-runtime group as the last F-runtime group in an F-shutdown group by placing the F_PSG_M ""selection block"". The F-system then creates a new F-shutdown group for all subsequent F-runtime groups until another F_PSG_M block is found.

# Distribution/Combination by means of manual placing of F_PSG_M

If you add or delete one or a number of F_PSG_M blocks in your project, the order of your F-shutdown groups will change. If you make a change to the layout of your F-shutdown groups, you must make sure that the F-module drivers and all assigned F-channel drivers are integrated in the same F-shutdown group. You can split one F-shutdown group into two F-shutdown groups. To do this, in the CFC editor's runtime editor, place the F_PSG_M block in the last F-runtime group which is to be assigned to the first F-shutdown group. All subsequent F-runtime groups will then be assigned to the second F-shutdown group. The number of F-shutdown groups is limited to 110 in all cyclic interrupt OBs. The system restricts the number of F-runtime groups in an F-shutdown group. You have the option of combining two F-shutdown groups. To do this, in the runtime editor of the CFC editor, delete the F_PSG_M block between the F-shutdown groups. If you combine a number of F-shutdown groups which exchange data via F-communication blocks in a single F-shutdown group, you need to remove these F-communications blocks and replace them with direct interconnections.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# Programming data exchange between F-shutdown groups

If you wish to exchange data between two F-shutdown groups, you are not permitted to interconnect the inputs and outputs directly. You need to use the following F-system blocks for data exchange between F blocks in different F-shutdown groups:

|F block|Description|
|---|---|
|F_S_R/F_R_R|Safe transfer of 5 data of the F_REAL type|
|F_S_BO/F_R_BO|Safe transfer of 5 data of the F_BOOL type|

# Procedure for data exchange

1. In the F-shutdown group from which data is to be transferred, add an F_S_R or F_S_BO type F-block.
2. In the F-shutdown group to which data is to be transferred, add an F_R_R or F_R_BO type F-block.
3. Interconnect the SD_R_xx inputs of the F_S_R or the SD_BO_xx inputs of the F_S_BO with the data to be transferred.
4. Interconnect the RD_R_xx outputs of the F_R_R or the RD_BO_xx outputs of the F_R_BO with the inputs of the F-block for further processing of the data received.
5. Interconnect the S_DB output of the send block with the S_DB input of the associated receive block.
6. Configure the TIMEOUT inputs of the F_R_R and F_R_BO receive blocks with the F-monitoring time calculated.
7. Configure the receive block substitute values for the scenario of a shutdown of the sending shutdown group.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Extract from a chart for shutdown group 1 with send block:

|42617|7ail-|7133 Cor|CHLDEA F|1e-0- Ck_INE|
|---|---|---|---|---|
|JdEO|90_8o_|J0_EO|90_BO|JD_Bo_|
|11_112|J0_EO_07|32_80_08|7193 Coz|CHLDEA|
|Q_EAII|4212 bloel|PaJJ_CX|0_Kod|ubSime|
|4nu|Lou|JG RG|P3c >| |

The connection to shutdown group 2 is established by linking output S_DB of block F_S_BO_1 in shutdown group 1 with input S_DB on block F_R_BO_1 in shutdown group 2.

Extract from a chart for shutdown group 2 with receive block:

|Xbaeha|32430|netr|
|---|---|---|
|314 = doxr|3281p|REC_E?|
|Recei|ER EL|RD_BO_|
|RD_BO_|8088Q_01|RD_EQ|
|RD_E?|302ZD|RD_Lo|

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

89

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.7 Data exchange between the F user program and standard user program

The standard program and the F-program use different data formats. Accordingly, special conversion blocks have to be used for data exchange.

F-CPU
F-program
Conversion blocks
Standard program
Converting F-data types to standard data types

If you need the standard user program to process data from the F-program further (for monitoring on the PCS 7 OS, for example), a block for F_FDatatype_Datatype data conversion will have to be interconnected in the user program so that the F-data types can be converted into standard data types. This converter blocks must be called in the standard user program (standard runtime group).

Extract from a process tag chart; converting the ""QBAD"" signal from F_BOOL to BOOL:

Note

The figure is available in its original size as appendix to the manual in the ZIP download of the checklists.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Standard and F-blocks are in different runtime groups. As shown here, some F-blocks have outputs (depicted in gray), which can be directly interconnected with standard PCS 7 blocks. PCS 7 blocks such as MonAnL, MonDiL, EventMESSAGE and their associated faceplates and process symbols are used to visualize fail-safe analog values and status messages as well as system states and operating states. If parameters cannot be directly further interconnected due to the safety data format, the conversion blocks described above can be used.

# Converting standard data types into F-data types

If data from the standard user program is to be processed further in the F-program, it will need to be converted. The blocks for data conversion from standard data types to F-data types (F_datatype_Fdatatype) can only be used in the F-program (F-runtime group).

Extract from an F-chart, conversion from REAL to F_REAL:

|7_R_FR_CONv|R -B|CE 32|CB39|:RELL|Aulci|
|---|---|---|---|---|---|
|DAII ZROC3?|VALUE DiT| | | | |

Note: The conversion blocks only perform data conversion; in other words, you will need to program additional measures in the F-program for plausibility checking purposes (with F_LIM_R, for example), in order to ensure that only non-hazardous values are possible.

# 7.2.8 How F-blocks with floating-point operations respond to number range overflows

Within the context of analog value processing, number range overflows/underflows can occur during arithmetic calculations (with division by 0, root from a negative number or number range overflow). With S7 F Systems Lib V1_3 and higher, the response is as follows in this case: The results ""Overflow (± infinite)"", ""Denormalized floating-point number"" or ""Invalid floating-point number (NaN)"" are:

- Either output at the output and can be processed further by subsequent F blocks
- Or signaled to special outputs. A substitute value is output if necessary.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

91

# Configuring the safety program

# 7.2 Creating the safety program

If the floating-point operation produces an invalid floating-point number (NaN) and no invalid floating-point number (NaN) existed as an address prior to this, the following diagnostics event will be entered in the F CPU's diagnostic buffer:

""Safety program: Invalid REAL number in DB"" (event ID 16#75D9)

You can use this entry in the diagnostic buffer to identify the F block with the invalid floating-point number (NaN).

If you are not able to prevent these events from occurring in your safety program, you will need to decide, on the basis of your application, whether you wish to respond to them in your safety program.

|AD?|nddie|101.o = 101.0_|10o.0|-10q|CUIL|5035|
|---|---|---|---|---|---|---|
|AD?|indoic|0b37 1.0e+3e|:Addle|0etz|3.0e-3e|10o.0|
| |100.0|3.0e-38| |CUIL|AD_|:itis|
|0837i|LIN_R|08371|#Addic|3402-32|c0m| |
| |ce-JE| |CUII|Sms|AD?|0BJ7i|
|Addue|J1o|~10O|02-J8|~100.0|CuTO|100.0=|
|DIV|LIK_R|:tris|100.0_| |100.-|CutQ|
|0.0|502S|SoRT|HXR|:Squo-|{AJi|hal|
|-10o.05|CVIQ|CUIL|5023_W| | | |

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.3 Configuring fail-safe AS-AS communication

You can use the F_LIM_R F block to check the result of a floating-point operation for overflow (± infinite) and invalid floating-point number (NaN).

- A limit violation is indicated by IN &gt; MAX or ""+ infinite"". ",What triggers an F-STOP in the safety program?,A4,The safety program halts with an F-STOP upon encountering safety data format errors.,1.953125,1.984375,3.28125,1.234375,0.4375
44,pcs7_compendium_part_b_en-US_en-US.txt,37,5dea5c3b1bc7a2a2d3707ace8a7d6e3ed157196366f8ee88ba630fadc3d36b0e,"Changes to the input parameters of F blocks with F data types can be made as follows:

- Offline with the assistance of the CFC editor
- Online using CFC test mode with safety mode deactivated

Note

Values of PAR_ID and COMPLEM must not be changed. If errors in the safety data format are detected during the execution of the safety program, an F-STOP is triggered.

# 7.2.4 Run sequence of F-blocks

# Defining the run sequence

You define the run sequence in the CFC editor in the same way as for a standard user program. Changing the run sequence also changes the collective signature.

# Correct run sequence of F-blocks

The sequence of the F-blocks within the F-shutdown group is relevant. The number of F-runtime groups the F-shutdown group has been split into is of no relevance. Essentially, the correct run sequence of the various F-block types is as follows:

1. Placed automatically:
- F module driver for F-signal modules with inputs or with inputs and outputs
- F-communications blocks and F-system blocks for receiving
- F blocks for data conversion from standard value to F-structure
- F modules with OS connection
2. F channel drivers for inputs
3. F blocks for user logic

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

1. F channel drivers for outputs
2. Placed automatically:
- F block F_PLK
- F block F_PSG_M
- F module driver for F-signal modules with outputs or with inputs and outputs
- F-communications blocks and F-system blocks for sending
- F block F_PLK_O
- F block F_DIAG (S7 F-Systems Lib V1_3 and higher)

The run sequence of the blocks listed under items 1 and 5 is adjusted automatically when the F-program is compiled.
As if S7 F Systems Lib V1_3, separate runtime groups are created for the F blocks listed under points 1 and 5 during the first compilation.
The IPO principle (input, process, output) must always be observed when placing F-channel drivers and F-blocks for user logic.
This ensures that all inputs are read first, the relevant processing steps are performed, and all outputs are then written.
Furthermore, F-runtime groups and F-monitoring blocks that are only visible following compilation are also added automatically.

Note

No changes may be made in the automatically added runtime groups with the exception of the scan cycle monitoring on ""F_CYC_CO"" blocks and the parameter assignment of the ""F_SHUTDN"" block.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.5 F-runtime groups

During the programming of the safety program, F-blocks cannot be inserted directly into tasks (cyclic interrupt OBs). When a new CFC chart is created in PCS 7, the system will automatically generate a runtime group of the same name, into which the F-blocks placed in the corresponding CFC chart can then be inserted. An F-runtime group only becomes an F-runtime group (identified by a yellow folder and ""F"") when F-blocks are called in it.

0B37 [Cyclic interrupt7] (300 ms)
@CPU_RTI@CPU_RT
@F_ShutDn_37 (300 ms)
@F_ShutDn (300 ms)
CycCo-QB37 (300 ms)
CycCo-OB3ZIF_CYC_CO-OB37
@F_CycCo-OB3ZIF_TEST
@F_CycCo-OB37IF_TESTC
@F_TestMode (300 ms)
@F_IN_37_0 (300 ms)
SFC_109_F (300 ms)
AI_F (300 ms)
HS104_F (300 ms)
@F_OUT_37_0 (300 ms)
@F_DbIniti (300 ms)
0B38 [Cycic interrupta] (10 ms)

# Runtime groups of an F-program

The F-program is divided into several runtime groups, as shown in the table below.

Note

xx = Number of the cyclic interrupt OB

y = Consecutive numbering if several shutdown groups exist in a single cyclic interrupt OB

|Chart|F blocks|
|---|---|
|@F_ShutDn_xx|Shutdown logic of cyclic interrupt OB The shutdown logic is created with RTGLOGIC and standard logic blocks.|
|@F_ShutDn|Shutdown block Where an F-program is present in several cyclic interrupt OBs, this runtime group is integrated into the cyclic interrupt OB with the shortest call time. The shutdown logic is created with F_SHUTDN, RTGLOGIC, and standard logic blocks.|
|@F_CycCo-OBxx|F_CYC_CO, F_TEST and F_TESTC (for tests)|
|@F_TestMode|F_TESTM for managing safety mode|
|@F_IN_xx_y|F blocks which supply input values for the F-program (F_QUITES, communication receive blocks, conversion blocks from standard to F-data types, drivers for F-input modules) Runtime groups with user logic, in the sequence in which they were created by the user|

Compendium Part B - Process Safety (V9.0)
Operating Manual, 04/2018, A5E43228905-AA

# 7.2 Creating the safety program

@F_OUT_xx_y Blocks which further process output values of F-blocks (communication send blocks, conversion blocks from F-to standard data types, drivers for F-output modules, F_PLK, F_PLK_O, and F_DIAG for program sequence control)

@F_DbInitxx DB_INIT function block required for the cold restart of an F-runtime group

All required error OBs are added to the block container in the SIMATIC Manager.

There should only be one @F_IN_xx_y runtime group before the first F-user runtime group and one @F_OUT_xx_y runtime group after the last F-user runtime group. If the safety program consists of several shutdown groups (see section 6.2.6 (Page 87)), there is the @F_IN_xx_y and @F_OUT_xx_y runtime group both before and after the F-user runtime group in the shutdown groups.

# Rules for F-runtime groups in the safety program

- We recommend that you proceed as follows in order to make the lengths of the F-cycles as uniform as possible:
If you mix F-and standard runtime groups in a cyclic interrupt OB, you must execute the F-runtime groups before the standard runtime groups.
- The following defaults are set for properties of an F-runtime group:
- Reduction ratio = 1
- Phase offset = 0
- Properties Runtime Group
- Task: 0B37
- Name: HS104
- Comment:
- Reduction ratio:
- Phase offset:
- Optimize run sequence
- Active:
- You are not permitted to move automatically generated F-runtime groups (identified by @).

Note: The feature: Optimize Run Sequence in CFC can lead to a change in the collective signature and impair the response times of the safety program, and therefore should not be used in F-runtime groups.

With PCS 7 V7.0 SP1 and higher, it is no longer possible to optimize the run sequence for cyclic interrupt OBs with F-runtime groups.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.6 F-shutdown groups

An F-shutdown group is a self-contained unit in your safety program. It contains user logic which is executed or shut down simultaneously. The F-shutdown group contains one or a number of F-runtime groups which are assigned to a common cyclic interrupt OB. You can choose whether an error during execution of the safety program causes a full shutdown or a partial shutdown of the safety program. With a partial shutdown, only the F-shutdown group in which the error occurred is shut down.

# Rules for F-shutdown groups in the safety program

You are not permitted to directly interconnect F-blocks in different F-shutdown groups. Data can only be exchanged between F-shutdown groups using special communication blocks (F_S_xx, F_R_xx for F_BOOL and F_REAL data structures). Therefore, all F-channel drivers in an F-signal module must be in the same F-shutdown group, together with the module driver of the F-signal module.

# Defining F-shutdown groups

As soon as you place F-blocks in the CFC editor for the first time, all of the F-runtime groups in a single cyclic interrupt OB will form an F-shutdown group. You can configure each F-runtime group as the last F-runtime group in an F-shutdown group by placing the F_PSG_M ""selection block"". The F-system then creates a new F-shutdown group for all subsequent F-runtime groups until another F_PSG_M block is found.

# Distribution/Combination by means of manual placing of F_PSG_M

If you add or delete one or a number of F_PSG_M blocks in your project, the order of your F-shutdown groups will change. If you make a change to the layout of your F-shutdown groups, you must make sure that the F-module drivers and all assigned F-channel drivers are integrated in the same F-shutdown group. You can split one F-shutdown group into two F-shutdown groups. To do this, in the CFC editor's runtime editor, place the F_PSG_M block in the last F-runtime group which is to be assigned to the first F-shutdown group. All subsequent F-runtime groups will then be assigned to the second F-shutdown group. The number of F-shutdown groups is limited to 110 in all cyclic interrupt OBs. The system restricts the number of F-runtime groups in an F-shutdown group. You have the option of combining two F-shutdown groups. To do this, in the runtime editor of the CFC editor, delete the F_PSG_M block between the F-shutdown groups. If you combine a number of F-shutdown groups which exchange data via F-communication blocks in a single F-shutdown group, you need to remove these F-communications blocks and replace them with direct interconnections.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# Programming data exchange between F-shutdown groups

If you wish to exchange data between two F-shutdown groups, you are not permitted to interconnect the inputs and outputs directly. You need to use the following F-system blocks for data exchange between F blocks in different F-shutdown groups:

|F block|Description|
|---|---|
|F_S_R/F_R_R|Safe transfer of 5 data of the F_REAL type|
|F_S_BO/F_R_BO|Safe transfer of 5 data of the F_BOOL type|

# Procedure for data exchange

1. In the F-shutdown group from which data is to be transferred, add an F_S_R or F_S_BO type F-block.
2. In the F-shutdown group to which data is to be transferred, add an F_R_R or F_R_BO type F-block.
3. Interconnect the SD_R_xx inputs of the F_S_R or the SD_BO_xx inputs of the F_S_BO with the data to be transferred.
4. Interconnect the RD_R_xx outputs of the F_R_R or the RD_BO_xx outputs of the F_R_BO with the inputs of the F-block for further processing of the data received.
5. Interconnect the S_DB output of the send block with the S_DB input of the associated receive block.
6. Configure the TIMEOUT inputs of the F_R_R and F_R_BO receive blocks with the F-monitoring time calculated.
7. Configure the receive block substitute values for the scenario of a shutdown of the sending shutdown group.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Extract from a chart for shutdown group 1 with send block:

|42617|7ail-|7133 Cor|CHLDEA F|1e-0- Ck_INE|
|---|---|---|---|---|
|JdEO|90_8o_|J0_EO|90_BO|JD_Bo_|
|11_112|J0_EO_07|32_80_08|7193 Coz|CHLDEA|
|Q_EAII|4212 bloel|PaJJ_CX|0_Kod|ubSime|
|4nu|Lou|JG RG|P3c >| |

The connection to shutdown group 2 is established by linking output S_DB of block F_S_BO_1 in shutdown group 1 with input S_DB on block F_R_BO_1 in shutdown group 2.

Extract from a chart for shutdown group 2 with receive block:

|Xbaeha|32430|netr|
|---|---|---|
|314 = doxr|3281p|REC_E?|
|Recei|ER EL|RD_BO_|
|RD_BO_|8088Q_01|RD_EQ|
|RD_E?|302ZD|RD_Lo|

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

89

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.7 Data exchange between the F user program and standard user program

The standard program and the F-program use different data formats. Accordingly, special conversion blocks have to be used for data exchange.

F-CPU
F-program
Conversion blocks
Standard program
Converting F-data types to standard data types

If you need the standard user program to process data from the F-program further (for monitoring on the PCS 7 OS, for example), a block for F_FDatatype_Datatype data conversion will have to be interconnected in the user program so that the F-data types can be converted into standard data types. This converter blocks must be called in the standard user program (standard runtime group).

Extract from a process tag chart; converting the ""QBAD"" signal from F_BOOL to BOOL:

Note

The figure is available in its original size as appendix to the manual in the ZIP download of the checklists.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Standard and F-blocks are in different runtime groups. As shown here, some F-blocks have outputs (depicted in gray), which can be directly interconnected with standard PCS 7 blocks. PCS 7 blocks such as MonAnL, MonDiL, EventMESSAGE and their associated faceplates and process symbols are used to visualize fail-safe analog values and status messages as well as system states and operating states. If parameters cannot be directly further interconnected due to the safety data format, the conversion blocks described above can be used.

# Converting standard data types into F-data types

If data from the standard user program is to be processed further in the F-program, it will need to be converted. The blocks for data conversion from standard data types to F-data types (F_datatype_Fdatatype) can only be used in the F-program (F-runtime group).

Extract from an F-chart, conversion from REAL to F_REAL:

|7_R_FR_CONv|R -B|CE 32|CB39|:RELL|Aulci|
|---|---|---|---|---|---|
|DAII ZROC3?|VALUE DiT| | | | |

Note: The conversion blocks only perform data conversion; in other words, you will need to program additional measures in the F-program for plausibility checking purposes (with F_LIM_R, for example), in order to ensure that only non-hazardous values are possible.

# 7.2.8 How F-blocks with floating-point operations respond to number range overflows

Within the context of analog value processing, number range overflows/underflows can occur during arithmetic calculations (with division by 0, root from a negative number or number range overflow). With S7 F Systems Lib V1_3 and higher, the response is as follows in this case: The results ""Overflow (± infinite)"", ""Denormalized floating-point number"" or ""Invalid floating-point number (NaN)"" are:

- Either output at the output and can be processed further by subsequent F blocks
- Or signaled to special outputs. A substitute value is output if necessary.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

91

# Configuring the safety program

# 7.2 Creating the safety program

If the floating-point operation produces an invalid floating-point number (NaN) and no invalid floating-point number (NaN) existed as an address prior to this, the following diagnostics event will be entered in the F CPU's diagnostic buffer:

""Safety program: Invalid REAL number in DB"" (event ID 16#75D9)

You can use this entry in the diagnostic buffer to identify the F block with the invalid floating-point number (NaN).

If you are not able to prevent these events from occurring in your safety program, you will need to decide, on the basis of your application, whether you wish to respond to them in your safety program.

|AD?|nddie|101.o = 101.0_|10o.0|-10q|CUIL|5035|
|---|---|---|---|---|---|---|
|AD?|indoic|0b37 1.0e+3e|:Addle|0etz|3.0e-3e|10o.0|
| |100.0|3.0e-38| |CUIL|AD_|:itis|
|0837i|LIN_R|08371|#Addic|3402-32|c0m| |
| |ce-JE| |CUII|Sms|AD?|0BJ7i|
|Addue|J1o|~10O|02-J8|~100.0|CuTO|100.0=|
|DIV|LIK_R|:tris|100.0_| |100.-|CutQ|
|0.0|502S|SoRT|HXR|:Squo-|{AJi|hal|
|-10o.05|CVIQ|CUIL|5023_W| | | |

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.3 Configuring fail-safe AS-AS communication

You can use the F_LIM_R F block to check the result of a floating-point operation for overflow (± infinite) and invalid floating-point number (NaN).

- A limit violation is indicated by IN &gt; MAX or ""+ infinite"". ",What triggers an F-STOP in the safety program?,A5,An F-STOP is activated when the safety program identifies inaccuracies in the safety data format.,1.921875,1.9921875,3.515625,1.0703125,0.37890625
45,pcs7_compendium_part_b_en-US_en-US.txt,37,5dea5c3b1bc7a2a2d3707ace8a7d6e3ed157196366f8ee88ba630fadc3d36b0e,"Changes to the input parameters of F blocks with F data types can be made as follows:

- Offline with the assistance of the CFC editor
- Online using CFC test mode with safety mode deactivated

Note

Values of PAR_ID and COMPLEM must not be changed. If errors in the safety data format are detected during the execution of the safety program, an F-STOP is triggered.

# 7.2.4 Run sequence of F-blocks

# Defining the run sequence

You define the run sequence in the CFC editor in the same way as for a standard user program. Changing the run sequence also changes the collective signature.

# Correct run sequence of F-blocks

The sequence of the F-blocks within the F-shutdown group is relevant. The number of F-runtime groups the F-shutdown group has been split into is of no relevance. Essentially, the correct run sequence of the various F-block types is as follows:

1. Placed automatically:
- F module driver for F-signal modules with inputs or with inputs and outputs
- F-communications blocks and F-system blocks for receiving
- F blocks for data conversion from standard value to F-structure
- F modules with OS connection
2. F channel drivers for inputs
3. F blocks for user logic

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

1. F channel drivers for outputs
2. Placed automatically:
- F block F_PLK
- F block F_PSG_M
- F module driver for F-signal modules with outputs or with inputs and outputs
- F-communications blocks and F-system blocks for sending
- F block F_PLK_O
- F block F_DIAG (S7 F-Systems Lib V1_3 and higher)

The run sequence of the blocks listed under items 1 and 5 is adjusted automatically when the F-program is compiled.
As if S7 F Systems Lib V1_3, separate runtime groups are created for the F blocks listed under points 1 and 5 during the first compilation.
The IPO principle (input, process, output) must always be observed when placing F-channel drivers and F-blocks for user logic.
This ensures that all inputs are read first, the relevant processing steps are performed, and all outputs are then written.
Furthermore, F-runtime groups and F-monitoring blocks that are only visible following compilation are also added automatically.

Note

No changes may be made in the automatically added runtime groups with the exception of the scan cycle monitoring on ""F_CYC_CO"" blocks and the parameter assignment of the ""F_SHUTDN"" block.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.5 F-runtime groups

During the programming of the safety program, F-blocks cannot be inserted directly into tasks (cyclic interrupt OBs). When a new CFC chart is created in PCS 7, the system will automatically generate a runtime group of the same name, into which the F-blocks placed in the corresponding CFC chart can then be inserted. An F-runtime group only becomes an F-runtime group (identified by a yellow folder and ""F"") when F-blocks are called in it.

0B37 [Cyclic interrupt7] (300 ms)
@CPU_RTI@CPU_RT
@F_ShutDn_37 (300 ms)
@F_ShutDn (300 ms)
CycCo-QB37 (300 ms)
CycCo-OB3ZIF_CYC_CO-OB37
@F_CycCo-OB3ZIF_TEST
@F_CycCo-OB37IF_TESTC
@F_TestMode (300 ms)
@F_IN_37_0 (300 ms)
SFC_109_F (300 ms)
AI_F (300 ms)
HS104_F (300 ms)
@F_OUT_37_0 (300 ms)
@F_DbIniti (300 ms)
0B38 [Cycic interrupta] (10 ms)

# Runtime groups of an F-program

The F-program is divided into several runtime groups, as shown in the table below.

Note

xx = Number of the cyclic interrupt OB

y = Consecutive numbering if several shutdown groups exist in a single cyclic interrupt OB

|Chart|F blocks|
|---|---|
|@F_ShutDn_xx|Shutdown logic of cyclic interrupt OB The shutdown logic is created with RTGLOGIC and standard logic blocks.|
|@F_ShutDn|Shutdown block Where an F-program is present in several cyclic interrupt OBs, this runtime group is integrated into the cyclic interrupt OB with the shortest call time. The shutdown logic is created with F_SHUTDN, RTGLOGIC, and standard logic blocks.|
|@F_CycCo-OBxx|F_CYC_CO, F_TEST and F_TESTC (for tests)|
|@F_TestMode|F_TESTM for managing safety mode|
|@F_IN_xx_y|F blocks which supply input values for the F-program (F_QUITES, communication receive blocks, conversion blocks from standard to F-data types, drivers for F-input modules) Runtime groups with user logic, in the sequence in which they were created by the user|

Compendium Part B - Process Safety (V9.0)
Operating Manual, 04/2018, A5E43228905-AA

# 7.2 Creating the safety program

@F_OUT_xx_y Blocks which further process output values of F-blocks (communication send blocks, conversion blocks from F-to standard data types, drivers for F-output modules, F_PLK, F_PLK_O, and F_DIAG for program sequence control)

@F_DbInitxx DB_INIT function block required for the cold restart of an F-runtime group

All required error OBs are added to the block container in the SIMATIC Manager.

There should only be one @F_IN_xx_y runtime group before the first F-user runtime group and one @F_OUT_xx_y runtime group after the last F-user runtime group. If the safety program consists of several shutdown groups (see section 6.2.6 (Page 87)), there is the @F_IN_xx_y and @F_OUT_xx_y runtime group both before and after the F-user runtime group in the shutdown groups.

# Rules for F-runtime groups in the safety program

- We recommend that you proceed as follows in order to make the lengths of the F-cycles as uniform as possible:
If you mix F-and standard runtime groups in a cyclic interrupt OB, you must execute the F-runtime groups before the standard runtime groups.
- The following defaults are set for properties of an F-runtime group:
- Reduction ratio = 1
- Phase offset = 0
- Properties Runtime Group
- Task: 0B37
- Name: HS104
- Comment:
- Reduction ratio:
- Phase offset:
- Optimize run sequence
- Active:
- You are not permitted to move automatically generated F-runtime groups (identified by @).

Note: The feature: Optimize Run Sequence in CFC can lead to a change in the collective signature and impair the response times of the safety program, and therefore should not be used in F-runtime groups.

With PCS 7 V7.0 SP1 and higher, it is no longer possible to optimize the run sequence for cyclic interrupt OBs with F-runtime groups.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.6 F-shutdown groups

An F-shutdown group is a self-contained unit in your safety program. It contains user logic which is executed or shut down simultaneously. The F-shutdown group contains one or a number of F-runtime groups which are assigned to a common cyclic interrupt OB. You can choose whether an error during execution of the safety program causes a full shutdown or a partial shutdown of the safety program. With a partial shutdown, only the F-shutdown group in which the error occurred is shut down.

# Rules for F-shutdown groups in the safety program

You are not permitted to directly interconnect F-blocks in different F-shutdown groups. Data can only be exchanged between F-shutdown groups using special communication blocks (F_S_xx, F_R_xx for F_BOOL and F_REAL data structures). Therefore, all F-channel drivers in an F-signal module must be in the same F-shutdown group, together with the module driver of the F-signal module.

# Defining F-shutdown groups

As soon as you place F-blocks in the CFC editor for the first time, all of the F-runtime groups in a single cyclic interrupt OB will form an F-shutdown group. You can configure each F-runtime group as the last F-runtime group in an F-shutdown group by placing the F_PSG_M ""selection block"". The F-system then creates a new F-shutdown group for all subsequent F-runtime groups until another F_PSG_M block is found.

# Distribution/Combination by means of manual placing of F_PSG_M

If you add or delete one or a number of F_PSG_M blocks in your project, the order of your F-shutdown groups will change. If you make a change to the layout of your F-shutdown groups, you must make sure that the F-module drivers and all assigned F-channel drivers are integrated in the same F-shutdown group. You can split one F-shutdown group into two F-shutdown groups. To do this, in the CFC editor's runtime editor, place the F_PSG_M block in the last F-runtime group which is to be assigned to the first F-shutdown group. All subsequent F-runtime groups will then be assigned to the second F-shutdown group. The number of F-shutdown groups is limited to 110 in all cyclic interrupt OBs. The system restricts the number of F-runtime groups in an F-shutdown group. You have the option of combining two F-shutdown groups. To do this, in the runtime editor of the CFC editor, delete the F_PSG_M block between the F-shutdown groups. If you combine a number of F-shutdown groups which exchange data via F-communication blocks in a single F-shutdown group, you need to remove these F-communications blocks and replace them with direct interconnections.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# Programming data exchange between F-shutdown groups

If you wish to exchange data between two F-shutdown groups, you are not permitted to interconnect the inputs and outputs directly. You need to use the following F-system blocks for data exchange between F blocks in different F-shutdown groups:

|F block|Description|
|---|---|
|F_S_R/F_R_R|Safe transfer of 5 data of the F_REAL type|
|F_S_BO/F_R_BO|Safe transfer of 5 data of the F_BOOL type|

# Procedure for data exchange

1. In the F-shutdown group from which data is to be transferred, add an F_S_R or F_S_BO type F-block.
2. In the F-shutdown group to which data is to be transferred, add an F_R_R or F_R_BO type F-block.
3. Interconnect the SD_R_xx inputs of the F_S_R or the SD_BO_xx inputs of the F_S_BO with the data to be transferred.
4. Interconnect the RD_R_xx outputs of the F_R_R or the RD_BO_xx outputs of the F_R_BO with the inputs of the F-block for further processing of the data received.
5. Interconnect the S_DB output of the send block with the S_DB input of the associated receive block.
6. Configure the TIMEOUT inputs of the F_R_R and F_R_BO receive blocks with the F-monitoring time calculated.
7. Configure the receive block substitute values for the scenario of a shutdown of the sending shutdown group.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Extract from a chart for shutdown group 1 with send block:

|42617|7ail-|7133 Cor|CHLDEA F|1e-0- Ck_INE|
|---|---|---|---|---|
|JdEO|90_8o_|J0_EO|90_BO|JD_Bo_|
|11_112|J0_EO_07|32_80_08|7193 Coz|CHLDEA|
|Q_EAII|4212 bloel|PaJJ_CX|0_Kod|ubSime|
|4nu|Lou|JG RG|P3c >| |

The connection to shutdown group 2 is established by linking output S_DB of block F_S_BO_1 in shutdown group 1 with input S_DB on block F_R_BO_1 in shutdown group 2.

Extract from a chart for shutdown group 2 with receive block:

|Xbaeha|32430|netr|
|---|---|---|
|314 = doxr|3281p|REC_E?|
|Recei|ER EL|RD_BO_|
|RD_BO_|8088Q_01|RD_EQ|
|RD_E?|302ZD|RD_Lo|

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

89

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.7 Data exchange between the F user program and standard user program

The standard program and the F-program use different data formats. Accordingly, special conversion blocks have to be used for data exchange.

F-CPU
F-program
Conversion blocks
Standard program
Converting F-data types to standard data types

If you need the standard user program to process data from the F-program further (for monitoring on the PCS 7 OS, for example), a block for F_FDatatype_Datatype data conversion will have to be interconnected in the user program so that the F-data types can be converted into standard data types. This converter blocks must be called in the standard user program (standard runtime group).

Extract from a process tag chart; converting the ""QBAD"" signal from F_BOOL to BOOL:

Note

The figure is available in its original size as appendix to the manual in the ZIP download of the checklists.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Standard and F-blocks are in different runtime groups. As shown here, some F-blocks have outputs (depicted in gray), which can be directly interconnected with standard PCS 7 blocks. PCS 7 blocks such as MonAnL, MonDiL, EventMESSAGE and their associated faceplates and process symbols are used to visualize fail-safe analog values and status messages as well as system states and operating states. If parameters cannot be directly further interconnected due to the safety data format, the conversion blocks described above can be used.

# Converting standard data types into F-data types

If data from the standard user program is to be processed further in the F-program, it will need to be converted. The blocks for data conversion from standard data types to F-data types (F_datatype_Fdatatype) can only be used in the F-program (F-runtime group).

Extract from an F-chart, conversion from REAL to F_REAL:

|7_R_FR_CONv|R -B|CE 32|CB39|:RELL|Aulci|
|---|---|---|---|---|---|
|DAII ZROC3?|VALUE DiT| | | | |

Note: The conversion blocks only perform data conversion; in other words, you will need to program additional measures in the F-program for plausibility checking purposes (with F_LIM_R, for example), in order to ensure that only non-hazardous values are possible.

# 7.2.8 How F-blocks with floating-point operations respond to number range overflows

Within the context of analog value processing, number range overflows/underflows can occur during arithmetic calculations (with division by 0, root from a negative number or number range overflow). With S7 F Systems Lib V1_3 and higher, the response is as follows in this case: The results ""Overflow (± infinite)"", ""Denormalized floating-point number"" or ""Invalid floating-point number (NaN)"" are:

- Either output at the output and can be processed further by subsequent F blocks
- Or signaled to special outputs. A substitute value is output if necessary.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

91

# Configuring the safety program

# 7.2 Creating the safety program

If the floating-point operation produces an invalid floating-point number (NaN) and no invalid floating-point number (NaN) existed as an address prior to this, the following diagnostics event will be entered in the F CPU's diagnostic buffer:

""Safety program: Invalid REAL number in DB"" (event ID 16#75D9)

You can use this entry in the diagnostic buffer to identify the F block with the invalid floating-point number (NaN).

If you are not able to prevent these events from occurring in your safety program, you will need to decide, on the basis of your application, whether you wish to respond to them in your safety program.

|AD?|nddie|101.o = 101.0_|10o.0|-10q|CUIL|5035|
|---|---|---|---|---|---|---|
|AD?|indoic|0b37 1.0e+3e|:Addle|0etz|3.0e-3e|10o.0|
| |100.0|3.0e-38| |CUIL|AD_|:itis|
|0837i|LIN_R|08371|#Addic|3402-32|c0m| |
| |ce-JE| |CUII|Sms|AD?|0BJ7i|
|Addue|J1o|~10O|02-J8|~100.0|CuTO|100.0=|
|DIV|LIK_R|:tris|100.0_| |100.-|CutQ|
|0.0|502S|SoRT|HXR|:Squo-|{AJi|hal|
|-10o.05|CVIQ|CUIL|5023_W| | | |

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.3 Configuring fail-safe AS-AS communication

You can use the F_LIM_R F block to check the result of a floating-point operation for overflow (± infinite) and invalid floating-point number (NaN).

- A limit violation is indicated by IN &gt; MAX or ""+ infinite"". ",Which parameters must not be changed in the safety program according to the 'Compendium Part B - Process Safety (V9.0)'?,A1,The values of PAR_ID and COMPLEM must not be changed.,1.5546875,1.65625,3.328125,1.0625,0.279296875
46,pcs7_compendium_part_b_en-US_en-US.txt,37,5dea5c3b1bc7a2a2d3707ace8a7d6e3ed157196366f8ee88ba630fadc3d36b0e,"Changes to the input parameters of F blocks with F data types can be made as follows:

- Offline with the assistance of the CFC editor
- Online using CFC test mode with safety mode deactivated

Note

Values of PAR_ID and COMPLEM must not be changed. If errors in the safety data format are detected during the execution of the safety program, an F-STOP is triggered.

# 7.2.4 Run sequence of F-blocks

# Defining the run sequence

You define the run sequence in the CFC editor in the same way as for a standard user program. Changing the run sequence also changes the collective signature.

# Correct run sequence of F-blocks

The sequence of the F-blocks within the F-shutdown group is relevant. The number of F-runtime groups the F-shutdown group has been split into is of no relevance. Essentially, the correct run sequence of the various F-block types is as follows:

1. Placed automatically:
- F module driver for F-signal modules with inputs or with inputs and outputs
- F-communications blocks and F-system blocks for receiving
- F blocks for data conversion from standard value to F-structure
- F modules with OS connection
2. F channel drivers for inputs
3. F blocks for user logic

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

1. F channel drivers for outputs
2. Placed automatically:
- F block F_PLK
- F block F_PSG_M
- F module driver for F-signal modules with outputs or with inputs and outputs
- F-communications blocks and F-system blocks for sending
- F block F_PLK_O
- F block F_DIAG (S7 F-Systems Lib V1_3 and higher)

The run sequence of the blocks listed under items 1 and 5 is adjusted automatically when the F-program is compiled.
As if S7 F Systems Lib V1_3, separate runtime groups are created for the F blocks listed under points 1 and 5 during the first compilation.
The IPO principle (input, process, output) must always be observed when placing F-channel drivers and F-blocks for user logic.
This ensures that all inputs are read first, the relevant processing steps are performed, and all outputs are then written.
Furthermore, F-runtime groups and F-monitoring blocks that are only visible following compilation are also added automatically.

Note

No changes may be made in the automatically added runtime groups with the exception of the scan cycle monitoring on ""F_CYC_CO"" blocks and the parameter assignment of the ""F_SHUTDN"" block.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.5 F-runtime groups

During the programming of the safety program, F-blocks cannot be inserted directly into tasks (cyclic interrupt OBs). When a new CFC chart is created in PCS 7, the system will automatically generate a runtime group of the same name, into which the F-blocks placed in the corresponding CFC chart can then be inserted. An F-runtime group only becomes an F-runtime group (identified by a yellow folder and ""F"") when F-blocks are called in it.

0B37 [Cyclic interrupt7] (300 ms)
@CPU_RTI@CPU_RT
@F_ShutDn_37 (300 ms)
@F_ShutDn (300 ms)
CycCo-QB37 (300 ms)
CycCo-OB3ZIF_CYC_CO-OB37
@F_CycCo-OB3ZIF_TEST
@F_CycCo-OB37IF_TESTC
@F_TestMode (300 ms)
@F_IN_37_0 (300 ms)
SFC_109_F (300 ms)
AI_F (300 ms)
HS104_F (300 ms)
@F_OUT_37_0 (300 ms)
@F_DbIniti (300 ms)
0B38 [Cycic interrupta] (10 ms)

# Runtime groups of an F-program

The F-program is divided into several runtime groups, as shown in the table below.

Note

xx = Number of the cyclic interrupt OB

y = Consecutive numbering if several shutdown groups exist in a single cyclic interrupt OB

|Chart|F blocks|
|---|---|
|@F_ShutDn_xx|Shutdown logic of cyclic interrupt OB The shutdown logic is created with RTGLOGIC and standard logic blocks.|
|@F_ShutDn|Shutdown block Where an F-program is present in several cyclic interrupt OBs, this runtime group is integrated into the cyclic interrupt OB with the shortest call time. The shutdown logic is created with F_SHUTDN, RTGLOGIC, and standard logic blocks.|
|@F_CycCo-OBxx|F_CYC_CO, F_TEST and F_TESTC (for tests)|
|@F_TestMode|F_TESTM for managing safety mode|
|@F_IN_xx_y|F blocks which supply input values for the F-program (F_QUITES, communication receive blocks, conversion blocks from standard to F-data types, drivers for F-input modules) Runtime groups with user logic, in the sequence in which they were created by the user|

Compendium Part B - Process Safety (V9.0)
Operating Manual, 04/2018, A5E43228905-AA

# 7.2 Creating the safety program

@F_OUT_xx_y Blocks which further process output values of F-blocks (communication send blocks, conversion blocks from F-to standard data types, drivers for F-output modules, F_PLK, F_PLK_O, and F_DIAG for program sequence control)

@F_DbInitxx DB_INIT function block required for the cold restart of an F-runtime group

All required error OBs are added to the block container in the SIMATIC Manager.

There should only be one @F_IN_xx_y runtime group before the first F-user runtime group and one @F_OUT_xx_y runtime group after the last F-user runtime group. If the safety program consists of several shutdown groups (see section 6.2.6 (Page 87)), there is the @F_IN_xx_y and @F_OUT_xx_y runtime group both before and after the F-user runtime group in the shutdown groups.

# Rules for F-runtime groups in the safety program

- We recommend that you proceed as follows in order to make the lengths of the F-cycles as uniform as possible:
If you mix F-and standard runtime groups in a cyclic interrupt OB, you must execute the F-runtime groups before the standard runtime groups.
- The following defaults are set for properties of an F-runtime group:
- Reduction ratio = 1
- Phase offset = 0
- Properties Runtime Group
- Task: 0B37
- Name: HS104
- Comment:
- Reduction ratio:
- Phase offset:
- Optimize run sequence
- Active:
- You are not permitted to move automatically generated F-runtime groups (identified by @).

Note: The feature: Optimize Run Sequence in CFC can lead to a change in the collective signature and impair the response times of the safety program, and therefore should not be used in F-runtime groups.

With PCS 7 V7.0 SP1 and higher, it is no longer possible to optimize the run sequence for cyclic interrupt OBs with F-runtime groups.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.6 F-shutdown groups

An F-shutdown group is a self-contained unit in your safety program. It contains user logic which is executed or shut down simultaneously. The F-shutdown group contains one or a number of F-runtime groups which are assigned to a common cyclic interrupt OB. You can choose whether an error during execution of the safety program causes a full shutdown or a partial shutdown of the safety program. With a partial shutdown, only the F-shutdown group in which the error occurred is shut down.

# Rules for F-shutdown groups in the safety program

You are not permitted to directly interconnect F-blocks in different F-shutdown groups. Data can only be exchanged between F-shutdown groups using special communication blocks (F_S_xx, F_R_xx for F_BOOL and F_REAL data structures). Therefore, all F-channel drivers in an F-signal module must be in the same F-shutdown group, together with the module driver of the F-signal module.

# Defining F-shutdown groups

As soon as you place F-blocks in the CFC editor for the first time, all of the F-runtime groups in a single cyclic interrupt OB will form an F-shutdown group. You can configure each F-runtime group as the last F-runtime group in an F-shutdown group by placing the F_PSG_M ""selection block"". The F-system then creates a new F-shutdown group for all subsequent F-runtime groups until another F_PSG_M block is found.

# Distribution/Combination by means of manual placing of F_PSG_M

If you add or delete one or a number of F_PSG_M blocks in your project, the order of your F-shutdown groups will change. If you make a change to the layout of your F-shutdown groups, you must make sure that the F-module drivers and all assigned F-channel drivers are integrated in the same F-shutdown group. You can split one F-shutdown group into two F-shutdown groups. To do this, in the CFC editor's runtime editor, place the F_PSG_M block in the last F-runtime group which is to be assigned to the first F-shutdown group. All subsequent F-runtime groups will then be assigned to the second F-shutdown group. The number of F-shutdown groups is limited to 110 in all cyclic interrupt OBs. The system restricts the number of F-runtime groups in an F-shutdown group. You have the option of combining two F-shutdown groups. To do this, in the runtime editor of the CFC editor, delete the F_PSG_M block between the F-shutdown groups. If you combine a number of F-shutdown groups which exchange data via F-communication blocks in a single F-shutdown group, you need to remove these F-communications blocks and replace them with direct interconnections.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# Programming data exchange between F-shutdown groups

If you wish to exchange data between two F-shutdown groups, you are not permitted to interconnect the inputs and outputs directly. You need to use the following F-system blocks for data exchange between F blocks in different F-shutdown groups:

|F block|Description|
|---|---|
|F_S_R/F_R_R|Safe transfer of 5 data of the F_REAL type|
|F_S_BO/F_R_BO|Safe transfer of 5 data of the F_BOOL type|

# Procedure for data exchange

1. In the F-shutdown group from which data is to be transferred, add an F_S_R or F_S_BO type F-block.
2. In the F-shutdown group to which data is to be transferred, add an F_R_R or F_R_BO type F-block.
3. Interconnect the SD_R_xx inputs of the F_S_R or the SD_BO_xx inputs of the F_S_BO with the data to be transferred.
4. Interconnect the RD_R_xx outputs of the F_R_R or the RD_BO_xx outputs of the F_R_BO with the inputs of the F-block for further processing of the data received.
5. Interconnect the S_DB output of the send block with the S_DB input of the associated receive block.
6. Configure the TIMEOUT inputs of the F_R_R and F_R_BO receive blocks with the F-monitoring time calculated.
7. Configure the receive block substitute values for the scenario of a shutdown of the sending shutdown group.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Extract from a chart for shutdown group 1 with send block:

|42617|7ail-|7133 Cor|CHLDEA F|1e-0- Ck_INE|
|---|---|---|---|---|
|JdEO|90_8o_|J0_EO|90_BO|JD_Bo_|
|11_112|J0_EO_07|32_80_08|7193 Coz|CHLDEA|
|Q_EAII|4212 bloel|PaJJ_CX|0_Kod|ubSime|
|4nu|Lou|JG RG|P3c >| |

The connection to shutdown group 2 is established by linking output S_DB of block F_S_BO_1 in shutdown group 1 with input S_DB on block F_R_BO_1 in shutdown group 2.

Extract from a chart for shutdown group 2 with receive block:

|Xbaeha|32430|netr|
|---|---|---|
|314 = doxr|3281p|REC_E?|
|Recei|ER EL|RD_BO_|
|RD_BO_|8088Q_01|RD_EQ|
|RD_E?|302ZD|RD_Lo|

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

89

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.7 Data exchange between the F user program and standard user program

The standard program and the F-program use different data formats. Accordingly, special conversion blocks have to be used for data exchange.

F-CPU
F-program
Conversion blocks
Standard program
Converting F-data types to standard data types

If you need the standard user program to process data from the F-program further (for monitoring on the PCS 7 OS, for example), a block for F_FDatatype_Datatype data conversion will have to be interconnected in the user program so that the F-data types can be converted into standard data types. This converter blocks must be called in the standard user program (standard runtime group).

Extract from a process tag chart; converting the ""QBAD"" signal from F_BOOL to BOOL:

Note

The figure is available in its original size as appendix to the manual in the ZIP download of the checklists.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Standard and F-blocks are in different runtime groups. As shown here, some F-blocks have outputs (depicted in gray), which can be directly interconnected with standard PCS 7 blocks. PCS 7 blocks such as MonAnL, MonDiL, EventMESSAGE and their associated faceplates and process symbols are used to visualize fail-safe analog values and status messages as well as system states and operating states. If parameters cannot be directly further interconnected due to the safety data format, the conversion blocks described above can be used.

# Converting standard data types into F-data types

If data from the standard user program is to be processed further in the F-program, it will need to be converted. The blocks for data conversion from standard data types to F-data types (F_datatype_Fdatatype) can only be used in the F-program (F-runtime group).

Extract from an F-chart, conversion from REAL to F_REAL:

|7_R_FR_CONv|R -B|CE 32|CB39|:RELL|Aulci|
|---|---|---|---|---|---|
|DAII ZROC3?|VALUE DiT| | | | |

Note: The conversion blocks only perform data conversion; in other words, you will need to program additional measures in the F-program for plausibility checking purposes (with F_LIM_R, for example), in order to ensure that only non-hazardous values are possible.

# 7.2.8 How F-blocks with floating-point operations respond to number range overflows

Within the context of analog value processing, number range overflows/underflows can occur during arithmetic calculations (with division by 0, root from a negative number or number range overflow). With S7 F Systems Lib V1_3 and higher, the response is as follows in this case: The results ""Overflow (± infinite)"", ""Denormalized floating-point number"" or ""Invalid floating-point number (NaN)"" are:

- Either output at the output and can be processed further by subsequent F blocks
- Or signaled to special outputs. A substitute value is output if necessary.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

91

# Configuring the safety program

# 7.2 Creating the safety program

If the floating-point operation produces an invalid floating-point number (NaN) and no invalid floating-point number (NaN) existed as an address prior to this, the following diagnostics event will be entered in the F CPU's diagnostic buffer:

""Safety program: Invalid REAL number in DB"" (event ID 16#75D9)

You can use this entry in the diagnostic buffer to identify the F block with the invalid floating-point number (NaN).

If you are not able to prevent these events from occurring in your safety program, you will need to decide, on the basis of your application, whether you wish to respond to them in your safety program.

|AD?|nddie|101.o = 101.0_|10o.0|-10q|CUIL|5035|
|---|---|---|---|---|---|---|
|AD?|indoic|0b37 1.0e+3e|:Addle|0etz|3.0e-3e|10o.0|
| |100.0|3.0e-38| |CUIL|AD_|:itis|
|0837i|LIN_R|08371|#Addic|3402-32|c0m| |
| |ce-JE| |CUII|Sms|AD?|0BJ7i|
|Addue|J1o|~10O|02-J8|~100.0|CuTO|100.0=|
|DIV|LIK_R|:tris|100.0_| |100.-|CutQ|
|0.0|502S|SoRT|HXR|:Squo-|{AJi|hal|
|-10o.05|CVIQ|CUIL|5023_W| | | |

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.3 Configuring fail-safe AS-AS communication

You can use the F_LIM_R F block to check the result of a floating-point operation for overflow (± infinite) and invalid floating-point number (NaN).

- A limit violation is indicated by IN &gt; MAX or ""+ infinite"". ",Which parameters must not be changed in the safety program according to the 'Compendium Part B - Process Safety (V9.0)'?,A2,It is prohibited to alter PAR_ID and COMPLEM values.,1.609375,1.7265625,3.328125,1.1640625,0.23046875
47,pcs7_compendium_part_b_en-US_en-US.txt,37,5dea5c3b1bc7a2a2d3707ace8a7d6e3ed157196366f8ee88ba630fadc3d36b0e,"Changes to the input parameters of F blocks with F data types can be made as follows:

- Offline with the assistance of the CFC editor
- Online using CFC test mode with safety mode deactivated

Note

Values of PAR_ID and COMPLEM must not be changed. If errors in the safety data format are detected during the execution of the safety program, an F-STOP is triggered.

# 7.2.4 Run sequence of F-blocks

# Defining the run sequence

You define the run sequence in the CFC editor in the same way as for a standard user program. Changing the run sequence also changes the collective signature.

# Correct run sequence of F-blocks

The sequence of the F-blocks within the F-shutdown group is relevant. The number of F-runtime groups the F-shutdown group has been split into is of no relevance. Essentially, the correct run sequence of the various F-block types is as follows:

1. Placed automatically:
- F module driver for F-signal modules with inputs or with inputs and outputs
- F-communications blocks and F-system blocks for receiving
- F blocks for data conversion from standard value to F-structure
- F modules with OS connection
2. F channel drivers for inputs
3. F blocks for user logic

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

1. F channel drivers for outputs
2. Placed automatically:
- F block F_PLK
- F block F_PSG_M
- F module driver for F-signal modules with outputs or with inputs and outputs
- F-communications blocks and F-system blocks for sending
- F block F_PLK_O
- F block F_DIAG (S7 F-Systems Lib V1_3 and higher)

The run sequence of the blocks listed under items 1 and 5 is adjusted automatically when the F-program is compiled.
As if S7 F Systems Lib V1_3, separate runtime groups are created for the F blocks listed under points 1 and 5 during the first compilation.
The IPO principle (input, process, output) must always be observed when placing F-channel drivers and F-blocks for user logic.
This ensures that all inputs are read first, the relevant processing steps are performed, and all outputs are then written.
Furthermore, F-runtime groups and F-monitoring blocks that are only visible following compilation are also added automatically.

Note

No changes may be made in the automatically added runtime groups with the exception of the scan cycle monitoring on ""F_CYC_CO"" blocks and the parameter assignment of the ""F_SHUTDN"" block.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.5 F-runtime groups

During the programming of the safety program, F-blocks cannot be inserted directly into tasks (cyclic interrupt OBs). When a new CFC chart is created in PCS 7, the system will automatically generate a runtime group of the same name, into which the F-blocks placed in the corresponding CFC chart can then be inserted. An F-runtime group only becomes an F-runtime group (identified by a yellow folder and ""F"") when F-blocks are called in it.

0B37 [Cyclic interrupt7] (300 ms)
@CPU_RTI@CPU_RT
@F_ShutDn_37 (300 ms)
@F_ShutDn (300 ms)
CycCo-QB37 (300 ms)
CycCo-OB3ZIF_CYC_CO-OB37
@F_CycCo-OB3ZIF_TEST
@F_CycCo-OB37IF_TESTC
@F_TestMode (300 ms)
@F_IN_37_0 (300 ms)
SFC_109_F (300 ms)
AI_F (300 ms)
HS104_F (300 ms)
@F_OUT_37_0 (300 ms)
@F_DbIniti (300 ms)
0B38 [Cycic interrupta] (10 ms)

# Runtime groups of an F-program

The F-program is divided into several runtime groups, as shown in the table below.

Note

xx = Number of the cyclic interrupt OB

y = Consecutive numbering if several shutdown groups exist in a single cyclic interrupt OB

|Chart|F blocks|
|---|---|
|@F_ShutDn_xx|Shutdown logic of cyclic interrupt OB The shutdown logic is created with RTGLOGIC and standard logic blocks.|
|@F_ShutDn|Shutdown block Where an F-program is present in several cyclic interrupt OBs, this runtime group is integrated into the cyclic interrupt OB with the shortest call time. The shutdown logic is created with F_SHUTDN, RTGLOGIC, and standard logic blocks.|
|@F_CycCo-OBxx|F_CYC_CO, F_TEST and F_TESTC (for tests)|
|@F_TestMode|F_TESTM for managing safety mode|
|@F_IN_xx_y|F blocks which supply input values for the F-program (F_QUITES, communication receive blocks, conversion blocks from standard to F-data types, drivers for F-input modules) Runtime groups with user logic, in the sequence in which they were created by the user|

Compendium Part B - Process Safety (V9.0)
Operating Manual, 04/2018, A5E43228905-AA

# 7.2 Creating the safety program

@F_OUT_xx_y Blocks which further process output values of F-blocks (communication send blocks, conversion blocks from F-to standard data types, drivers for F-output modules, F_PLK, F_PLK_O, and F_DIAG for program sequence control)

@F_DbInitxx DB_INIT function block required for the cold restart of an F-runtime group

All required error OBs are added to the block container in the SIMATIC Manager.

There should only be one @F_IN_xx_y runtime group before the first F-user runtime group and one @F_OUT_xx_y runtime group after the last F-user runtime group. If the safety program consists of several shutdown groups (see section 6.2.6 (Page 87)), there is the @F_IN_xx_y and @F_OUT_xx_y runtime group both before and after the F-user runtime group in the shutdown groups.

# Rules for F-runtime groups in the safety program

- We recommend that you proceed as follows in order to make the lengths of the F-cycles as uniform as possible:
If you mix F-and standard runtime groups in a cyclic interrupt OB, you must execute the F-runtime groups before the standard runtime groups.
- The following defaults are set for properties of an F-runtime group:
- Reduction ratio = 1
- Phase offset = 0
- Properties Runtime Group
- Task: 0B37
- Name: HS104
- Comment:
- Reduction ratio:
- Phase offset:
- Optimize run sequence
- Active:
- You are not permitted to move automatically generated F-runtime groups (identified by @).

Note: The feature: Optimize Run Sequence in CFC can lead to a change in the collective signature and impair the response times of the safety program, and therefore should not be used in F-runtime groups.

With PCS 7 V7.0 SP1 and higher, it is no longer possible to optimize the run sequence for cyclic interrupt OBs with F-runtime groups.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.6 F-shutdown groups

An F-shutdown group is a self-contained unit in your safety program. It contains user logic which is executed or shut down simultaneously. The F-shutdown group contains one or a number of F-runtime groups which are assigned to a common cyclic interrupt OB. You can choose whether an error during execution of the safety program causes a full shutdown or a partial shutdown of the safety program. With a partial shutdown, only the F-shutdown group in which the error occurred is shut down.

# Rules for F-shutdown groups in the safety program

You are not permitted to directly interconnect F-blocks in different F-shutdown groups. Data can only be exchanged between F-shutdown groups using special communication blocks (F_S_xx, F_R_xx for F_BOOL and F_REAL data structures). Therefore, all F-channel drivers in an F-signal module must be in the same F-shutdown group, together with the module driver of the F-signal module.

# Defining F-shutdown groups

As soon as you place F-blocks in the CFC editor for the first time, all of the F-runtime groups in a single cyclic interrupt OB will form an F-shutdown group. You can configure each F-runtime group as the last F-runtime group in an F-shutdown group by placing the F_PSG_M ""selection block"". The F-system then creates a new F-shutdown group for all subsequent F-runtime groups until another F_PSG_M block is found.

# Distribution/Combination by means of manual placing of F_PSG_M

If you add or delete one or a number of F_PSG_M blocks in your project, the order of your F-shutdown groups will change. If you make a change to the layout of your F-shutdown groups, you must make sure that the F-module drivers and all assigned F-channel drivers are integrated in the same F-shutdown group. You can split one F-shutdown group into two F-shutdown groups. To do this, in the CFC editor's runtime editor, place the F_PSG_M block in the last F-runtime group which is to be assigned to the first F-shutdown group. All subsequent F-runtime groups will then be assigned to the second F-shutdown group. The number of F-shutdown groups is limited to 110 in all cyclic interrupt OBs. The system restricts the number of F-runtime groups in an F-shutdown group. You have the option of combining two F-shutdown groups. To do this, in the runtime editor of the CFC editor, delete the F_PSG_M block between the F-shutdown groups. If you combine a number of F-shutdown groups which exchange data via F-communication blocks in a single F-shutdown group, you need to remove these F-communications blocks and replace them with direct interconnections.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# Programming data exchange between F-shutdown groups

If you wish to exchange data between two F-shutdown groups, you are not permitted to interconnect the inputs and outputs directly. You need to use the following F-system blocks for data exchange between F blocks in different F-shutdown groups:

|F block|Description|
|---|---|
|F_S_R/F_R_R|Safe transfer of 5 data of the F_REAL type|
|F_S_BO/F_R_BO|Safe transfer of 5 data of the F_BOOL type|

# Procedure for data exchange

1. In the F-shutdown group from which data is to be transferred, add an F_S_R or F_S_BO type F-block.
2. In the F-shutdown group to which data is to be transferred, add an F_R_R or F_R_BO type F-block.
3. Interconnect the SD_R_xx inputs of the F_S_R or the SD_BO_xx inputs of the F_S_BO with the data to be transferred.
4. Interconnect the RD_R_xx outputs of the F_R_R or the RD_BO_xx outputs of the F_R_BO with the inputs of the F-block for further processing of the data received.
5. Interconnect the S_DB output of the send block with the S_DB input of the associated receive block.
6. Configure the TIMEOUT inputs of the F_R_R and F_R_BO receive blocks with the F-monitoring time calculated.
7. Configure the receive block substitute values for the scenario of a shutdown of the sending shutdown group.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Extract from a chart for shutdown group 1 with send block:

|42617|7ail-|7133 Cor|CHLDEA F|1e-0- Ck_INE|
|---|---|---|---|---|
|JdEO|90_8o_|J0_EO|90_BO|JD_Bo_|
|11_112|J0_EO_07|32_80_08|7193 Coz|CHLDEA|
|Q_EAII|4212 bloel|PaJJ_CX|0_Kod|ubSime|
|4nu|Lou|JG RG|P3c >| |

The connection to shutdown group 2 is established by linking output S_DB of block F_S_BO_1 in shutdown group 1 with input S_DB on block F_R_BO_1 in shutdown group 2.

Extract from a chart for shutdown group 2 with receive block:

|Xbaeha|32430|netr|
|---|---|---|
|314 = doxr|3281p|REC_E?|
|Recei|ER EL|RD_BO_|
|RD_BO_|8088Q_01|RD_EQ|
|RD_E?|302ZD|RD_Lo|

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

89

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.7 Data exchange between the F user program and standard user program

The standard program and the F-program use different data formats. Accordingly, special conversion blocks have to be used for data exchange.

F-CPU
F-program
Conversion blocks
Standard program
Converting F-data types to standard data types

If you need the standard user program to process data from the F-program further (for monitoring on the PCS 7 OS, for example), a block for F_FDatatype_Datatype data conversion will have to be interconnected in the user program so that the F-data types can be converted into standard data types. This converter blocks must be called in the standard user program (standard runtime group).

Extract from a process tag chart; converting the ""QBAD"" signal from F_BOOL to BOOL:

Note

The figure is available in its original size as appendix to the manual in the ZIP download of the checklists.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Standard and F-blocks are in different runtime groups. As shown here, some F-blocks have outputs (depicted in gray), which can be directly interconnected with standard PCS 7 blocks. PCS 7 blocks such as MonAnL, MonDiL, EventMESSAGE and their associated faceplates and process symbols are used to visualize fail-safe analog values and status messages as well as system states and operating states. If parameters cannot be directly further interconnected due to the safety data format, the conversion blocks described above can be used.

# Converting standard data types into F-data types

If data from the standard user program is to be processed further in the F-program, it will need to be converted. The blocks for data conversion from standard data types to F-data types (F_datatype_Fdatatype) can only be used in the F-program (F-runtime group).

Extract from an F-chart, conversion from REAL to F_REAL:

|7_R_FR_CONv|R -B|CE 32|CB39|:RELL|Aulci|
|---|---|---|---|---|---|
|DAII ZROC3?|VALUE DiT| | | | |

Note: The conversion blocks only perform data conversion; in other words, you will need to program additional measures in the F-program for plausibility checking purposes (with F_LIM_R, for example), in order to ensure that only non-hazardous values are possible.

# 7.2.8 How F-blocks with floating-point operations respond to number range overflows

Within the context of analog value processing, number range overflows/underflows can occur during arithmetic calculations (with division by 0, root from a negative number or number range overflow). With S7 F Systems Lib V1_3 and higher, the response is as follows in this case: The results ""Overflow (± infinite)"", ""Denormalized floating-point number"" or ""Invalid floating-point number (NaN)"" are:

- Either output at the output and can be processed further by subsequent F blocks
- Or signaled to special outputs. A substitute value is output if necessary.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

91

# Configuring the safety program

# 7.2 Creating the safety program

If the floating-point operation produces an invalid floating-point number (NaN) and no invalid floating-point number (NaN) existed as an address prior to this, the following diagnostics event will be entered in the F CPU's diagnostic buffer:

""Safety program: Invalid REAL number in DB"" (event ID 16#75D9)

You can use this entry in the diagnostic buffer to identify the F block with the invalid floating-point number (NaN).

If you are not able to prevent these events from occurring in your safety program, you will need to decide, on the basis of your application, whether you wish to respond to them in your safety program.

|AD?|nddie|101.o = 101.0_|10o.0|-10q|CUIL|5035|
|---|---|---|---|---|---|---|
|AD?|indoic|0b37 1.0e+3e|:Addle|0etz|3.0e-3e|10o.0|
| |100.0|3.0e-38| |CUIL|AD_|:itis|
|0837i|LIN_R|08371|#Addic|3402-32|c0m| |
| |ce-JE| |CUII|Sms|AD?|0BJ7i|
|Addue|J1o|~10O|02-J8|~100.0|CuTO|100.0=|
|DIV|LIK_R|:tris|100.0_| |100.-|CutQ|
|0.0|502S|SoRT|HXR|:Squo-|{AJi|hal|
|-10o.05|CVIQ|CUIL|5023_W| | | |

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.3 Configuring fail-safe AS-AS communication

You can use the F_LIM_R F block to check the result of a floating-point operation for overflow (± infinite) and invalid floating-point number (NaN).

- A limit violation is indicated by IN &gt; MAX or ""+ infinite"". ",Which parameters must not be changed in the safety program according to the 'Compendium Part B - Process Safety (V9.0)'?,A3,PAR_ID and COMPLEM are the parameters that must remain unchanged.,1.8359375,1.9765625,3.515625,1.21875,0.279296875
48,pcs7_compendium_part_b_en-US_en-US.txt,37,5dea5c3b1bc7a2a2d3707ace8a7d6e3ed157196366f8ee88ba630fadc3d36b0e,"Changes to the input parameters of F blocks with F data types can be made as follows:

- Offline with the assistance of the CFC editor
- Online using CFC test mode with safety mode deactivated

Note

Values of PAR_ID and COMPLEM must not be changed. If errors in the safety data format are detected during the execution of the safety program, an F-STOP is triggered.

# 7.2.4 Run sequence of F-blocks

# Defining the run sequence

You define the run sequence in the CFC editor in the same way as for a standard user program. Changing the run sequence also changes the collective signature.

# Correct run sequence of F-blocks

The sequence of the F-blocks within the F-shutdown group is relevant. The number of F-runtime groups the F-shutdown group has been split into is of no relevance. Essentially, the correct run sequence of the various F-block types is as follows:

1. Placed automatically:
- F module driver for F-signal modules with inputs or with inputs and outputs
- F-communications blocks and F-system blocks for receiving
- F blocks for data conversion from standard value to F-structure
- F modules with OS connection
2. F channel drivers for inputs
3. F blocks for user logic

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

1. F channel drivers for outputs
2. Placed automatically:
- F block F_PLK
- F block F_PSG_M
- F module driver for F-signal modules with outputs or with inputs and outputs
- F-communications blocks and F-system blocks for sending
- F block F_PLK_O
- F block F_DIAG (S7 F-Systems Lib V1_3 and higher)

The run sequence of the blocks listed under items 1 and 5 is adjusted automatically when the F-program is compiled.
As if S7 F Systems Lib V1_3, separate runtime groups are created for the F blocks listed under points 1 and 5 during the first compilation.
The IPO principle (input, process, output) must always be observed when placing F-channel drivers and F-blocks for user logic.
This ensures that all inputs are read first, the relevant processing steps are performed, and all outputs are then written.
Furthermore, F-runtime groups and F-monitoring blocks that are only visible following compilation are also added automatically.

Note

No changes may be made in the automatically added runtime groups with the exception of the scan cycle monitoring on ""F_CYC_CO"" blocks and the parameter assignment of the ""F_SHUTDN"" block.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.5 F-runtime groups

During the programming of the safety program, F-blocks cannot be inserted directly into tasks (cyclic interrupt OBs). When a new CFC chart is created in PCS 7, the system will automatically generate a runtime group of the same name, into which the F-blocks placed in the corresponding CFC chart can then be inserted. An F-runtime group only becomes an F-runtime group (identified by a yellow folder and ""F"") when F-blocks are called in it.

0B37 [Cyclic interrupt7] (300 ms)
@CPU_RTI@CPU_RT
@F_ShutDn_37 (300 ms)
@F_ShutDn (300 ms)
CycCo-QB37 (300 ms)
CycCo-OB3ZIF_CYC_CO-OB37
@F_CycCo-OB3ZIF_TEST
@F_CycCo-OB37IF_TESTC
@F_TestMode (300 ms)
@F_IN_37_0 (300 ms)
SFC_109_F (300 ms)
AI_F (300 ms)
HS104_F (300 ms)
@F_OUT_37_0 (300 ms)
@F_DbIniti (300 ms)
0B38 [Cycic interrupta] (10 ms)

# Runtime groups of an F-program

The F-program is divided into several runtime groups, as shown in the table below.

Note

xx = Number of the cyclic interrupt OB

y = Consecutive numbering if several shutdown groups exist in a single cyclic interrupt OB

|Chart|F blocks|
|---|---|
|@F_ShutDn_xx|Shutdown logic of cyclic interrupt OB The shutdown logic is created with RTGLOGIC and standard logic blocks.|
|@F_ShutDn|Shutdown block Where an F-program is present in several cyclic interrupt OBs, this runtime group is integrated into the cyclic interrupt OB with the shortest call time. The shutdown logic is created with F_SHUTDN, RTGLOGIC, and standard logic blocks.|
|@F_CycCo-OBxx|F_CYC_CO, F_TEST and F_TESTC (for tests)|
|@F_TestMode|F_TESTM for managing safety mode|
|@F_IN_xx_y|F blocks which supply input values for the F-program (F_QUITES, communication receive blocks, conversion blocks from standard to F-data types, drivers for F-input modules) Runtime groups with user logic, in the sequence in which they were created by the user|

Compendium Part B - Process Safety (V9.0)
Operating Manual, 04/2018, A5E43228905-AA

# 7.2 Creating the safety program

@F_OUT_xx_y Blocks which further process output values of F-blocks (communication send blocks, conversion blocks from F-to standard data types, drivers for F-output modules, F_PLK, F_PLK_O, and F_DIAG for program sequence control)

@F_DbInitxx DB_INIT function block required for the cold restart of an F-runtime group

All required error OBs are added to the block container in the SIMATIC Manager.

There should only be one @F_IN_xx_y runtime group before the first F-user runtime group and one @F_OUT_xx_y runtime group after the last F-user runtime group. If the safety program consists of several shutdown groups (see section 6.2.6 (Page 87)), there is the @F_IN_xx_y and @F_OUT_xx_y runtime group both before and after the F-user runtime group in the shutdown groups.

# Rules for F-runtime groups in the safety program

- We recommend that you proceed as follows in order to make the lengths of the F-cycles as uniform as possible:
If you mix F-and standard runtime groups in a cyclic interrupt OB, you must execute the F-runtime groups before the standard runtime groups.
- The following defaults are set for properties of an F-runtime group:
- Reduction ratio = 1
- Phase offset = 0
- Properties Runtime Group
- Task: 0B37
- Name: HS104
- Comment:
- Reduction ratio:
- Phase offset:
- Optimize run sequence
- Active:
- You are not permitted to move automatically generated F-runtime groups (identified by @).

Note: The feature: Optimize Run Sequence in CFC can lead to a change in the collective signature and impair the response times of the safety program, and therefore should not be used in F-runtime groups.

With PCS 7 V7.0 SP1 and higher, it is no longer possible to optimize the run sequence for cyclic interrupt OBs with F-runtime groups.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.6 F-shutdown groups

An F-shutdown group is a self-contained unit in your safety program. It contains user logic which is executed or shut down simultaneously. The F-shutdown group contains one or a number of F-runtime groups which are assigned to a common cyclic interrupt OB. You can choose whether an error during execution of the safety program causes a full shutdown or a partial shutdown of the safety program. With a partial shutdown, only the F-shutdown group in which the error occurred is shut down.

# Rules for F-shutdown groups in the safety program

You are not permitted to directly interconnect F-blocks in different F-shutdown groups. Data can only be exchanged between F-shutdown groups using special communication blocks (F_S_xx, F_R_xx for F_BOOL and F_REAL data structures). Therefore, all F-channel drivers in an F-signal module must be in the same F-shutdown group, together with the module driver of the F-signal module.

# Defining F-shutdown groups

As soon as you place F-blocks in the CFC editor for the first time, all of the F-runtime groups in a single cyclic interrupt OB will form an F-shutdown group. You can configure each F-runtime group as the last F-runtime group in an F-shutdown group by placing the F_PSG_M ""selection block"". The F-system then creates a new F-shutdown group for all subsequent F-runtime groups until another F_PSG_M block is found.

# Distribution/Combination by means of manual placing of F_PSG_M

If you add or delete one or a number of F_PSG_M blocks in your project, the order of your F-shutdown groups will change. If you make a change to the layout of your F-shutdown groups, you must make sure that the F-module drivers and all assigned F-channel drivers are integrated in the same F-shutdown group. You can split one F-shutdown group into two F-shutdown groups. To do this, in the CFC editor's runtime editor, place the F_PSG_M block in the last F-runtime group which is to be assigned to the first F-shutdown group. All subsequent F-runtime groups will then be assigned to the second F-shutdown group. The number of F-shutdown groups is limited to 110 in all cyclic interrupt OBs. The system restricts the number of F-runtime groups in an F-shutdown group. You have the option of combining two F-shutdown groups. To do this, in the runtime editor of the CFC editor, delete the F_PSG_M block between the F-shutdown groups. If you combine a number of F-shutdown groups which exchange data via F-communication blocks in a single F-shutdown group, you need to remove these F-communications blocks and replace them with direct interconnections.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# Programming data exchange between F-shutdown groups

If you wish to exchange data between two F-shutdown groups, you are not permitted to interconnect the inputs and outputs directly. You need to use the following F-system blocks for data exchange between F blocks in different F-shutdown groups:

|F block|Description|
|---|---|
|F_S_R/F_R_R|Safe transfer of 5 data of the F_REAL type|
|F_S_BO/F_R_BO|Safe transfer of 5 data of the F_BOOL type|

# Procedure for data exchange

1. In the F-shutdown group from which data is to be transferred, add an F_S_R or F_S_BO type F-block.
2. In the F-shutdown group to which data is to be transferred, add an F_R_R or F_R_BO type F-block.
3. Interconnect the SD_R_xx inputs of the F_S_R or the SD_BO_xx inputs of the F_S_BO with the data to be transferred.
4. Interconnect the RD_R_xx outputs of the F_R_R or the RD_BO_xx outputs of the F_R_BO with the inputs of the F-block for further processing of the data received.
5. Interconnect the S_DB output of the send block with the S_DB input of the associated receive block.
6. Configure the TIMEOUT inputs of the F_R_R and F_R_BO receive blocks with the F-monitoring time calculated.
7. Configure the receive block substitute values for the scenario of a shutdown of the sending shutdown group.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Extract from a chart for shutdown group 1 with send block:

|42617|7ail-|7133 Cor|CHLDEA F|1e-0- Ck_INE|
|---|---|---|---|---|
|JdEO|90_8o_|J0_EO|90_BO|JD_Bo_|
|11_112|J0_EO_07|32_80_08|7193 Coz|CHLDEA|
|Q_EAII|4212 bloel|PaJJ_CX|0_Kod|ubSime|
|4nu|Lou|JG RG|P3c >| |

The connection to shutdown group 2 is established by linking output S_DB of block F_S_BO_1 in shutdown group 1 with input S_DB on block F_R_BO_1 in shutdown group 2.

Extract from a chart for shutdown group 2 with receive block:

|Xbaeha|32430|netr|
|---|---|---|
|314 = doxr|3281p|REC_E?|
|Recei|ER EL|RD_BO_|
|RD_BO_|8088Q_01|RD_EQ|
|RD_E?|302ZD|RD_Lo|

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

89

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.7 Data exchange between the F user program and standard user program

The standard program and the F-program use different data formats. Accordingly, special conversion blocks have to be used for data exchange.

F-CPU
F-program
Conversion blocks
Standard program
Converting F-data types to standard data types

If you need the standard user program to process data from the F-program further (for monitoring on the PCS 7 OS, for example), a block for F_FDatatype_Datatype data conversion will have to be interconnected in the user program so that the F-data types can be converted into standard data types. This converter blocks must be called in the standard user program (standard runtime group).

Extract from a process tag chart; converting the ""QBAD"" signal from F_BOOL to BOOL:

Note

The figure is available in its original size as appendix to the manual in the ZIP download of the checklists.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Standard and F-blocks are in different runtime groups. As shown here, some F-blocks have outputs (depicted in gray), which can be directly interconnected with standard PCS 7 blocks. PCS 7 blocks such as MonAnL, MonDiL, EventMESSAGE and their associated faceplates and process symbols are used to visualize fail-safe analog values and status messages as well as system states and operating states. If parameters cannot be directly further interconnected due to the safety data format, the conversion blocks described above can be used.

# Converting standard data types into F-data types

If data from the standard user program is to be processed further in the F-program, it will need to be converted. The blocks for data conversion from standard data types to F-data types (F_datatype_Fdatatype) can only be used in the F-program (F-runtime group).

Extract from an F-chart, conversion from REAL to F_REAL:

|7_R_FR_CONv|R -B|CE 32|CB39|:RELL|Aulci|
|---|---|---|---|---|---|
|DAII ZROC3?|VALUE DiT| | | | |

Note: The conversion blocks only perform data conversion; in other words, you will need to program additional measures in the F-program for plausibility checking purposes (with F_LIM_R, for example), in order to ensure that only non-hazardous values are possible.

# 7.2.8 How F-blocks with floating-point operations respond to number range overflows

Within the context of analog value processing, number range overflows/underflows can occur during arithmetic calculations (with division by 0, root from a negative number or number range overflow). With S7 F Systems Lib V1_3 and higher, the response is as follows in this case: The results ""Overflow (± infinite)"", ""Denormalized floating-point number"" or ""Invalid floating-point number (NaN)"" are:

- Either output at the output and can be processed further by subsequent F blocks
- Or signaled to special outputs. A substitute value is output if necessary.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

91

# Configuring the safety program

# 7.2 Creating the safety program

If the floating-point operation produces an invalid floating-point number (NaN) and no invalid floating-point number (NaN) existed as an address prior to this, the following diagnostics event will be entered in the F CPU's diagnostic buffer:

""Safety program: Invalid REAL number in DB"" (event ID 16#75D9)

You can use this entry in the diagnostic buffer to identify the F block with the invalid floating-point number (NaN).

If you are not able to prevent these events from occurring in your safety program, you will need to decide, on the basis of your application, whether you wish to respond to them in your safety program.

|AD?|nddie|101.o = 101.0_|10o.0|-10q|CUIL|5035|
|---|---|---|---|---|---|---|
|AD?|indoic|0b37 1.0e+3e|:Addle|0etz|3.0e-3e|10o.0|
| |100.0|3.0e-38| |CUIL|AD_|:itis|
|0837i|LIN_R|08371|#Addic|3402-32|c0m| |
| |ce-JE| |CUII|Sms|AD?|0BJ7i|
|Addue|J1o|~10O|02-J8|~100.0|CuTO|100.0=|
|DIV|LIK_R|:tris|100.0_| |100.-|CutQ|
|0.0|502S|SoRT|HXR|:Squo-|{AJi|hal|
|-10o.05|CVIQ|CUIL|5023_W| | | |

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.3 Configuring fail-safe AS-AS communication

You can use the F_LIM_R F block to check the result of a floating-point operation for overflow (± infinite) and invalid floating-point number (NaN).

- A limit violation is indicated by IN &gt; MAX or ""+ infinite"". ",Which parameters must not be changed in the safety program according to the 'Compendium Part B - Process Safety (V9.0)'?,A4,Changing PAR_ID and COMPLEM values is not allowed.,1.5390625,1.578125,3.296875,1.125,0.24609375
49,pcs7_compendium_part_b_en-US_en-US.txt,37,5dea5c3b1bc7a2a2d3707ace8a7d6e3ed157196366f8ee88ba630fadc3d36b0e,"Changes to the input parameters of F blocks with F data types can be made as follows:

- Offline with the assistance of the CFC editor
- Online using CFC test mode with safety mode deactivated

Note

Values of PAR_ID and COMPLEM must not be changed. If errors in the safety data format are detected during the execution of the safety program, an F-STOP is triggered.

# 7.2.4 Run sequence of F-blocks

# Defining the run sequence

You define the run sequence in the CFC editor in the same way as for a standard user program. Changing the run sequence also changes the collective signature.

# Correct run sequence of F-blocks

The sequence of the F-blocks within the F-shutdown group is relevant. The number of F-runtime groups the F-shutdown group has been split into is of no relevance. Essentially, the correct run sequence of the various F-block types is as follows:

1. Placed automatically:
- F module driver for F-signal modules with inputs or with inputs and outputs
- F-communications blocks and F-system blocks for receiving
- F blocks for data conversion from standard value to F-structure
- F modules with OS connection
2. F channel drivers for inputs
3. F blocks for user logic

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

1. F channel drivers for outputs
2. Placed automatically:
- F block F_PLK
- F block F_PSG_M
- F module driver for F-signal modules with outputs or with inputs and outputs
- F-communications blocks and F-system blocks for sending
- F block F_PLK_O
- F block F_DIAG (S7 F-Systems Lib V1_3 and higher)

The run sequence of the blocks listed under items 1 and 5 is adjusted automatically when the F-program is compiled.
As if S7 F Systems Lib V1_3, separate runtime groups are created for the F blocks listed under points 1 and 5 during the first compilation.
The IPO principle (input, process, output) must always be observed when placing F-channel drivers and F-blocks for user logic.
This ensures that all inputs are read first, the relevant processing steps are performed, and all outputs are then written.
Furthermore, F-runtime groups and F-monitoring blocks that are only visible following compilation are also added automatically.

Note

No changes may be made in the automatically added runtime groups with the exception of the scan cycle monitoring on ""F_CYC_CO"" blocks and the parameter assignment of the ""F_SHUTDN"" block.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.5 F-runtime groups

During the programming of the safety program, F-blocks cannot be inserted directly into tasks (cyclic interrupt OBs). When a new CFC chart is created in PCS 7, the system will automatically generate a runtime group of the same name, into which the F-blocks placed in the corresponding CFC chart can then be inserted. An F-runtime group only becomes an F-runtime group (identified by a yellow folder and ""F"") when F-blocks are called in it.

0B37 [Cyclic interrupt7] (300 ms)
@CPU_RTI@CPU_RT
@F_ShutDn_37 (300 ms)
@F_ShutDn (300 ms)
CycCo-QB37 (300 ms)
CycCo-OB3ZIF_CYC_CO-OB37
@F_CycCo-OB3ZIF_TEST
@F_CycCo-OB37IF_TESTC
@F_TestMode (300 ms)
@F_IN_37_0 (300 ms)
SFC_109_F (300 ms)
AI_F (300 ms)
HS104_F (300 ms)
@F_OUT_37_0 (300 ms)
@F_DbIniti (300 ms)
0B38 [Cycic interrupta] (10 ms)

# Runtime groups of an F-program

The F-program is divided into several runtime groups, as shown in the table below.

Note

xx = Number of the cyclic interrupt OB

y = Consecutive numbering if several shutdown groups exist in a single cyclic interrupt OB

|Chart|F blocks|
|---|---|
|@F_ShutDn_xx|Shutdown logic of cyclic interrupt OB The shutdown logic is created with RTGLOGIC and standard logic blocks.|
|@F_ShutDn|Shutdown block Where an F-program is present in several cyclic interrupt OBs, this runtime group is integrated into the cyclic interrupt OB with the shortest call time. The shutdown logic is created with F_SHUTDN, RTGLOGIC, and standard logic blocks.|
|@F_CycCo-OBxx|F_CYC_CO, F_TEST and F_TESTC (for tests)|
|@F_TestMode|F_TESTM for managing safety mode|
|@F_IN_xx_y|F blocks which supply input values for the F-program (F_QUITES, communication receive blocks, conversion blocks from standard to F-data types, drivers for F-input modules) Runtime groups with user logic, in the sequence in which they were created by the user|

Compendium Part B - Process Safety (V9.0)
Operating Manual, 04/2018, A5E43228905-AA

# 7.2 Creating the safety program

@F_OUT_xx_y Blocks which further process output values of F-blocks (communication send blocks, conversion blocks from F-to standard data types, drivers for F-output modules, F_PLK, F_PLK_O, and F_DIAG for program sequence control)

@F_DbInitxx DB_INIT function block required for the cold restart of an F-runtime group

All required error OBs are added to the block container in the SIMATIC Manager.

There should only be one @F_IN_xx_y runtime group before the first F-user runtime group and one @F_OUT_xx_y runtime group after the last F-user runtime group. If the safety program consists of several shutdown groups (see section 6.2.6 (Page 87)), there is the @F_IN_xx_y and @F_OUT_xx_y runtime group both before and after the F-user runtime group in the shutdown groups.

# Rules for F-runtime groups in the safety program

- We recommend that you proceed as follows in order to make the lengths of the F-cycles as uniform as possible:
If you mix F-and standard runtime groups in a cyclic interrupt OB, you must execute the F-runtime groups before the standard runtime groups.
- The following defaults are set for properties of an F-runtime group:
- Reduction ratio = 1
- Phase offset = 0
- Properties Runtime Group
- Task: 0B37
- Name: HS104
- Comment:
- Reduction ratio:
- Phase offset:
- Optimize run sequence
- Active:
- You are not permitted to move automatically generated F-runtime groups (identified by @).

Note: The feature: Optimize Run Sequence in CFC can lead to a change in the collective signature and impair the response times of the safety program, and therefore should not be used in F-runtime groups.

With PCS 7 V7.0 SP1 and higher, it is no longer possible to optimize the run sequence for cyclic interrupt OBs with F-runtime groups.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.6 F-shutdown groups

An F-shutdown group is a self-contained unit in your safety program. It contains user logic which is executed or shut down simultaneously. The F-shutdown group contains one or a number of F-runtime groups which are assigned to a common cyclic interrupt OB. You can choose whether an error during execution of the safety program causes a full shutdown or a partial shutdown of the safety program. With a partial shutdown, only the F-shutdown group in which the error occurred is shut down.

# Rules for F-shutdown groups in the safety program

You are not permitted to directly interconnect F-blocks in different F-shutdown groups. Data can only be exchanged between F-shutdown groups using special communication blocks (F_S_xx, F_R_xx for F_BOOL and F_REAL data structures). Therefore, all F-channel drivers in an F-signal module must be in the same F-shutdown group, together with the module driver of the F-signal module.

# Defining F-shutdown groups

As soon as you place F-blocks in the CFC editor for the first time, all of the F-runtime groups in a single cyclic interrupt OB will form an F-shutdown group. You can configure each F-runtime group as the last F-runtime group in an F-shutdown group by placing the F_PSG_M ""selection block"". The F-system then creates a new F-shutdown group for all subsequent F-runtime groups until another F_PSG_M block is found.

# Distribution/Combination by means of manual placing of F_PSG_M

If you add or delete one or a number of F_PSG_M blocks in your project, the order of your F-shutdown groups will change. If you make a change to the layout of your F-shutdown groups, you must make sure that the F-module drivers and all assigned F-channel drivers are integrated in the same F-shutdown group. You can split one F-shutdown group into two F-shutdown groups. To do this, in the CFC editor's runtime editor, place the F_PSG_M block in the last F-runtime group which is to be assigned to the first F-shutdown group. All subsequent F-runtime groups will then be assigned to the second F-shutdown group. The number of F-shutdown groups is limited to 110 in all cyclic interrupt OBs. The system restricts the number of F-runtime groups in an F-shutdown group. You have the option of combining two F-shutdown groups. To do this, in the runtime editor of the CFC editor, delete the F_PSG_M block between the F-shutdown groups. If you combine a number of F-shutdown groups which exchange data via F-communication blocks in a single F-shutdown group, you need to remove these F-communications blocks and replace them with direct interconnections.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

# Programming data exchange between F-shutdown groups

If you wish to exchange data between two F-shutdown groups, you are not permitted to interconnect the inputs and outputs directly. You need to use the following F-system blocks for data exchange between F blocks in different F-shutdown groups:

|F block|Description|
|---|---|
|F_S_R/F_R_R|Safe transfer of 5 data of the F_REAL type|
|F_S_BO/F_R_BO|Safe transfer of 5 data of the F_BOOL type|

# Procedure for data exchange

1. In the F-shutdown group from which data is to be transferred, add an F_S_R or F_S_BO type F-block.
2. In the F-shutdown group to which data is to be transferred, add an F_R_R or F_R_BO type F-block.
3. Interconnect the SD_R_xx inputs of the F_S_R or the SD_BO_xx inputs of the F_S_BO with the data to be transferred.
4. Interconnect the RD_R_xx outputs of the F_R_R or the RD_BO_xx outputs of the F_R_BO with the inputs of the F-block for further processing of the data received.
5. Interconnect the S_DB output of the send block with the S_DB input of the associated receive block.
6. Configure the TIMEOUT inputs of the F_R_R and F_R_BO receive blocks with the F-monitoring time calculated.
7. Configure the receive block substitute values for the scenario of a shutdown of the sending shutdown group.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Extract from a chart for shutdown group 1 with send block:

|42617|7ail-|7133 Cor|CHLDEA F|1e-0- Ck_INE|
|---|---|---|---|---|
|JdEO|90_8o_|J0_EO|90_BO|JD_Bo_|
|11_112|J0_EO_07|32_80_08|7193 Coz|CHLDEA|
|Q_EAII|4212 bloel|PaJJ_CX|0_Kod|ubSime|
|4nu|Lou|JG RG|P3c >| |

The connection to shutdown group 2 is established by linking output S_DB of block F_S_BO_1 in shutdown group 1 with input S_DB on block F_R_BO_1 in shutdown group 2.

Extract from a chart for shutdown group 2 with receive block:

|Xbaeha|32430|netr|
|---|---|---|
|314 = doxr|3281p|REC_E?|
|Recei|ER EL|RD_BO_|
|RD_BO_|8088Q_01|RD_EQ|
|RD_E?|302ZD|RD_Lo|

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

89

# Configuring the safety program

# 7.2 Creating the safety program

# 7.2.7 Data exchange between the F user program and standard user program

The standard program and the F-program use different data formats. Accordingly, special conversion blocks have to be used for data exchange.

F-CPU
F-program
Conversion blocks
Standard program
Converting F-data types to standard data types

If you need the standard user program to process data from the F-program further (for monitoring on the PCS 7 OS, for example), a block for F_FDatatype_Datatype data conversion will have to be interconnected in the user program so that the F-data types can be converted into standard data types. This converter blocks must be called in the standard user program (standard runtime group).

Extract from a process tag chart; converting the ""QBAD"" signal from F_BOOL to BOOL:

Note

The figure is available in its original size as appendix to the manual in the ZIP download of the checklists.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.2 Creating the safety program

Standard and F-blocks are in different runtime groups. As shown here, some F-blocks have outputs (depicted in gray), which can be directly interconnected with standard PCS 7 blocks. PCS 7 blocks such as MonAnL, MonDiL, EventMESSAGE and their associated faceplates and process symbols are used to visualize fail-safe analog values and status messages as well as system states and operating states. If parameters cannot be directly further interconnected due to the safety data format, the conversion blocks described above can be used.

# Converting standard data types into F-data types

If data from the standard user program is to be processed further in the F-program, it will need to be converted. The blocks for data conversion from standard data types to F-data types (F_datatype_Fdatatype) can only be used in the F-program (F-runtime group).

Extract from an F-chart, conversion from REAL to F_REAL:

|7_R_FR_CONv|R -B|CE 32|CB39|:RELL|Aulci|
|---|---|---|---|---|---|
|DAII ZROC3?|VALUE DiT| | | | |

Note: The conversion blocks only perform data conversion; in other words, you will need to program additional measures in the F-program for plausibility checking purposes (with F_LIM_R, for example), in order to ensure that only non-hazardous values are possible.

# 7.2.8 How F-blocks with floating-point operations respond to number range overflows

Within the context of analog value processing, number range overflows/underflows can occur during arithmetic calculations (with division by 0, root from a negative number or number range overflow). With S7 F Systems Lib V1_3 and higher, the response is as follows in this case: The results ""Overflow (± infinite)"", ""Denormalized floating-point number"" or ""Invalid floating-point number (NaN)"" are:

- Either output at the output and can be processed further by subsequent F blocks
- Or signaled to special outputs. A substitute value is output if necessary.

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

91

# Configuring the safety program

# 7.2 Creating the safety program

If the floating-point operation produces an invalid floating-point number (NaN) and no invalid floating-point number (NaN) existed as an address prior to this, the following diagnostics event will be entered in the F CPU's diagnostic buffer:

""Safety program: Invalid REAL number in DB"" (event ID 16#75D9)

You can use this entry in the diagnostic buffer to identify the F block with the invalid floating-point number (NaN).

If you are not able to prevent these events from occurring in your safety program, you will need to decide, on the basis of your application, whether you wish to respond to them in your safety program.

|AD?|nddie|101.o = 101.0_|10o.0|-10q|CUIL|5035|
|---|---|---|---|---|---|---|
|AD?|indoic|0b37 1.0e+3e|:Addle|0etz|3.0e-3e|10o.0|
| |100.0|3.0e-38| |CUIL|AD_|:itis|
|0837i|LIN_R|08371|#Addic|3402-32|c0m| |
| |ce-JE| |CUII|Sms|AD?|0BJ7i|
|Addue|J1o|~10O|02-J8|~100.0|CuTO|100.0=|
|DIV|LIK_R|:tris|100.0_| |100.-|CutQ|
|0.0|502S|SoRT|HXR|:Squo-|{AJi|hal|
|-10o.05|CVIQ|CUIL|5023_W| | | |

Compendium Part B - Process Safety (V9.0)

Operating Manual, 04/2018, A5E43228905-AA

# Configuring the safety program

# 7.3 Configuring fail-safe AS-AS communication

You can use the F_LIM_R F block to check the result of a floating-point operation for overflow (± infinite) and invalid floating-point number (NaN).

- A limit violation is indicated by IN &gt; MAX or ""+ infinite"". ",Which parameters must not be changed in the safety program according to the 'Compendium Part B - Process Safety (V9.0)'?,A5,The manual specifies that PAR_ID and COMPLEM parameters should not be modified.,1.3671875,1.375,3.421875,1.1953125,0.326171875
